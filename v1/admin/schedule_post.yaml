postData: 
  type: 'object'
  properties: 
    data:
      type: 'object'
      properties:
        text:
          type: 'string'
          description: 'data for text in post parent'
          example: 'example text'
    attachments:
      type: 'array'
      items:
        type: 'object'
        description: 'attachment info'
        properties:
          fileId:
            type: 'string'
            example: '57b916d38eaf8010caddfb7759a2d06c'
            description: 'file id for attachment'
          type:
            type: 'string'
            description: 'attachment type'
            enum:
              - 'image'
              - 'file'
              - 'video'
    dataType:
      type: 'string'
      example: 'upstra.customtype'
      description: 'Must be in dot separated string format or system defined format (ex. "upstra.customtype", "com.eko.birthday")'
    targetType:
      type: 'string'
      enum:
        - 'user'
        - 'community'
        - 'content'
      default: 'user'
      description: 'where to create post to'
    targetId:
      type: 'string'
      example: 'public_user_id'
      description: 'Resource public id depends on target type (ex. target type is community, target id will be community public id)'
    metadata:
      type: 'object'
      example:
        anything: 'you want'
    postId:
      type: 'string'
      example: 'postidiwant'
      description: 'for specify public post id on post creation'
    tags:
      type: 'array'
      minItems: 0
      maxItems: 5
      items:
        type: 'string'
        description: 'tags'
        maximum: 24
    mentionees:
      type: 'array'
      description: 'The object of the mentions type and user who get a notification from the post.'
      items:
        type: 'object'
        properties:
          type:
            type: 'string'
            example: 'user'
            description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
            enum:
              - 'user'
          userIds:
            type: 'array'
            example:
              - 'userId1'
              - 'userId2'
            description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds'
            items:
              type: 'string'
    createdAt:
      type: 'string'
      description: 'The date/time when a post is created.'
      format: 'date-time'
      example: '2022-07-07T04:24:20.444Z'

postRespBody:
  type: object
  properties:
    id:
      type: string
      description: id of the scheduled post
      example: 60e4b1b4b3b2b5c4c4b3b2b5

getRespBody:
  type: 'object'
  properties: 
    data:
      type: 'array'
      items:
        type: 'object'
        description: 'list of scheduled post'
        properties:
          _id: 
            type: 'string'
            description: 'scheduled post id'
            example: '60e4b1b4b3b2b5c4c4b3b2b5'
          scheduledAt: 
            $ref: '#/postReqSchema/properties/scheduledAt'
          status:
            type: 'object'
            description: 'status of scheduled post'
            properties:
              type:
                type: 'string'
                description: 'status type'
                enum:
                  - 'WAIT'
                  - 'DONE'
                  - 'FAIL'
              description:
                type: 'string'
                description: 'description of status'
                example: 'waiting to be posted'
          postData: 
            $ref: '#/postData'
          userId: 
            type: 'string'
            description: 'user id who create this scheduled post'
            example: '60e4b1b4b3b2b5c4c4b3b2b5'
          createdAt:
            type: 'string'
            description: 'The date/time when this scheduled post is created.'
            format: 'date-time'
            example: '2022-07-07T04:24:20.444Z'
          updatedAt:
            type: 'string'
            description: 'The date/time when this scheduled post is updated.'
            format: 'date-time'
            example: '2022-07-07T04:24:20.444Z'
    networkId: 
      type: string
      description: 'network id of all of the posts'
      example: '60e4b1b4b3b2b5c4c4b3b2b5'
    paging:
      type: 'object'
      properties:
        next: 
          type: 'string'
          example: 'eyJiZWZvcmUiOiI2NDgxNzYxNmU0ZDgzODgxMTFhNDMwZjUiLCJsaW1pdCI6Mn0'
        previous: 
          type: 'string'
          example: 'eyJhZnRlciI6IjY0ODE3NjE2ZTRkODM4ODExMWE0MzBmMCIsImxpbWl0IjoyfQ=='

postReqSchema: 
  type: 'object'
  properties:
    postData: 
      $ref: '#/postData'
    scheduledAt: 
      type: 'string'
      description: 'The date/time when a post is scheduled. Need to be within next hour and next 30 days.'
      format: 'date-time'
      example: '2022-07-07T04:24:20.444Z'
  required:
    - 'postData'
    - 'scheduledAt'


postReqBody:
  description: "
    Information of a Post to be Created\n\n
    Require text or at least 1 attachment.


    ### Custom Post

    - When `dataType` is set as the custom name (dot-separated string format, see the `dataType` field section), the `data` payload can be anything, but it will not support normal data capability (e.g., `text` data will not be created).\n
    - The `data` payload size will be limited to 100 KB.\n
    - `attachments` will be ignored. Users need to include them in the `data` field and handle the file info themselves.\n

    ### Image, File, Video Post

    - Put `type` with file ID in `attachments`.
    - Image and File data can be picked from `fileId` in `data` object in the child post.\n
    - Video fileId for each resolution will be in `videoFileId` in `data` object in the child post.\n "
  required: true
  content:
    application/json:
      schema: 
        $ref: '#/postReqSchema' 

deleteReqBody:
  required: true
  content:
    application/json:
      schema:
        type: 'object'
        properties:
          id:
            type: 'string'
            description: 'to specify which scheduled post to delete'
        required:
          - 'id'
        description: 'Ok, not returning any data'

getReqBody:
  required: true
  content:
    application/json:
      schema:
        type: 'object'
        properties:
          notPostedOnly:
            type: 'boolean'
            description: 'to get only scheduled post that not posted yet'
            default: false
          options: 
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
              before:
                type: 'string'
                maxLength: 24
              after:
                type: 'string'
                maxLength: 24
              updatedAt:
                type: 'string'
                maxLength: 100
            description: 'use updatedAt when sort by first/lastUpdated'
          sortBy:
            type: 'string'
            enum:
              - 'lastCreated'
              - 'firstCreated'
              - 'lastUpdated'
              - 'firstUpdated'
            default: 'lastCreated'
