openapi: '3.0.0'
info:
  title: 'Amity Social Cloud SDK'
  description: "<h2>Using Amity APIs</h2>\n\nOur API documentation explains all API endpoints used in Amity Social Cloud. All APIs, with the exception of some\nauthentication APIs, require an access token for authentication and authorization. APIs can be used either in Admin\nor User context. When used in user context, you will only be able to fetch data related to that user only.\nFor Administrators who are using our API documentation in making server-to-server API calls, you need an Admin\nAccess token to connect to the Amity server. Refer to <a href=\"https://docs.amity.co/console/settings#admin-api-access-token\" target=\"_blank\">this documentation</a>\nfor the instructions on how to generate an admin access token.\n\nAll backend endpoints that support Amity SDK are included here. To easily differentiate the type of each endpoint,\nwe added a prefix in each endpoint's path.\n\n1. Socket Endpoint: /sockets/...\n2. Socket Event: /callbacks/...\n3. REST API Endpoint: /v1/, /v2/, /v3/, or /v4/...\n4. Webhook Event: /webhook/...\n\n<h2>Select Region Endpoint</h2>\n\nBefore making server-to-server API calls, be sure to select the correct API endpoint for your region in\nthe <strong>Servers</strong> dropdown below.\n"
  version: '4.51.0'
servers:
  - url: 'https://api.us.amity.co'
    description: 'API Endpoint for US Region'
  - url: 'https://api.eu.amity.co'
    description: 'API Endpoint for EU Region'
  - url: 'https://api.sg.amity.co'
    description: 'API Endpoint for SG Region'
paths:
  /api/v3/authentication/token:
    $ref: './v3/authentication/api.yaml#/AuthenticationToken'
  /api/v4/authentication/token:
    post:
      summary: 'Create authentication token for session creation API'
      tags:
        - 'Authentication'
      parameters:
        - name: 'x-server-key'
          in: 'header'
          required: true
          schema:
            type: 'string'
      description: "Create authentication token for session creation API. Token userId need to match userId when using it\n"
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  description: 'User id to assign this token'
      responses:
        '200':
          description: 'Response payload'
          content:
            text/plain:
              schema:
                type: 'string'
                example: 's9qne0wEqVb2e05271177748659f574a4e8ab85e08'
                description: 'Use this token when create sessions'
        '401':
          description: 'Unauthorized. Server key is invalid.'
          content:
            text/plain:
              schema:
                type: 'string'
                example: 'Unauthorized'
                description: 'Server key is invalid'
        '403':
          description: 'Forbidden. Possibly that secure mode is disabled'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  message:
                    type: 'string'
                  code:
                    type: 'number'
                  data:
                    type: 'object'
                    description: 'error detail'
        '422':
          description: 'Parameters validation error'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  message:
                    type: 'string'
                  code:
                    type: 'number'
                  data:
                    type: 'object'
                    description: 'error detail'
  /api/v3/sessions:
    post:
      summary: 'Register a session'
      tags:
        - 'Session'
      parameters:
        - name: 'x-api-key'
          in: 'header'
          required: true
          schema:
            type: 'string'
      description: "Register a session in order to connect to socket endpoint to perform sdk operations.\n"
      requestBody:
        description: "Information about user and devices that he/she use to connect to. If displayName is provide, that user display is updated as well.\n\nIf userId doesn't exists, new user will be created.\n\nauthToken need to pass when network option is set to secure\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  minLength: 1
                  maxLength: 50
                deviceId:
                  type: 'string'
                  minLength: 1
                  maxLength: 150
                deviceInfo:
                  type: 'object'
                  properties:
                    kind:
                      type: 'string'
                      enum:
                        - 'ios'
                        - 'android'
                        - 'web'
                        - 'node'
                    model:
                      type: 'string'
                      maxLength: 100
                    sdkVersion:
                      type: 'string'
                      maxLength: 30
                displayName:
                  type: 'string'
                  maxLength: 50
                authToken:
                  type: 'string'
                  description: 'Authentication token from /api/v3/authentication/token'
                  minLength: 1
                  maxLength: 100
              required:
                - 'userId'
                - 'deviceId'
      responses:
        '200':
          $ref: './v3/session/response.yaml#/SessionResponse'
        '401':
          $ref: './global/error.yaml#/UserIsSystemBanned'
        '400312':
          $ref: './global/error.yaml#/UserIsGlobalBanned'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    get:
      summary: 'Verify access token'
      tags:
        - 'Session'
      description: 'Verify access token. The caller must add accessToken in header.'
      responses:
        '200':
          description: 'Access token is valid'
        '401':
          description: 'Access token is invalid or expired'
        '403':
          description: 'User is global banned'
        '404':
          description: 'Not found'
        '422':
          description: 'Parameters validation error'
      security:
        - bearerAuth: []
  /api/v4/sessions:
    post:
      summary: 'Register a session'
      tags:
        - 'Session'
      parameters:
        - name: 'x-api-key'
          in: 'header'
          required: true
          schema:
            type: 'string'
      description: "Register a session in order to connect to socket endpoint to perform sdk operations.\n"
      requestBody:
        description: "Information about user and devices that he/she use to connect to. If displayName is provide, that user display is updated as well.\n\nIf userId doesn't exists, new user will be created.\n\nauthToken need to pass when network option is set to secure\n\naccessToken expiry 30 days\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  minLength: 1
                  maxLength: 50
                deviceId:
                  type: 'string'
                  minLength: 1
                  maxLength: 150
                deviceInfo:
                  type: 'object'
                  properties:
                    kind:
                      type: 'string'
                      enum:
                        - 'ios'
                        - 'android'
                        - 'web'
                        - 'node'
                    model:
                      type: 'string'
                      maxLength: 100
                    sdkVersion:
                      type: 'string'
                      maxLength: 30
                displayName:
                  type: 'string'
                  maxLength: 50
                authToken:
                  type: 'string'
                  description: 'Authentication token from /api/v3/authentication/token'
                  minLength: 1
                  maxLength: 100
              required:
                - 'userId'
                - 'deviceId'
      responses:
        '200':
          $ref: './v4/session/response.yaml#/SessionResponse'
        '401':
          $ref: './global/error.yaml#/UserIsSystemBanned'
        '400312':
          $ref: './global/error.yaml#/UserIsGlobalBanned'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'Revoke access token'
      tags:
        - 'Session'
      security:
        - BearerAuth: []
      description: 'Revoke all userId''s access token by admin'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  minLength: 1
                  maxLength: 50
      responses:
        '200':
          description: 'Revoke access token success'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    default: true
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
        'UserIdNotFound: 404':
          $ref: './global/error.yaml#/UserIdNotFoundError'
        'SessionNotFound: 404':
          description: 'User is global banned'
  /v1/device:
    post:
      summary: 'Register a device.'
      tags:
        - 'Device'
      parameters:
        - name: 'x-api-key'
          in: 'header'
          required: true
          schema:
            type: 'string'
      description: "Register a session in order to connect to socket endpoint to perform sdk operations.\n"
      requestBody:
        description: "Information about user and devices that he/she use to connect to. If displayName is provide, that user display is updated as well.\n\nIf userId doesn't exists, new user will be created.\n\nauthToken need to pass when network option is set to secure\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  minLength: 1
                  maxLength: 50
                deviceId:
                  type: 'string'
                  minLength: 1
                  maxLength: 150
                deviceInfo:
                  type: 'object'
                  properties:
                    kind:
                      type: 'string'
                      enum:
                        - 'ios'
                        - 'android'
                        - 'web'
                        - 'node'
                    model:
                      type: 'string'
                      maxLength: 100
                    sdkVersion:
                      type: 'string'
                      maxLength: 30
                displayName:
                  type: 'string'
                  maxLength: 50
                authToken:
                  type: 'string'
                  description: 'Authentication token from /api/v3/authentication/token'
                  minLength: 1
                  maxLength: 100
              required:
                - 'userId'
                - 'deviceId'
      responses:
        '200':
          $ref: './v1/device/response.yaml#/DeviceResponse'
        '401':
          $ref: './global/error.yaml#/UserIsSystemBanned'
        '400312':
          $ref: './global/error.yaml#/UserIsGlobalBanned'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /v1/accessToken:
    get:
      summary: 'Generate AccessToken.'
      tags:
        - 'Device'
      security:
        - ApiKeyAuth: []
      description: "Generate new Access Token.\n"
      parameters:
        - in: 'query'
          name: 'userId'
          schema:
            type: 'string'
          required: true
        - in: 'query'
          name: 'refreshToken'
          schema:
            type: 'string'
          required: true
      responses:
        '200':
          description: 'Return new accessToken'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  accessToken:
                    type: 'string'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /v1/blacklist/records:
    put:
      summary: 'Refresh black list'
      tags:
        - 'Moderation'
      security:
        - ApiKeyAuth: []
      description: "Refresh the black list\n"
      requestBody:
        description: "Regular expression to refresh.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
    post:
      summary: 'Add rules to black list'
      tags:
        - 'Moderation'
      security:
        - ApiKeyAuth: []
      description: "Add rules to the black list\n"
      requestBody:
        description: "Regular expression to add.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
    delete:
      summary: 'Delete rules from black list'
      tags:
        - 'Moderation'
      security:
        - ApiKeyAuth: []
      description: "Delete rules from the black list\n"
      requestBody:
        description: "Regular expression to delete.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                ruleIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
  /admin/v1/token:
    post:
      summary: 'Generate admin token.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Generate admin token\n"
      responses:
        '200':
          $ref: './v1/admin/response.yaml#/AdminTokenResponse'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    get:
      summary: 'Get admin token.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Get admin token\n"
      responses:
        '200':
          $ref: './v1/admin/response.yaml#/AdminTokenResponse'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'Revoke admin token.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Revoke admin token:\n  * super-admin can revoke any admin token\n  * admin can revoke own token only\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                username:
                  type: 'string'
                  minLength: 1
                  maxLength: 50
      responses:
        '200':
          $ref: './v1/admin/response.yaml#/RevokeAdminTokenResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/UsernameNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /admin/v1/blacklist/records:
    get:
      summary: 'get rules of blacklist.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Get rules of blacklist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'regexs'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            items:
              type: 'string'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'lastCreated'
              - 'firstCreated'
            default: 'firstCreated'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
      responses:
        '200':
          $ref: './v1/moderation/response.yaml#/BlacklistRulesResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/blacklist/records:
    get:
      summary: 'get rules of blacklist.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Get rules of blacklist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'regexs'
          in: 'query'
          schema:
            type: 'array'
            items:
              type: 'string'
      responses:
        '200':
          $ref: '#/components/responses/BlacklistRulesResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: 'refresh rules of blacklist.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Refresh rules of blacklist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be refreshed.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: 'add rules to blacklist.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Add rules to blacklist\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be added.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
                isMatchExactWord:
                  type: 'boolean'
              required:
                - 'regexs'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: 'delete rules from blacklist'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Delete rule from blacklist\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be deleted.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                ruleIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'ruleIds'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v2/blacklist/records/:ruleId:
    put:
      summary: 'update rule of blacklist.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Update rule of blacklist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be updated.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                ruleId:
                  type: 'string'
                isEnabled:
                  type: 'boolean'
              required:
                - 'ruleId'
                - 'isEnabled'
      responses:
        '200':
          $ref: '#/components/responses/BlacklistRuleResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v2/messages:
    post:
      summary: 'Query messages.'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                parentId:
                  type: 'string'
                filterByParentId:
                  type: 'boolean'
                tags:
                  type: 'array'
                  description: 'List of including tags. They will be used for searching.'
                  items:
                    type: 'string'
                excludeTags:
                  type: 'array'
                  description: 'List of excluding tags. They will be used for searching.'
                  items:
                    type: 'string'
                options:
                  type: 'object'
                  properties:
                    after:
                      type: 'number'
                    first:
                      type: 'number'
                    before:
                      type: 'number'
                    last:
                      type: 'number'
                    token:
                      type: 'string'
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
  /api/v2/message:
    post:
      summary: 'create a text message.'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      description: "Create a text message in a given channel.\n"
      requestBody:
        description: "Information of message to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                type:
                  type: 'string'
                data:
                  type: 'object'
                  properties:
                    caption:
                      type: 'string'
                      maxLength: 1000
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                parentId:
                  type: 'string'
              required:
                - 'channelId'
                - 'type'
                - 'data'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/ChannelNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/message/{messageId}:
    $ref: './v2/message/api.yaml#/Message'
  /api/v2/messages/images:
    post:
      summary: 'create an image message.'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      consumes:
        - 'multipart/form-data'
      description: "Create a image message in a given channel.\n"
      requestBody:
        description: "Information of message to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                caption:
                  type: 'string'
                file:
                  type: 'object'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                parentId:
                  type: 'string'
                fullImage:
                  type: 'string'
              required:
                - 'channelId'
                - 'file'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/ChannelNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/messages/{messageId}/images:
    get:
      summary: 'get an image message'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      parameters:
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'size'
          in: 'query'
          required: true
          schema:
            type: 'string'
            enum:
              - 'small'
              - 'medium'
              - 'large'
              - 'full (if fullImage)'
      description: "Get a message with image in a given channel.\n"
      responses:
        '200':
          description: 'An image file'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/ChannelNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/messages/files:
    post:
      summary: 'create a message with file in a given channel'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      consumes:
        - 'multipart/form-data'
      description: "Create a message with file in a given channel.\n"
      requestBody:
        description: "information of a message to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                caption:
                  type: 'string'
                file:
                  type: 'object'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                parentId:
                  type: 'string'
              required:
                - 'channelId'
                - 'file'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/ChannelNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/messages/{messageId}/files:
    get:
      summary: 'get a file message'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      parameters:
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      description: "Get a message with file in a given channel.\n"
      responses:
        '200':
          description: 'A file'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/ChannelNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/moderation-settings:
    get:
      summary: 'get a moderation setting'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
      description: "Get a moderation setting.\n"
      responses:
        '200':
          $ref: '#/components/responses/ModerationSettingResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: 'update a moderation setting'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Update a moderation setting\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "moderation setting information\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                maxRepetition:
                  type: 'integer'
                  minimum: 0
                maxRepetitionTimeout:
                  type: 'integer'
                  minimum: 0
                blacklistMuteTimeout:
                  type: 'integer'
                  minimum: 0
                whitelistMuteTimeout:
                  type: 'integer'
                  minimum: 0
                maxRepetitionMuteTimeout:
                  type: 'integer'
                  minimum: 0
                enableImageModeration:
                  type: 'boolean'
                imageModeration:
                  type: 'object'
                  properties:
                    nudity:
                      type: 'number'
                      minimum: 0
                    suggestive:
                      type: 'number'
                      minimum: 0
                    violence:
                      type: 'number'
                      minimum: 0
                    disturbing:
                      type: 'number'
                      minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  code:
                    type: 'string'
                example:
                  status: 'success'
                  code: 200
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v2/reactions/messages/most:
    get:
      summary: 'Get message ids by the most of reactions.'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      description: "Get message ids by the most of reactions.\n"
      parameters:
        - name: 'limit'
          in: 'query'
          schema:
            type: 'integer'
            minimum: 1
        - name: 'reactionName'
          in: 'query'
          schema:
            type: 'string'
      responses:
        '200':
          description: 'Message information.'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  type: 'object'
                  properties:
                    messageId:
                      type: 'string'
                    reactionsCount:
                      type: 'integer'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/roles:
    get:
      summary: 'get all roles'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Get all roles\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'filter'
          in: 'query'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: '#/components/responses/RolesResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: 'add permissions.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Add permissions\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Permission information to be added\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                publicIds:
                  type: 'array'
                  items:
                    type: 'string'
                permissions:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'publicIds'
                - 'permissions'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v2/whitelist/records:
    get:
      summary: 'get rules of whitelist.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Get rules of whitelist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'regexs'
          in: 'query'
          required: true
          schema:
            type: 'array'
            items:
              type: 'string'
      responses:
        '200':
          $ref: '#/components/responses/WhitelistRulesResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'refresh rules of whitelist.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Refresh rules of whitelist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be refreshed.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: 'add rules to whitelist.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Add rules to whitelist\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be added.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: 'delete rules from whitelist'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Delete rule from whitelist\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be deleted.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                ruleIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'ruleIds'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v2/whitelist/records/:ruleId:
    put:
      summary: 'update rule of whitelist.'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Update rule of whitelist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be updated.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                ruleId:
                  type: 'string'
                isEnabled:
                  type: 'boolean'
              required:
                - 'ruleId'
                - 'isEnabled'
      responses:
        '200':
          $ref: '#/components/responses/WhitelistRuleResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v3/roles:
    get:
      summary: 'Get roles (pagination support)'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      description: "Get roles (pagination support)\n"
      parameters:
        - name: 'keyword'
          in: 'query'
          required: true
          schema:
            type: 'string'
            minLength: 0
            maxLength: 100
          description: 'search keyword'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'lastCreated'
              - 'firstCreated'
              - 'displayName'
            default: 'lastCreated'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
      responses:
        '200':
          $ref: './v3/role/response.yaml#/RoleResponse'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'Create role'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      description: "Create a role\n"
      requestBody:
        description: "information of a role to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                roleId:
                  type: 'string'
                  description: 'role id'
                  minLength: 1
                  maxLength: 100
                displayName:
                  type: 'string'
                  description: 'display name of role'
                  minLength: 0
                  maxLength: 100
                permissions:
                  type: 'array'
                  items:
                    type: 'string'
                  description: 'The list of permission for this role. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions'
              required:
                - 'roleId'
                - 'permissions'
      responses:
        '200':
          $ref: './v3/role/response.yaml#/RoleResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/roles/{roleId}:
    get:
      summary: 'Get role'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      description: "Get a role\n"
      parameters:
        - name: 'roleId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v3/role/response.yaml#/RoleResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'Update role'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      description: "Update a role\n"
      requestBody:
        description: "information of a role to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                roleId:
                  type: 'string'
                  description: 'role id to update'
                  minLength: 1
                  maxLength: 100
                displayName:
                  type: 'string'
                  description: 'display name of role to update'
                  minLength: 0
                  maxLength: 100
                permissions:
                  type: 'array'
                  items:
                    type: 'string'
                  description: 'The list of permission to update. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions'
              required:
                - 'roleId'
                - 'permissions'
      responses:
        '200':
          $ref: './v3/role/response.yaml#/RoleResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'Delete role'
      tags:
        - 'Admin'
      security:
        - BearerAuth: []
      description: "Delete a role\n"
      requestBody:
        description: "information of a role to be delete.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                roleId:
                  type: 'string'
                  description: 'role id to delete'
                  minLength: 1
                  maxLength: 100
              required:
                - 'roleId'
      responses:
        '200':
          $ref: './v3/role/response.yaml#/RoleResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /admin/v1/reports/user-last-activity:
    get:
      summary: 'Download last activity user report.'
      tags:
        - 'Admin'
      parameters:
        - name: 'Cookie'
          in: 'cookie'
          schema:
            type: 'string'
          description: 'Alternative way to pass authorization token'
      description: "Download last activity user report.\n"
      responses:
        '200':
          $ref: './v1/admin/response.yaml#/LastActivityReportResponse'
  /api/v2/users:
    get:
      summary: 'query users'
      tags:
        - 'User'
      security:
        - BearerAuth: []
      description: "Query users\n"
      parameters:
        - name: 'search'
          in: 'query'
          schema:
            type: 'string'
        - name: 'filter'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'all'
              - 'flagged'
            default: 'all'
        - name: 'pageToken'
          in: 'query'
          schema:
            type: 'string'
        - name: 'limit'
          in: 'query'
          schema:
            type: 'integer'
      responses:
        '200':
          $ref: './v2/user/response.yaml#/UsersPaginationApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'Update user information.'
      tags:
        - 'User'
      security:
        - BearerAuth: []
      description: "Update user information such as displayName, roles and metadata\n"
      requestBody:
        description: "User information to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 50
                displayName:
                  type: 'string'
                  maxLength: 100
                roles:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                metadata:
                  type: 'object'
                  maxLength: 500
      responses:
        '200':
          $ref: './v2/user/response.yaml#/UserApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/users/ban:
    post:
      summary: 'ban a user.'
      tags:
        - 'User'
      security:
        - ApiKeyAuth: []
      description: "Ban a user\n"
      consumes:
        - 'applicationjson'
      requestBody:
        description: "User information to be baned\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
              required:
                - 'userId'
      responses:
        '200':
          description: 'OK'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/users/unban:
    post:
      summary: 'unban a user.'
      tags:
        - 'User'
      security:
        - BearerAuth: []
      description: "Unban a user\n"
      requestBody:
        description: "User information to be unbaned\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
              required:
                - 'userId'
      responses:
        '200':
          description: 'OK'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/users/{userId}/flags:
    delete:
      summary: 'clear flag a user.'
      tags:
        - 'User'
      security:
        - BearerAuth: []
      description: "Clear flag a user\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v2/user/response.yaml#/UserApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/user.query:
    post:
      summary: 'query users'
      tags:
        - 'User'
      security:
        - SocketAuth: []
      description: "Query users\n"
      requestBody:
        description: "Query parameters\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                search:
                  type: 'string'
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'displayName'
                  default: 'displayName'
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
      responses:
        '200':
          $ref: './v1/user/response.yaml#/UsersPaginationSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/user.get:
    post:
      summary: 'get users informations base on given userIds'
      tags:
        - 'User'
      security:
        - SocketAuth: []
      description: "Get users informations\n"
      requestBody:
        description: 'request userIds'
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v1/user/response.yaml#/UsersSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/user.flag:
    post:
      summary: 'Flag a user.'
      tags:
        - 'User'
      security:
        - SocketAuth: []
      description: "Flag a user. If a user who flag already flagged target user, flag count will not increase\n"
      requestBody:
        description: "userId to be flagged\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
              required:
                - 'userId'
      responses:
        '200':
          $ref: './v1/user/response.yaml#/UserSocketResponse'
        '403':
          $ref: './global/error.yaml#/NumberOfFlagExceedError'
        '404':
          $ref: './global/error.yaml#/UserNotFoundError'
  /sockets/user.unflag:
    post:
      summary: 'Unflag a user.'
      tags:
        - 'User'
      security:
        - SocketAuth: []
      description: "unFlag a user.\n"
      requestBody:
        description: "userId to be flagged\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
              required:
                - 'userId'
      responses:
        '200':
          $ref: './v1/user/response.yaml#/UserSocketResponse'
        '404':
          $ref: './global/error.yaml#/UserNotFoundError'
  /sockets/user.isFlagByMe:
    post:
      summary: 'Check whether user flag a given user.'
      tags:
        - 'User'
      security:
        - SocketAuth: []
      description: "Check whether a user flag a given user.\n"
      requestBody:
        description: "userId to be flagged\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
              required:
                - 'userId'
      responses:
        '200':
          $ref: './global/response.yaml#/IsFlagByMeResponse'
        '404':
          $ref: './global/error.yaml#/UserNotFoundError'
  /sockets/user.update:
    post:
      summary: 'Update user information.'
      tags:
        - 'User'
      security:
        - SocketAuth: []
      description: "Update user information such as displayName, roles and metadata\n"
      requestBody:
        description: "User information to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 50
                displayName:
                  type: 'string'
                  maxLength: 100
                roles:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                metadata:
                  type: 'object'
                  maxLength: 500
      responses:
        '200':
          $ref: './v1/user/response.yaml#/UserSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /callbacks/user.didUpdate:
    get:
      tags:
        - 'User'
      security:
        - SocketAuth: []
      description: "Publish this event following endpoint below:\n  * `update user`\n  * `update user(v3)`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  userId:
                    type: 'string'
                    description: 'ID of a user.'
  /callbacks/v3.user.didUpdate:
    get:
      tags:
        - 'User'
      security:
        - SocketAuth: []
      description: "Publish this event following endpoint below:\n  * `update user`\n  * `update user(v3)`\n"
      responses:
        '200':
          $ref: './v3/user/response.yaml#/UserSocketResponse'
  /api/v3/users:
    get:
      summary: 'Get users information.'
      tags:
        - 'UserV3'
      security:
        - BearerAuth: []
      description: "Get users information (pagination supported)\n"
      parameters:
        - name: 'keyword'
          in: 'query'
          schema:
            type: 'string'
            maxLength: 100
        - name: 'filter'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'all'
              - 'flagged'
            default: 'all'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
              - 'displayName'
            default: 'displayName'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
      responses:
        '200':
          $ref: './v3/user/response.yaml#/UserPaginationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'Update user information.'
      tags:
        - 'UserV3'
      security:
        - BearerAuth: []
      description: "Update user information such as displayName, roles, avatar and metadata\n"
      requestBody:
        description: "User information to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 50
                displayName:
                  type: 'string'
                  maxLength: 100
                roles:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                metadata:
                  type: 'object'
                  maxLength: 500
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                avatarCustomUrl:
                  type: 'string'
                  maxLength: 1000
                description:
                  type: 'string'
                  maxLength: 500
      responses:
        '200':
          $ref: './v3/user/response.yaml#/UserResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/users/list:
    get:
      summary: 'Get users information by public id.'
      tags:
        - 'UserV3'
      security:
        - BearerAuth: []
      description: "Get users information by public id.\n"
      parameters:
        - name: 'userIds'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 100
            items:
              type: 'string'
              maxLength: 900
      responses:
        '200':
          $ref: './v3/user/response.yaml#/UserResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/users/{userId}:
    get:
      summary: 'Get one user information.'
      tags:
        - 'UserV3'
      security:
        - BearerAuth: []
      description: "Get one user information.\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
        - name: 'type'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'public'
              - 'internal'
            default: 'public'
      responses:
        '200':
          $ref: './v3/user/response.yaml#/UserResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/users/{userId}/isFlagByMe:
    get:
      summary: 'Check whether user flag a given user.'
      description: "Check whether user flag a given user.\n"
      tags:
        - 'UserV3'
      security:
        - BearerAuth: []
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      responses:
        '200':
          description: 'Is flag by me response.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  isFlagByMe:
                    type: 'boolean'
        '404':
          $ref: './global/error.yaml#/UserNotFoundError'
  /sockets/v3/user.query:
    post:
      summary: 'Get users information.'
      tags:
        - 'UserV3'
      security:
        - SocketAuth: []
      description: "Get users information (pagination supported)\n"
      requestBody:
        description: "Request body\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                keyword:
                  type: 'string'
                  maxLength: 100
                filter:
                  type: 'string'
                  enum:
                    - 'all'
                    - 'flagged'
                  default: 'all'
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'displayName'
                  default: 'displayName'
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      minLength: 1
                      maxLength: 100
      responses:
        '200':
          $ref: './v3/user/response.yaml#/UserSocketPaginationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '401':
          $ref: './global/error.yaml#/UserNotAllowedToUpdateError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/user.getList:
    post:
      summary: 'Get users information by public id.'
      tags:
        - 'UserV3'
      security:
        - SocketAuth: []
      description: "Get users information by public id.\n"
      requestBody:
        description: "Request body\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  require: true
                  type: 'array'
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 900
      responses:
        '200':
          $ref: './v3/user/response.yaml#/UserSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '401':
          $ref: './global/error.yaml#/UserNotAllowedToUpdateError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/user.get:
    post:
      summary: 'Get one user information.'
      tags:
        - 'UserV3'
      security:
        - SocketAuth: []
      description: "Get one user information.\n"
      requestBody:
        description: "Request body\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  require: true
                  minLength: 1
                  maxLength: 900
      responses:
        '200':
          $ref: './v3/user/response.yaml#/UserSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '401':
          $ref: './global/error.yaml#/UserNotAllowedToUpdateError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/user.update:
    post:
      summary: 'Update user information.'
      tags:
        - 'UserV3'
      security:
        - SocketAuth: []
      description: "Update user information such as displayName, roles, avatar and metadata\n"
      requestBody:
        description: "User information to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 50
                displayName:
                  type: 'string'
                  maxLength: 100
                roles:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                metadata:
                  type: 'object'
                  maxLength: 500
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                avatarCustomUrl:
                  type: 'string'
                  maxLength: 1000
                description:
                  type: 'string'
                  maxLength: 500
      responses:
        '200':
          $ref: './v3/user/response.yaml#/UserSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '401':
          $ref: './global/error.yaml#/UserNotAllowedToUpdateError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/channels:
    post:
      summary: 'query channels'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Query channels\n"
      requestBody:
        description: "Query parameters\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                filter:
                  type: 'string'
                  enum:
                    - 'all'
                    - 'member'
                    - 'notMember'
                types:
                  type: 'array'
                  items:
                    type: 'string'
                    enum:
                      - 'standard'
                      - 'private'
                      - 'conversation'
                      - 'broadcast'
                      - 'live'
                      - 'community'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                excludeTags:
                  type: 'array'
                  items:
                    type: 'string'
                userId:
                  type: 'string'
                options:
                  type: 'object'
                  properties:
                    skip:
                      type: 'integer'
                    limit:
                      type: 'integer'
                    token:
                      type: 'string'
      responses:
        '200':
          $ref: './v2/channel/response.yaml#/ChannelPaginationApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/channel:
    post:
      summary: 'create a channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Create a channel\n"
      requestBody:
        description: "Information of channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                displayName:
                  type: 'string'
                type:
                  type: 'string'
                  enum:
                    - 'standard'
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                userIds:
                  type: 'array'
                  items:
                    type: 'string'
                avatarFileId:
                  type: 'string'
              required:
                - 'channelId'
                - 'type'
      responses:
        '200':
          $ref: './v2/channel/response.yaml#/ChannelAndUserApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/channel/{channelId}/displayName:
    post:
      summary: 'change channel displayName'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Change a channel's displayName\n"
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be changed\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                displayName:
                  type: 'string'
              required:
                - 'displayName'
      responses:
        '200':
          $ref: './v2/channel/response.yaml#/ChannelApiResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/channel/{channelId}/users/ban:
    post:
      summary: 'ban users in channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Ban users in channel\n"
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "channelId and userIds\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
      responses:
        '200':
          description: 'OK'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/channel/{channelId}/users/unban:
    post:
      summary: 'unban users in channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Unban users in channel\n"
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "channelId and userIds\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
      responses:
        '200':
          description: 'OK'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '400316':
          $ref: './global/error.yaml#/UserIsUnbannedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/channels/{channelId}/close:
    post:
      summary: 'close channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Close channel\n"
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/channel/{channelId}/avatar:
    put:
      summary: 'Set or Remove avatar from channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Set or Remove avatar from channel. Put null inside avatarFileId to remove avatar.\n"
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                avatarFileId:
                  type: 'string'
              required:
                - 'avatarFileId'
      responses:
        '200':
          $ref: './v2/channel/response.yaml#/ChannelApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/FileNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/channel/{channelId}/mute:
    put:
      summary: 'Mute channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Mute all users in channel for a specific period of time.\n"
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be muted and period\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                mutePeriod:
                  type: 'number'
                  description: 'mute period (milliseconds)'
              required:
                - 'mutePeriod'
      responses:
        '200':
          $ref: './v2/channel/response.yaml#/MuteApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/channel/{channelId}/users/mute:
    put:
      summary: 'Mute user in channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Mute a user in channel for a specific period of time.\n"
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be muted and period\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  items:
                    type: 'string'
                    maxLength: 50
                  maxItems: 100
                mutePeriod:
                  type: 'number'
                  description: 'mute period (milliseconds)'
              required:
                - 'userIds'
                - 'mutePeriod'
      responses:
        '200':
          $ref: './v2/channel/response.yaml#/MuteApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels:
    get:
      summary: 'query channels.'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'keyword'
          in: 'query'
          schema:
            type: 'string'
            maxLength: 100
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
          description: "isDeleted:\n  * `null(default)` - Show both channel is actived and channel is inactived.\n  * `true` - Show channel is inactived only.\n  * `false` - Show channel is actived only.\n"
        - name: 'tags'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 10
            items:
              type: 'string'
              maxLength: 100
        - name: 'excludeTags'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 10
            items:
              type: 'string'
              maxLength: 100
        - name: 'filter'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'all'
              - 'member'
              - 'notMember'
              - 'flagged'
            default: 'all'
        - name: 'types'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 10
            items:
              type: 'string'
              enum:
                - 'standard'
                - 'private'
                - 'conversation'
                - 'broadcast'
                - 'live'
                - 'community'
        - name: 'userId'
          in: 'query'
          schema:
            type: 'string'
            maxLength: 100
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'lastActivity'
              - 'lastCreated'
              - 'firstCreated'
              - 'displayName'
            default: 'lastActivity'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 100
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelPaginationApiResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'create a channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      requestBody:
        description: "Information of channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  maxLength: 100
                type:
                  type: 'string'
                  enum:
                    - 'community'
                    - 'live'
                    - 'broadcast'
                  default: 'community'
                displayName:
                  type: 'string'
                  maxLength: 100
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                userIds:
                  type: 'array'
                  maxItems: 1000
                  items:
                    type: 'string'
                    maxLength: 50
                isMuted:
                  type: 'boolean'
                messageAutoDeleteEnabled:
                  type: 'boolean'
                autoDeleteMessageByFlagLimit:
                  type: 'number'
                  min: 1
                  max: 100
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels/{channelId}:
    get:
      summary: 'get a channel by ID.'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'update a channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                displayName:
                  type: 'string'
                  maxLength: 100
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                messageAutoDeleteEnabled:
                  type: 'boolean'
                autoDeleteMessageByFlagLimit:
                  type: 'number'
                  min: 1
                  max: 100
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'delete a channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels/{channelId}/join:
    post:
      summary: 'join a channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels/{channelId}/leave:
    delete:
      summary: 'leave a channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels/{channelId}/users:
    get:
      summary: 'query channel users'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'roles'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            minItems: 1
            maxItems: 20
            items:
              type: 'string'
              minLength: 1
              maxLength: 900
          description: 'Role to filter'
        - name: 'filter'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'all'
              - 'muted'
              - 'banned'
              - 'member&banned'
            default: 'all'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'lastCreated'
              - 'firstCreated'
            default: 'lastCreated'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 100
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelPaginationApiResponse'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'add channel users'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'remove channel users'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels/{channelId}/users/ban:
    put:
      summary: 'ban channel users'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels/{channelId}/users/unban:
    put:
      summary: 'unban channel users'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels/{channelId}/users/roles:
    post:
      summary: 'Add role to channel users'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                role:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
                - 'role'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'Remove role from channel users'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                role:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
                - 'role'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels/conversation:
    post:
      summary: 'create a conversation channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      requestBody:
        description: "Information of conversation channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 50
                isDistinct:
                  type: 'boolean'
                  default: true
                displayName:
                  type: 'string'
                  maxLength: 100
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels/list:
    get:
      summary: 'get list of channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Get list of channel\n"
      parameters:
        - name: 'channelIds'
          in: 'query'
          collectionFormat: 'multi'
          required: true
          schema:
            type: 'array'
            maxItems: 10
            items:
              type: 'string'
              maxLength: 50
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/channels/{channelId}/seen:
    post:
      summary: 'Mark user message read position inside channel'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      description: "Mark user message read position inside channel\n"
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Segment of the message\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                readToSegment:
                  type: 'number'
              required:
                - 'readToSegment'
      responses:
        '200':
          description: 'OK'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/channels/{channelId}/users:
    get:
      summary: 'query channel users'
      tags:
        - 'Channel'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          in: 'query'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
        - name: 'role'
          in: 'query'
          schema:
            type: 'array'
            description: 'Role to filter'
            minItems: 1
            maxItems: 20
            items:
              type: 'string'
              minLength: 1
              maxLength: 900
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'lastCreated'
              - 'firstCreated'
            default: 'lastCreated'
        - name: 'memberships'
          in: 'query'
          schema:
            type: 'array'
            description: "Member type to filter - member type: User is member of channel - banned type: User is banned member of channel - muted type: User is member of channel but isMuted is true\n"
            minItems: 1
            maxItems: 3
            items:
              type: 'string'
              enum:
                - 'muted'
                - 'banned'
                - 'member'
            default:
              - 'member'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
          description: 'use updatedAt when sort by first/lastUpdated'
        - name: 'search'
          in: 'query'
          schema:
            type: 'string'
            minLength: 0
            maxLength: 10000
      responses:
        '200':
          $ref: './v4/channel/response.yaml#/ChannelPaginationApiResponse'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.create:
    post:
      summary: 'create a channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Create a channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                displayName:
                  type: 'string'
                type:
                  type: 'string'
                  enum:
                    - 'standard'
                    - 'private'
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                userIds:
                  type: 'array'
                  items:
                    type: 'string'
                avatarFileId:
                  type: 'string'
              required:
                - 'channelId'
                - 'type'
      responses:
        '200':
          $ref: './v1/channel/response.yaml#/ChannelAndUserSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/FileNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.createConversation:
    post:
      summary: 'create a conversation channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Create a conversation channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                displayName:
                  type: 'string'
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                userId:
                  type: 'string'
              required:
                - 'userId'
      responses:
        '200':
          $ref: './v1/channel/response.yaml#/ChannelAndUserSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.query:
    post:
      summary: 'query channel'
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Query channels\n"
      requestBody:
        description: "Query parameters\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                filter:
                  type: 'string'
                  enum:
                    - 'all'
                    - 'member'
                    - 'notMember'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                excludeTags:
                  type: 'array'
                  items:
                    type: 'string'
                types:
                  type: 'array'
                  items:
                    type: 'string'
                    enum:
                      - 'standard'
                      - 'private'
                      - 'conversation'
                      - 'broadcast'
                options:
                  type: 'object'
                  properties:
                    skip:
                      type: 'integer'
                    limit:
                      type: 'integer'
                    token:
                      type: 'string'
      responses:
        '200':
          $ref: './v1/channel/response.yaml#/ChannelPaginationSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.queryUsers:
    post:
      summary: 'query channel users'
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Query channel users\n"
      requestBody:
        description: "Query parameters\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                role:
                  type: 'string'
                filter:
                  type: 'string'
                  enum:
                    - 'all'
                    - 'muted'
                    - 'banned'
                  default: 'all'
                options:
                  type: 'object'
                  properties:
                    skip:
                      type: 'integer'
                    limit:
                      type: 'integer'
                    token:
                      type: 'string'
      responses:
        '200':
          $ref: './v1/channel/response.yaml#/ChannelUserPaginationSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.setAvatar:
    post:
      summary: 'Set or Remove avatar from channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Set or Remove avatar from channel. Put null inside avatarFileId to remove avatar.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                avatarFileId:
                  type: 'string'
              required:
                - 'channelId'
                - 'avatarFileId'
      responses:
        '200':
          $ref: './v1/channel/response.yaml#/ChannelSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/FileNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.banUsers:
    post:
      summary: 'ban users in channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Ban users in channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "channelId and userIds\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                userIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'channelId'
                - 'userIds'
      responses:
        '200':
          description: 'OK'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.unbanUsers:
    post:
      summary: 'unban users in channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Unban users in channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "channelId and userIds\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                userIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'channelId'
                - 'userIds'
      responses:
        '200':
          description: 'OK'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '400316':
          $ref: './global/error.yaml#/UserIsUnbannedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.addRole:
    post:
      summary: 'add user role in channel'
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Add user role in channel\n"
      requestBody:
        description: "channelId, role and userIds\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                role:
                  type: 'string'
                userIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'channelId'
                - 'userIds'
                - 'role'
      responses:
        '200':
          description: 'OK'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.removeRole:
    post:
      summary: 'remove user role in channel'
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Remove user role in channel\n"
      requestBody:
        description: "channelId, role and userIds\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                role:
                  type: 'string'
                userIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'channelId'
                - 'userIds'
                - 'role'
      responses:
        '200':
          description: 'OK'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.markSeen:
    post:
      summary: 'mark user message read position inside channel'
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Mark user message read position inside channel\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                readToSegment:
                  type: 'number'
              required:
                - 'channelId'
                - 'readToSegment'
      responses:
        '200':
          description: 'OK'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.startReading:
    post:
      summary: 'User start reading message inside channel'
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "User start reading message inside channel\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
              required:
                - 'channelId'
      responses:
        '200':
          description: 'OK'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.stopReading:
    post:
      summary: 'User stop reading message inside channel'
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "User stop reading message inside channel\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
              required:
                - 'channelId'
      responses:
        '200':
          description: 'OK'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.startReadings:
    post:
      summary: 'User start reading message in multiple channel'
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Mark start reading in multiple channel ???\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'channelIds'
      responses:
        '200':
          $ref: './v1/channel/response.yaml#/CustomResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/channel.stopReadings:
    post:
      summary: 'User stop reading message in multiple channel'
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Mark stop reading in multiple channel ???\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'channelIds'
      responses:
        '200':
          $ref: './v1/channel/response.yaml#/CustomResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.create:
    post:
      summary: 'create a channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Create a channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  maxLength: 100
                type:
                  type: 'string'
                  enum:
                    - 'community'
                    - 'live'
                    - 'broadcast'
                  default: 'community'
                displayName:
                  type: 'string'
                  maxLength: 100
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                userIds:
                  type: 'array'
                  maxItems: 1000
                  items:
                    type: 'string'
                    maxLength: 50
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.createConversation:
    post:
      summary: 'create a conversation channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Create a conversation channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of conversation channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 50
                isDistinct:
                  type: 'boolean'
                  default: true
                displayName:
                  type: 'string'
                  maxLength: 100
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.delete:
    post:
      summary: 'delete a channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Delete a channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "channel information.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  maxLength: 100
              required:
                - 'channelId'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.get:
    post:
      summary: 'get a channel by ID.'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Get a channel by ID\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a channel.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  maxLength: 100
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.query:
    post:
      summary: 'query channels.'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "query channels.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                keyword:
                  type: 'string'
                  maxLength: 100
                isDeleted:
                  type: 'boolean'
                  default: null
                  description: "isDeleted:\n  * `null(default)` - Show both channel is actived and channel is inactived.\n  * `true` - Show channel is inactived only.\n  * `false` - Show channel is actived only.\n"
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                excludeTags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                filter:
                  type: 'string'
                  enum:
                    - 'all'
                    - 'member'
                    - 'notMember'
                  default: 'all'
                types:
                  type: 'array'
                  items:
                    type: 'string'
                    enum:
                      - 'standard'
                      - 'private'
                      - 'conversation'
                      - 'broadcast'
                      - 'live'
                      - 'community'
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastActivity'
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'displayName'
                  default: 'lastActivity'
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      maxLength: 100
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelPaginationSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.update:
    post:
      summary: 'update a channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Update a channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  maxLength: 100
                displayName:
                  type: 'string'
                  maxLength: 100
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.getList:
    post:
      summary: 'get list of channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Get list of channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a channel.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelIds:
                  type: 'array'
                  maxItems: 100
                  items:
                    type: 'string'
                    maxLength: 50
              required:
                - 'channelIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.join:
    post:
      summary: 'join a channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Join a channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be joined\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.leave:
    post:
      summary: 'leave a channel'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Leave a channel\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel to be left\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.addUsers:
    post:
      summary: 'add channel users'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Add channel users\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'channelId'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.removeUsers:
    post:
      summary: 'remove channel users'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Remove channel users\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'channelId'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.banUsers:
    post:
      summary: 'ban channel users'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Ban channel users\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'channelId'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.unbanUsers:
    post:
      summary: 'unban channel users'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Unban channel users\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'channelId'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.queryUsers:
    post:
      summary: 'query channel users'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Query channel users\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                roles:
                  type: 'array'
                  description: 'Role to filter'
                  minItems: 1
                  maxItems: 20
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 900
                filter:
                  type: 'string'
                  enum:
                    - 'all'
                    - 'muted'
                    - 'banned'
                  default: 'all'
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                  default: 'lastCreated'
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      maxLength: 1000
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelPaginationSocketResponse'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.assignRoleToUsers:
    post:
      summary: 'Add role to channel users'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Add role to channel users\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                role:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'channelId'
                - 'role'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/channel.removeRoleFromUsers:
    post:
      summary: 'Remove role from channel users'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Remove role from channel users\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                role:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'channelId'
                - 'role'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/channel.queryUsers:
    post:
      summary: 'query channel users'
      tags:
        - 'Channel'
      security:
        - ApiKeyAuth: []
      description: "Query channel users\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                roles:
                  type: 'array'
                  description: 'Role to filter'
                  minItems: 1
                  maxItems: 20
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 900
                memberships:
                  type: 'array'
                  description: "Member type to filter - member type: User is member of channel - banned type: User is banned member of channel - muted type: User is member of channel but isMuted is true\n"
                  minItems: 1
                  maxItems: 3
                  items:
                    type: 'string'
                    enum:
                      - 'muted'
                      - 'banned'
                      - 'member'
                  default:
                    - 'member'
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                  default: 'lastCreated'
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      maxLength: 1000
                search:
                  type: 'string'
                  maxLength: 10000
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v4/channel/response.yaml#/ChannelPaginationSocketResponse'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /callbacks/channel.didUpdate:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `update channel displayname`\n  * `update channel tags`\n  * `update channel metadata`\n  * `update channel avatar`\n  * `update channel(v3)`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  channelId:
                    type: 'string'
                    description: 'ID of a channel.'
                  channel:
                    $ref: './schema/channel.yaml#/ChannelV1'
  /callbacks/channel.didAddUsers:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `add channel users`\n  * `add channel users(v3)`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  channelId:
                    type: 'string'
                    description: 'ID of a channel.'
                  userIds:
                    ype: 'array'
                    description: 'List of user Id.'
                    items:
                      type: 'string'
                  memberCount:
                    type: 'integer'
                    description: 'Number of members in channel.'
                  userId:
                    type: 'string'
                    description: 'caller Id.'
  /callbacks/channel.didRemoveUsers:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `remove channel users`\n  * `remove channel users(v3)`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  channelId:
                    type: 'string'
                    description: 'ID of a channel.'
                  userIds:
                    ype: 'array'
                    description: 'List of user Id.'
                    items:
                      type: 'string'
                  memberCount:
                    type: 'integer'
                    description: 'Number of members in channel.'
                  userId:
                    type: 'string'
                    description: 'caller Id.'
  /callbacks/channel.didBan:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ and __target userIds__ after call the endpoint below:\n  * `ban channel users`\n  * `ban channel users(v3)`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  channelId:
                    type: 'string'
                    description: 'ID of a channel.'
                  userIds:
                    ype: 'array'
                    description: 'List of userId.'
                    items:
                      type: 'string'
  /callbacks/channel.didUnban:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ and __target users__ after call the endpoint below:\n  * `unban channel users`\n  * `unban channel users(v3)`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  channelId:
                    type: 'string'
                    description: 'ID of a channel.'
                  userIds:
                    ype: 'array'
                    description: 'List of userId.'
                    items:
                      type: 'string'
  /callbacks/channel.didCreate:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `create channel`\n  * `create conversation channel`\n  * `create channel(v3)`\n  * `create conversation channel(v3)`\n  * `add channel users`\n  * `add channel users(v3)`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  channelId:
                    type: 'string'
                    description: 'ID of a channel.'
                  userIds:
                    ype: 'array'
                    description: 'List of userId.'
                    items:
                      type: 'string'
                  memberCount:
                    type: 'integer'
                    description: 'Number of members in channel.'
                  channel:
                    $ref: './schema/channel.yaml#/ChannelV1'
  /callbacks/channel.didJoin:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __target users__ after call the endpoint below:\n  * `join channel`\n  * `join channel(v3)`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  channelId:
                    type: 'string'
                    description: 'ID of a channel.'
                  userIds:
                    ype: 'array'
                    description: 'List of userId.'
                    items:
                      type: 'string'
                  memberCount:
                    type: 'integer'
                    description: 'Number of members in channel.'
                  channel:
                    $ref: './schema/channel.yaml#/ChannelV1'
  /callbacks/channel.didLeave:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __target users__  after call the endpoint below:\n  * `leave channel`\n  * `leave channel(v3)`\n  * `remove channel users`\n  * `remove channel users(v3)`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  channelId:
                    type: 'string'
                    description: 'ID of a channel.'
                  userIds:
                    ype: 'array'
                    description: 'List of userId.'
                    items:
                      type: 'string'
                  memberCount:
                    type: 'integer'
                    description: 'Number of members in channel.'
  /callbacks/channel.didMarkSeen:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __caller__  after call the endpoint below:\n  * `startReading`\n  * `startReadings`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  channelId:
                    type: 'string'
                    description: 'ID of a channel.'
                  readToSegment:
                    type: 'integer'
  /callbacks/channelUser.didUpdate:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __target users__  after call the endpoint below:\n  * `add channelUser role`\n  * `remove channelUser role`\n  * `add channelUser role(v3)`\n  * `remove channelUser role(v3)`\n"
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  channelId:
                    type: 'string'
                    description: 'ID of a channel.'
                  userIds:
                    ype: 'array'
                    description: 'List of user Id.'
                    items:
                      type: 'string'
  /callbacks/v3.channel.didUpdate:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `update channel displayname`\n  * `update channel tags`\n  * `update channel metadata`\n  * `update channel avatar`\n  * `update channel(v3)`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /callbacks/v3.channel.didDelete:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `delete channel(v3)`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /callbacks/v3.channel.didAddUsers:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `add channel users`\n  * `add channel users(v3)`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /callbacks/v3.channel.didRemoveUsers:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `remove channel users`\n  * `remove channel users(v3)`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /callbacks/v3.channel.didBan:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ and __target userIds__ after call the endpoint below:\n  * `ban channel users`\n  * `ban channel users(v3)`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /callbacks/v3.channel.didUnban:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ and __target users__ after call the endpoint below:\n  * `unban channel users`\n  * `unban channel users(v3)`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /callbacks/v3.channel.didCreate:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `create channel`\n  * `create conversation channel`\n  * `create channel(v3)`\n  * `create conversation channel(v3)`\n  * `add channel users`\n  * `add channel users(v3)`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /callbacks/v3.channel.didJoin:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __target users__ after call the endpoint below:\n  * `join channel`\n  * `join channel(v3)`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /callbacks/v3.channel.didLeave:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __target users__  after call the endpoint below:\n  * `leave channel`\n  * `leave channel(v3)`\n  * `remove channel users`\n  * `remove channel users(v3)`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /callbacks/v3.channel.didMarkSeen:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __caller__  after call the endpoint below:\n  * `startReading`\n  * `startReadings`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /callbacks/v3.channelUser.didUpdate:
    get:
      tags:
        - 'Channel'
      security:
        - SocketAuth: []
      description: "Publish this event to __target users__  after call the endpoint below:\n  * `add channelUser role`\n  * `remove channelUser role`\n  * `add channelUser role(v3)`\n  * `remove channelUser role(v3)`\n"
      responses:
        '200':
          $ref: './v3/channel/response.yaml#/ChannelsSocketResponse'
  /api/v1/messages/images:
    post:
      summary: 'create a message with image in a given channel'
      tags:
        - 'Message'
      security:
        - ApiKeyAuth: []
      description: "Create a message with image in a given channel.\n"
      requestBody:
        description: "information of a message to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                channelId:
                  type: 'string'
                caption:
                  type: 'string'
                file:
                  type: 'object'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                parentId:
                  type: 'string'
                fullImage:
                  type: 'string'
              required:
                - 'channelId'
                - 'file'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400302':
          $ref: './global/error.yaml#/UserIsMutedError'
        '400303':
          $ref: './global/error.yaml#/ChannelIsMutedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '400307':
          $ref: './global/error.yaml#/MaxRepetitionExceed'
        '400308':
          $ref: './global/error.yaml#/BanWordFoundError'
        '400309':
          $ref: './global/error.yaml#/LinkNotAllowedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/ChannelNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v1/messages/{messageId}/images:
    get:
      summary: 'get an image message'
      tags:
        - 'Message'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - in: 'path'
          name: 'messageId'
          required: true
          schema:
            type: 'string'
        - name: 'size'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'small'
              - 'medium'
              - 'large'
              - 'full'
      description: "Get a message with image in a given channel.\n"
      responses:
        '200':
          description: 'An image file'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400302':
          $ref: './global/error.yaml#/UserIsMutedError'
        '400303':
          $ref: './global/error.yaml#/ChannelIsMutedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '400307':
          $ref: './global/error.yaml#/MaxRepetitionExceed'
        '400308':
          $ref: './global/error.yaml#/BanWordFoundError'
        '400309':
          $ref: './global/error.yaml#/LinkNotAllowedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/ChannelNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v1/messages/files:
    post:
      summary: 'create a message with file in a given channel'
      tags:
        - 'Message'
      security:
        - ApiKeyAuth: []
      description: "Create a message with file in a given channel.\n"
      requestBody:
        description: "information of a message to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                channelId:
                  type: 'string'
                caption:
                  type: 'string'
                file:
                  type: 'object'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                parentId:
                  type: 'string'
              required:
                - 'channelId'
                - 'file'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400302':
          $ref: './global/error.yaml#/UserIsMutedError'
        '400303':
          $ref: './global/error.yaml#/ChannelIsMutedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '400307':
          $ref: './global/error.yaml#/MaxRepetitionExceed'
        '400308':
          $ref: './global/error.yaml#/BanWordFoundError'
        '400309':
          $ref: './global/error.yaml#/LinkNotAllowedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/ChannelNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v1/messages/{messageId}/files:
    get:
      summary: 'get a file message'
      tags:
        - 'Message'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - in: 'path'
          name: 'messageId'
          required: true
          schema:
            type: 'string'
        - name: 'size'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'small'
              - 'medium'
              - 'large'
              - 'full'
      description: "Get a message with image in a given channel.\n"
      responses:
        '200':
          description: 'An image file'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400302':
          $ref: './global/error.yaml#/UserIsMutedError'
        '400303':
          $ref: './global/error.yaml#/ChannelIsMutedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '400307':
          $ref: './global/error.yaml#/MaxRepetitionExceed'
        '400308':
          $ref: './global/error.yaml#/BanWordFoundError'
        '400309':
          $ref: './global/error.yaml#/LinkNotAllowedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/ChannelNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/messages:
    get:
      summary: 'query messages'
      tags:
        - 'Message'
      security:
        - BearerAuth: []
      parameters:
        - name: 'channelId'
          required: true
          in: 'query'
          schema:
            type: 'string'
            maxLength: 100
        - name: 'type'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'text'
              - 'image'
              - 'file'
              - 'custom'
              - 'video'
              - 'audio'
              - 'imagemap'
        - name: 'parentId'
          in: 'query'
          schema:
            type: 'string'
            maxLength: 150
        - name: 'filterByParentId'
          in: 'query'
          schema:
            type: 'boolean'
            default: false
        - name: 'hasFlag'
          in: 'query'
          schema:
            type: 'boolean'
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
          description: "isDeleted:\n  * `null(default)` - Show both message is actived and message is inactived.\n  * `true` - Show message is inactived only.\n  * `false` - Show message is actived only.\n"
        - name: 'tags'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 10
            items:
              type: 'string'
              maxLength: 100
        - name: 'excludeTags'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 10
            items:
              type: 'string'
              maxLength: 100
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              after:
                type: 'integer'
                minimum: 1
              first:
                type: 'integer'
                minimum: 1
                maximum: 100
              before:
                type: 'integer'
                minimum: 1
              last:
                type: 'integer'
                minimum: 1
                maximum: 100
              token:
                type: 'string'
                maxLength: 1000
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagePaginationApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'create a message'
      tags:
        - 'Message'
      security:
        - BearerAuth: []
      requestBody:
        description: "Information of message to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  maxLength: 150
                messageId:
                  type: 'string'
                  maxLength: 150
                type:
                  type: 'string'
                  enum:
                    - 'text'
                    - 'image'
                    - 'file'
                    - 'custom'
                    - 'video'
                    - 'audio'
                    - 'imagemap'
                  default: 'text'
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      maxLength: 20000
                fileId:
                  type: 'string'
                  maxLength: 50
                parentId:
                  type: 'string'
                  maxLength: 150
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification for the message.'
                  maxItems: 2
                  items:
                    $ref: './schema/message.yaml#/MentioneesRequest'
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400302':
          $ref: './global/error.yaml#/UserIsMutedError'
        '400303':
          $ref: './global/error.yaml#/ChannelIsMutedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '400307':
          $ref: './global/error.yaml#/MaxRepetitionExceed'
        '400308':
          $ref: './global/error.yaml#/BanWordFoundError'
        '400309':
          $ref: './global/error.yaml#/LinkNotAllowedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/ValidationError'
  /api/v3/messages/list:
    get:
      summary: 'get list of messages'
      tags:
        - 'Message'
      security:
        - BearerAuth: []
      parameters:
        - name: 'messageIds'
          in: 'query'
          required: true
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 10
            items:
              type: 'string'
              maxLength: 150
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/messages/{messageId}:
    get:
      summary: 'get a message'
      tags:
        - 'Message'
      security:
        - BearerAuth: []
      parameters:
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 150
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'update a message'
      tags:
        - 'Message'
      security:
        - BearerAuth: []
      parameters:
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 150
      requestBody:
        description: "Information of message to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      maxLength: 20000
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification for the message.'
                  maxItems: 2
                  items:
                    $ref: './schema/message.yaml#/MentioneesRequest'
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400307':
          $ref: './global/error.yaml#/MaxRepetitionExceed'
        '400308':
          $ref: './global/error.yaml#/BanWordFoundError'
        '400309':
          $ref: './global/error.yaml#/LinkNotAllowedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/ValidationError'
    delete:
      summary: 'delete a message'
      tags:
        - 'Message'
      security:
        - BearerAuth: []
      parameters:
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 150
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/messages/:messageId/flag:
    post:
      summary: 'flag a message'
      tags:
        - 'Message'
      security:
        - BearerAuth: []
      parameters:
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 150
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesApiResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/messages/:messageId/unflag:
    delete:
      summary: 'unflag a message'
      tags:
        - 'Message'
      security:
        - BearerAuth: []
      parameters:
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 150
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/messages/:messageId/clearFlags:
    delete:
      summary: 'clear flags'
      tags:
        - 'Message'
      security:
        - BearerAuth: []
      parameters:
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 150
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/messages/{messageId}/isFlaggedByMe:
    get:
      summary: 'is message flag by me'
      tags:
        - 'Message'
      security:
        - BearerAuth: []
      parameters:
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 150
      responses:
        '200':
          $ref: './global/response.yaml#/IsSocialFlagByMeResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/message.create:
    post:
      summary: 'create a message in a given channel'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Create a message in a given channel.\n"
      requestBody:
        description: "information of a message to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                channelId:
                  type: 'string'
                type:
                  type: 'string'
                data:
                  type: 'object'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
                parentId:
                  type: 'string'
              required:
                - 'channelId'
                - 'type'
                - 'data'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400302':
          $ref: './global/error.yaml#/UserIsMutedError'
        '400303':
          $ref: './global/error.yaml#/ChannelIsMutedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '400307':
          $ref: './global/error.yaml#/MaxRepetitionExceed'
        '400308':
          $ref: './global/error.yaml#/BanWordFoundError'
        '400309':
          $ref: './global/error.yaml#/LinkNotAllowedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/ChannelNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/message.update:
    post:
      summary: 'update a message information (only creator)'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Update a message. Now we support updating tags & content by creator only.\n"
      requestBody:
        description: "information of a message to be updated.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                data:
                  type: 'object'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/message.updateData:
    post:
      summary: 'update a message data (only creator)'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Update a message data (only creator).\n"
      requestBody:
        description: "information of a message data.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                data:
                  type: 'object'
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/message.updateTag:
    post:
      summary: 'update a message tag by anyone'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Update a message tag by anyone.\n"
      requestBody:
        description: "information of a message tags.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                tags:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/message.flag:
    post:
      summary: 'Flag a message.'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Flag a message. If a user already flagged the message, flag count will not increase\n"
      requestBody:
        description: "messageId to be flagged\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '403':
          $ref: './global/error.yaml#/NumberOfFlagExceedError'
        '404':
          $ref: './global/error.yaml#/MessageNotFoundError'
  /sockets/message.get:
    get:
      summary: 'Get messages.'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Get messages by ids.\n"
      requestBody:
        description: "condition for get\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageIds:
                  type: 'array'
                  description: 'List of message ids.'
                  items:
                    type: 'string'
              required:
                - 'messageIds'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
  /sockets/message.unflag:
    post:
      summary: 'Unflag a message'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "unflag a message.\n"
      requestBody:
        description: "messageId to be flagged\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
        '404':
          $ref: './global/error.yaml#/MessageNotFoundError'
  /sockets/message.query:
    post:
      summary: 'Query messages.'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Query messages by a given condition.\n"
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                parentId:
                  type: 'string'
                filterByParentId:
                  type: 'boolean'
                tags:
                  type: 'array'
                  description: 'List of including tags. They will be used for searching.'
                  items:
                    type: 'string'
                excludeTags:
                  type: 'array'
                  description: 'List of excluding tags. They will be used for searching.'
                  items:
                    type: 'string'
                options:
                  type: 'object'
                  properties:
                    after:
                      type: 'number'
                    first:
                      type: 'number'
                    before:
                      type: 'number'
                    last:
                      type: 'number'
                    token:
                      type: 'string'
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageResponse'
  /sockets/message.isFlagByMe:
    post:
      summary: 'Check whether user flag a given message.'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Check whether user flag a given message.\n"
      requestBody:
        description: "messageId to be flagged\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './global/response.yaml#/IsFlagByMeResponse'
        '404':
          $ref: './global/error.yaml#/MessageNotFoundError'
  /sockets/v3/message.query:
    post:
      summary: 'query messages'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Query messages\n"
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  maxLength: 150
                type:
                  type: 'string'
                  enum:
                    - 'text'
                    - 'image'
                    - 'file'
                    - 'custom'
                    - 'video'
                    - 'audio'
                    - 'imagemap'
                parentId:
                  type: 'string'
                  maxLength: 150
                filterByParentId:
                  type: 'boolean'
                  default: false
                isDeleted:
                  type: 'boolean'
                  default: null
                  description: "isDeleted:\n  * `null(default)` - Show both message is actived and message is inactived.\n  * `true` - Show message is inactived only.\n  * `false` - Show message is actived only.\n"
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                excludeTags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                options:
                  type: 'object'
                  properties:
                    after:
                      type: 'integer'
                      minimum: 1
                    first:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                    before:
                      type: 'integer'
                      minimum: 1
                    last:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                    token:
                      type: 'string'
                      maxLength: 1000
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagePaginationSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/message.create:
    post:
      summary: 'create a message'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Create a message\n"
      requestBody:
        description: "Information of message to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                channelId:
                  type: 'string'
                  maxLength: 150
                messageId:
                  type: 'string'
                  maxLength: 150
                type:
                  type: 'string'
                  enum:
                    - 'text'
                    - 'image'
                    - 'file'
                    - 'custom'
                    - 'video'
                    - 'audio'
                    - 'imagemap'
                  default: 'text'
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      maxLength: 20000
                fileId:
                  type: 'string'
                  maxLength: 50
                parentId:
                  type: 'string'
                  maxLength: 150
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification for the message.'
                  maxItems: 2
                  items:
                    $ref: './schema/message.yaml#/MentioneesRequest'
              required:
                - 'channelId'
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400302':
          $ref: './global/error.yaml#/UserIsMutedError'
        '400303':
          $ref: './global/error.yaml#/ChannelIsMutedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '400307':
          $ref: './global/error.yaml#/MaxRepetitionExceed'
        '400308':
          $ref: './global/error.yaml#/BanWordFoundError'
        '400309':
          $ref: './global/error.yaml#/LinkNotAllowedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/ValidationError'
  /sockets/v3/message.getList:
    post:
      summary: 'get list of messages'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Get list of messages\n"
      requestBody:
        description: "Information of message\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageIds:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 150
              required:
                - 'messageIds'
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/message.get:
    post:
      summary: 'get a message'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Get a message\n"
      requestBody:
        description: "Information of message\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                  maxLength: 150
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/message.update:
    post:
      summary: 'update a message'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Update a message\n"
      requestBody:
        description: "Information of message to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                  maxLength: 150
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      maxLength: 20000
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  maxItems: 10
                  items:
                    type: 'string'
                    maxLength: 100
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification for the message.'
                  maxItems: 2
                  items:
                    $ref: './schema/message.yaml#/MentioneesRequest'
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenAvatarError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400307':
          $ref: './global/error.yaml#/MaxRepetitionExceed'
        '400308':
          $ref: './global/error.yaml#/BanWordFoundError'
        '400309':
          $ref: './global/error.yaml#/LinkNotAllowedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/ValidationError'
  /sockets/v3/message.delete:
    post:
      summary: 'delete a message'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Delete a message\n"
      requestBody:
        description: "Information of message\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                  maxLength: 150
              required:
                - 'messageId'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/message.flag:
    post:
      summary: 'flag a message'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Flag a message\n"
      requestBody:
        description: "Information of message\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                  maxLength: 150
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesSocketResponse'
        '403':
          allOf:
            - $ref: './global/error.yaml#/ForbiddenError'
            - $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/message.unflag:
    post:
      summary: 'unflag a message'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Unflag a message\n"
      requestBody:
        description: "Information of message\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                  maxLength: 150
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/message.clearFlags:
    post:
      summary: 'clear flags'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Clear flags\n"
      requestBody:
        description: "Information of message\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                  maxLength: 150
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/message.isFlaggedByMe:
    post:
      summary: 'is message flag by me'
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Is message flag by me\n"
      requestBody:
        description: "Information of message\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                messageId:
                  type: 'string'
                  maxLength: 150
              required:
                - 'messageId'
      responses:
        '200':
          $ref: './global/response.yaml#/IsSocialFlagByMeResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /callbacks/message.didCreate:
    get:
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `create message`\n  * `create message(v3)`\n"
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageCallbackResponse'
  /callbacks/message.didUpdate:
    get:
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `update message`\n  * `update data of message`\n  * `update tags of message`\n  * `update message(v3)`\n  * `flag message`\n  * `flag message(v3)`\n  * `unflag message`\n  * `unflag message(v3)`\n  * `clear flags(v3)`\n  * `add reaction`\n  * `remove reaction`\n"
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageCallbackResponse'
  /callbacks/message.didDelete:
    get:
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ and __target users__ after call the endpoint below:\n  * `delete message`\n  * `delete message(v3)`\n"
      responses:
        '200':
          $ref: './v2/message/response.yaml#/MessageCallbackResponse'
  /callbacks/v3.message.didCreate:
    get:
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `create message`\n  * `create message(v3)`\n"
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesSocketResponse'
  /callbacks/v3.message.didUpdate:
    get:
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `update message`\n  * `update data of message`\n  * `update tags of message`\n  * `update message(v3)`\n  * `flag message`\n  * `flag message(v3)`\n  * `unflag message`\n  * `unflag message(v3)`\n  * `clear flags(v3)`\n  * `add reaction`\n  * `remove reaction`\n"
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesSocketResponse'
  /callbacks/v3.message.didDelete:
    get:
      tags:
        - 'Message'
      security:
        - SocketAuth: []
      description: "Publish this event to __every member of channel__ and __target users__ after call the endpoint below:\n  * `delete message`\n  * `delete message(v3)`\n"
      responses:
        '200':
          $ref: './v3/message/response.yaml#/MessagesSocketResponse'
  /v1/notification:
    post:
      summary: 'register a device to get push notification'
      tags:
        - 'Notification'
      security:
        - ApiKeyAuth: []
      description: "Register a device to a notification service provider.\n"
      requestBody:
        description: "information of a device to be registered.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                deviceId:
                  type: 'string'
                  maxLength: 150
                platform:
                  type: 'string'
                  enum:
                    - 'android'
                    - 'ios'
                token:
                  type: 'string'
                  maxLength: 1000
                userId:
                  type: 'string'
                provider:
                  type: 'string'
              required:
                - 'deviceId'
                - 'platform'
                - 'token'
                - 'userId'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: 'unregister a device from a notification service provider'
      tags:
        - 'Notification'
      security:
        - ApiKeyAuth: []
      description: "Unregister a device from a notification service provider.\n"
      requestBody:
        description: "information of a device to be registered.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                deviceId:
                  type: 'string'
                userId:
                  type: 'string'
              required:
                - 'deviceId'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /admin/v1/notification/setting:
    post:
      summary: 'Save push notification setting.'
      tags:
        - 'Notification'
      security:
        - ApiKeyAuth: []
      description: "Save push notification setting.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Notification setting information to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                level:
                  type: 'string'
                  enum:
                    - 'network'
                    - 'user'
                    - 'channel'
                    - 'community'
                  description: "level:\n  * `network` - need to specific network events via notifiableEvents(this level need to have permission).\n  * `user` - need to specific modules via notifiableEvents.\n  * `channel` - need to specific channelId.\n  * `community` - need to specific communityId and community event via notifiableEvents.\n"
                isPushNotifiable:
                  type: 'boolean'
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                notifiableEvents:
                  type: 'array'
                  minItems: 1
                  maxItems: 24
                  items:
                    type: 'object'
                    properties:
                      name:
                        type: 'string'
                        enum:
                          - 'channel.created'
                          - 'channel.joined'
                          - 'conversation-channel.joined'
                          - 'message.created'
                          - 'text-mention-message.created'
                          - 'conversation-message.created'
                          - 'post.created'
                          - 'post.reacted'
                          - 'post.approved'
                          - 'post.need-reviewing'
                          - 'comment.created'
                          - 'comment.replied'
                          - 'comment.reacted'
                          - 'follow.created'
                          - 'follow.requested'
                          - 'follow.accepted'
                          - 'text-mention-post.created'
                          - 'text-mention-user-feed-post.created'
                          - 'text-mention-comment.created'
                          - 'text-mention-user-feed-comment.created'
                          - 'text-mention-comment.replied'
                          - 'text-mention-user-feed-comment.replied'
                          - 'community.roleAdded'
                          - 'community.updated'
                      moduleName:
                        type: 'string'
                        enum:
                          - 'chat'
                          - 'video-streaming'
                          - 'social'
                      isPushNotifiable:
                        type: 'boolean'
                      titleTemplate:
                        type: 'string'
                        maxLength: 1000
                      bodyTemplate:
                        type: 'string'
                        maxLength: 5000
                      listenFromRoleIds:
                        type: 'array'
                        maxItems: 10
                        items:
                          type: 'string'
                          minLength: 1
                          maxLength: 900
                        description: 'specific roles for get notify by event creator who has roles only'
                      ignoreFromRoleIds:
                        type: 'array'
                        maxItems: 10
                        items:
                          type: 'string'
                          minLength: 1
                          maxLength: 900
                        description: 'specific roles for ignore notify by event creator who has roles only'
              required:
                - 'level'
      responses:
        '200':
          $ref: './global/response.yaml#/SaveApiResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    get:
      summary: 'Get push notification setting.'
      tags:
        - 'Notification'
      security:
        - ApiKeyAuth: []
      description: "Get push notification setting.\n"
      parameters:
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'level'
          required: true
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'network'
              - 'user'
              - 'channel'
              - 'community'
        - name: 'channelId'
          in: 'query'
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
        - name: 'communityId'
          in: 'query'
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      responses:
        '200':
          $ref: './v1/notification/response.yaml#/NotificationSettingApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/notification/setting:
    get:
      summary: 'Get push notification setting.'
      tags:
        - 'Notification'
      security:
        - BearerAuth: []
      description: "Get push notification setting.\n"
      parameters:
        - name: 'level'
          required: true
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'user'
              - 'channel'
              - 'community'
        - name: 'channelId'
          in: 'query'
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
        - name: 'communityId'
          in: 'query'
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      responses:
        '200':
          $ref: './v3/notification/response.yaml#/NotificationSettingApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'Save push notification setting.'
      tags:
        - 'Notification'
      security:
        - BearerAuth: []
      description: "Save push notification setting.\n"
      requestBody:
        description: "Notification setting information to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                level:
                  type: 'string'
                  enum:
                    - 'user'
                    - 'channel'
                    - 'community'
                  description: "level:\n  * `user` - need to specific modules via notifiableEvents.\n  * `channel` - need to specific channelId.\n  * `community` - need to specific communityId and community event via notifiableEvents.\n"
                isPushNotifiable:
                  type: 'boolean'
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                notifiableEvents:
                  type: 'array'
                  minItems: 1
                  maxItems: 7
                  items:
                    type: 'object'
                    properties:
                      name:
                        type: 'string'
                        enum:
                          - 'post.created'
                          - 'post.reacted'
                          - 'post.approved'
                          - 'post.need-reviewing'
                          - 'comment.created'
                          - 'comment.replied'
                          - 'comment.reacted'
                      moduleName:
                        type: 'string'
                        enum:
                          - 'chat'
                          - 'video-streaming'
                          - 'social'
                      isPushNotifiable:
                        type: 'boolean'
                      titleTemplate:
                        type: 'string'
                        maxLength: 1000
                      bodyTemplate:
                        type: 'string'
                        maxLength: 5000
                      listenFromRoleIds:
                        type: 'array'
                        maxItems: 10
                        items:
                          type: 'string'
                          minLength: 1
                          maxLength: 900
                        description: 'specific roles for get notify by event creator who has roles only'
                      ignoreFromRoleIds:
                        type: 'array'
                        maxItems: 10
                        items:
                          type: 'string'
                          minLength: 1
                          maxLength: 900
                        description: 'specific roles for ignore notify by event creator who has roles only'
              required:
                - 'level'
      responses:
        '200':
          $ref: './global/response.yaml#/SaveApiResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/notification.getSetting:
    post:
      summary: 'Get push notification setting.'
      tags:
        - 'Notification'
      security:
        - SocketAuth: []
      description: "Get push notification setting.\n"
      requestBody:
        description: "information of a notification setting.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                level:
                  type: 'string'
                  enum:
                    - 'network'
                    - 'user'
                    - 'channel'
                    - 'community'
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
              required:
                - 'level'
      responses:
        '200':
          $ref: './v1/notification/response.yaml#/NotificationSettingSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/notification.saveSetting:
    post:
      summary: 'Save push notification setting.'
      tags:
        - 'Notification'
      security:
        - SocketAuth: []
      description: "Save push notification setting.\n"
      requestBody:
        description: "Notification setting information to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                level:
                  type: 'string'
                  enum:
                    - 'network'
                    - 'user'
                    - 'channel'
                    - 'community'
                  description: "level:\n  * `network` - need to specific network events via notifiableEvents(this level need to have permission).\n  * `user` - need to specific modules via notifiableEvents.\n  * `channel` - need to specific channelId.\n  * `community` - need to specific communityId and community event via notifiableEvents.\n"
                isPushNotifiable:
                  type: 'boolean'
                channelId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                notifiableEvents:
                  type: 'array'
                  minItems: 1
                  maxItems: 14
                  items:
                    type: 'object'
                    properties:
                      name:
                        type: 'string'
                        enum:
                          - 'channel.created'
                          - 'channel.joined'
                          - 'conversation-channel.joined'
                          - 'message.created'
                          - 'conversation-message.created'
                          - 'post.created'
                          - 'post.reacted'
                          - 'comment.created'
                          - 'comment.replied'
                          - 'comment.reacted'
                          - 'follow.created'
                          - 'follow.requested'
                          - 'follow.accepted'
                      moduleName:
                        type: 'string'
                        enum:
                          - 'chat'
                          - 'video-streaming'
                          - 'social'
                      isPushNotifiable:
                        type: 'boolean'
                      titleTemplate:
                        type: 'string'
                        maxLength: 1000
                      bodyTemplate:
                        type: 'string'
                        maxLength: 5000
                      listenFromRoleIds:
                        type: 'array'
                        maxItems: 10
                        items:
                          type: 'string'
                          minLength: 1
                          maxLength: 900
                        description: 'specific roles for get notify by event creator who has roles only'
                      ignoreFromRoleIds:
                        type: 'array'
                        maxItems: 10
                        items:
                          type: 'string'
                          minLength: 1
                          maxLength: 900
                        description: 'specific roles for ignore notify by event creator who has roles only'
              required:
                - 'level'
      responses:
        '200':
          $ref: './global/response.yaml#/SaveSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v2/reactions:
    get:
      summary: 'get list of reactions.'
      tags:
        - 'Reaction'
      security:
        - BearerAuth: []
      description: "Get paginable list of reactions.\n"
      parameters:
        - name: 'referenceId'
          in: 'query'
          require: true
          schema:
            type: 'string'
            maxLength: 900
        - name: 'referenceType'
          in: 'query'
          require: true
          schema:
            type: 'string'
            enum:
              - 'message'
              - 'post'
              - 'comment'
        - name: 'reactionName'
          in: 'query'
          schema:
            type: 'string'
            maxLength: 100
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 0
              token:
                type: 'string'
                maxLength: 1000
              skip:
                type: 'integer'
                minimum: 0
      responses:
        '200':
          $ref: './v2/reaction/response.yaml#/ReactionResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'add reaction to any document.'
      tags:
        - 'Reaction'
      security:
        - BearerAuth: []
      description: "Add reaction to a document referenced by ID and type.\n"
      requestBody:
        description: "reference ID and type with reaction name\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                referenceId:
                  type: 'string'
                  maxLength: 900
                referenceType:
                  type: 'string'
                  enum:
                    - 'message'
                    - 'post'
                    - 'comment'
                reactionName:
                  type: 'string'
                  maxLength: 100
                referenceVersion:
                  description: 'The API version of the document (Ex. If using with message v5, the referenceVersion will be 5)'
                  type: 'integer'
              required:
                - 'referenceId'
                - 'referenceType'
                - 'reactionName'
      responses:
        '200':
          description: 'Returns a reaction id is added'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  addedId:
                    type: 'string'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'remove reaction from any document.'
      tags:
        - 'Reaction'
      security:
        - BearerAuth: []
      description: "Remove reaction from a document referenced by ID and type.\n"
      requestBody:
        description: "reference ID and type with reaction name\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                referenceId:
                  type: 'string'
                  maxLength: 900
                referenceType:
                  type: 'string'
                  enum:
                    - 'message'
                    - 'post'
                    - 'comment'
                reactionName:
                  type: 'string'
                  maxLength: 100
                referenceVersion:
                  description: 'The API version of the document (Ex. If using with message v5, the referenceVersion will be 5)'
                  type: 'integer'
              required:
                - 'referenceId'
                - 'referenceType'
                - 'reactionName'
      responses:
        '200':
          description: 'Returns a reaction id is removed'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  removedId:
                    type: 'string'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/reactions:
    get:
      summary: 'get list of reactions.'
      tags:
        - 'Reaction'
      security:
        - BearerAuth: []
      description: "Get paginable list of reactions.\n"
      parameters:
        - name: 'referenceId'
          in: 'query'
          require: true
          schema:
            type: 'string'
            maxLength: 900
        - name: 'referenceType'
          in: 'query'
          require: true
          schema:
            type: 'string'
            enum:
              - 'message'
              - 'post'
              - 'comment'
        - name: 'referenceVersion'
          in: 'query'
          schema:
            type: 'integer'
        - name: 'reactionName'
          in: 'query'
          schema:
            type: 'string'
            maxLength: 100
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 0
              token:
                type: 'string'
                maxLength: 200
      responses:
        '200':
          $ref: './v3/reaction/response.yaml#/ReactionResponse'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/reaction.query:
    post:
      summary: 'get list of reactions.'
      tags:
        - 'Reaction'
      security:
        - ApiKeyAuth: []
      description: "Get paginable list of reactions.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                referenceId:
                  type: 'string'
                  maxLength: 900
                referenceType:
                  type: 'string'
                  enum:
                    - 'message'
                    - 'post'
                    - 'comment'
                reactionName:
                  type: 'string'
                  maxLength: 100
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      default: 20
                    token:
                      type: 'string'
                      maxLength: 200
              required:
                - 'referenceType'
                - 'referenceId'
      responses:
        '200':
          $ref: './v3/reaction/response.yaml#/ReactionResponse'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/reaction.add:
    post:
      summary: 'Add reaction to any document.'
      tags:
        - 'Reaction'
      security:
        - SocketAuth: []
      description: "Add reaction to a document referenced by ID and type.\n"
      requestBody:
        description: "reference ID and type with reaction name\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                referenceId:
                  type: 'string'
                  maxLength: 900
                referenceType:
                  type: 'string'
                  enum:
                    - 'message'
                    - 'post'
                    - 'comment'
                reactionName:
                  type: 'string'
                  maxLength: 100
              required:
                - 'referenceId'
                - 'referenceType'
                - 'reactionName'
      responses:
        '200':
          description: 'Returns a bool that indicates if the reaction is added'
          schema:
            type: 'boolean'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
  /sockets/reaction.query:
    post:
      summary: 'Get list of reactions.'
      tags:
        - 'Reaction'
      security:
        - SocketAuth: []
      description: "Get paginable list of reactions.\n"
      requestBody:
        description: "Condition of querying including specified reaction and pagination.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                referenceId:
                  type: 'string'
                  maxLength: 900
                referenceType:
                  type: 'string'
                  enum:
                    - 'message'
                    - 'post'
                    - 'comment'
                reactionName:
                  type: 'string'
                  maxLength: 100
                options:
                  type: 'object'
                  properties:
                    skip:
                      type: 'integer'
                      minimum: 0
                    limit:
                      type: 'integer'
                      minimum: 0
                    token:
                      type: 'string'
                      maxLength: 1000
              required:
                - 'referenceId'
                - 'referenceType'
      responses:
        '200':
          $ref: './v2/reaction/response.yaml#/ReactionResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
  /sockets/reaction.remove:
    post:
      summary: 'Remove reaction from any document.'
      tags:
        - 'Reaction'
      security:
        - SocketAuth: []
      description: "Remove reaction from a document referenced by ID and type.\n"
      requestBody:
        description: "reference ID and type with reaction name\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                referenceId:
                  type: 'string'
                  maxLength: 900
                referenceType:
                  type: 'string'
                  enum:
                    - 'message'
                    - 'post'
                    - 'comment'
                reactionName:
                  type: 'string'
                  maxLength: 100
              required:
                - 'referenceId'
                - 'referenceType'
                - 'reactionName'
      responses:
        '200':
          description: 'Returns a bool that indicates if the reaction is removed'
          schema:
            type: 'boolean'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
  /admin/v1/network/{networkId}:
    get:
      summary: 'Get a network'
      tags:
        - 'Network'
      security:
        - ApiKeyAuth: []
      description: "Get a network.\n"
      parameters:
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'networkId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: '#/components/responses/NetworkResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: 'Save network'
      tags:
        - 'Network'
      security:
        - ApiKeyAuth: []
      description: "save network information\n"
      parameters:
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'networkId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "data for save network\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                defaultMessageAutoDeleteEnabled:
                  type: 'boolean'
                  description: 'Is message in this channel will be deleted when the user flagged until flag limit?'
                defaultAutoDeleteMessageByFlagLimit:
                  type: 'number'
                  minimum: 1
                  example: 1
                  description: 'Number of flags that will force a message to be deleted automatically.'
                useSecureAuthentication:
                  type: 'boolean'
                  description: 'Is this network require secure authentication implementation.'
              required:
                - 'networkId'
                - 'defaultMessageAutoDeleteEnabled'
                - 'defaultAutoDeleteMessageByFlagLimit'
      responses:
        '200':
          $ref: '#/components/responses/NetworkResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v3/networks/server-key:
    get:
      summary: 'Get server key last issued data'
      tags:
        - 'Network'
      security:
        - BearerAuth: []
      description: "Get server key last issued data\n"
      responses:
        '200':
          $ref: './v3/network/response.yaml#/KeyLastUpdateResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'Issue new server key'
      tags:
        - 'Network'
      security:
        - BearerAuth: []
      description: "Issue new server key (old key will be invoked)  \nAllow only admin to call.\n"
      responses:
        '200':
          description: 'Server key'
          content:
            application/json:
              schema:
                type: 'string'
                example: '7d47e0acf1a33cebef81ba9c2051698f14c1e8c64ec12270af21abb213bc01f101deff4a726254d6426734df02a89b99c59d3ed5cf2d1bb7249c940aec'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/networks:
    post:
      summary: 'Create network with tier'
      tags:
        - 'Network'
      security:
        - BearerAuth: []
      description: "Create network (with feature toggle)\n"
      requestBody:
        description: "information for a network creation    \n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                name:
                  type: 'string'
                  description: 'network name'
                  example: 'asgfssssfaufiasgf'
                tierHandler:
                  type: 'string'
                  description: 'tier handler (in case of we have to do bulk update in the future)'
                  example: 'asc-free'
      responses:
        '200':
          $ref: './v3/network/response.yaml#/NetworkCreationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/networks/me:
    get:
      summary: 'Get self network info'
      tags:
        - 'Network'
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: './v3/network/response.yaml#/NetworkResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'Update self network info'
      tags:
        - 'Network'
      security:
        - BearerAuth: []
      description: "Update self network info. Only admin can update.\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                defaultMessageAutoDeleteEnabled:
                  type: 'boolean'
                  description: 'Is message in this channel will be deleted when the user flagged until flag limit?'
                defaultAutoDeleteMessageByFlagLimit:
                  type: 'number'
                  min: 1
                  example: 1
                  description: 'Number of flags that will force a message to be deleted automatically.'
                useSecureAuthentication:
                  type: 'boolean'
                  description: 'Is this network require secure authentication implementation.'
      responses:
        '200':
          $ref: './v3/network/response.yaml#/NetworkResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/posts:
    get:
      summary: 'query posts'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      description: "Query posts\n"
      parameters:
        - name: 'targetId'
          in: 'query'
          schema:
            type: 'string'
            maxLength: 900
        - name: 'targetType'
          required: true
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'community'
              - 'user'
              - 'content'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
              - 'lastUpdated'
              - 'firstUpdated'
            default: 'lastCreated'
        - name: 'dataType'
          in: 'query'
          schema:
            type: 'string'
            maxLength: 900
          example: 'upstra.customtype'
          description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
          deprecated: true
        - name: 'hasFlag'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
          description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.  \n"
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'published'
              - 'reviewing'
            default: 'published'
        - name: 'dataTypes'
          in: 'query'
          collectionFormat: 'multi'
          description: "oneOf:\n  * video\n  * image\n  * file\n  * liveStream\n  * string\nexample: upstra.customtype - custom post type - must be in namespace like format (ex. \"upstra.customtype\", \"com.eko.birthday\")\n"
          schema:
            type: 'array'
            maxItems: 10
            items:
              oneOf:
                - type: 'string'
                  enum:
                    - 'video'
                    - 'image'
                    - 'file'
                    - 'liveStream'
                  description: 'post data type to filter'
                - type: 'string'
                  example: 'upstra.customtype'
                  description: 'custom post type - must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
        - name: 'tags'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            minItems: 0
            maxItems: 5
            items:
              type: 'string'
              maxLength: 24
        - name: 'matchingOnlyParentPost'
          in: 'query'
          schema:
            type: 'boolean'
            default: true
          description: 'When `true` will filter only parent post'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostPaginationApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'create a post'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      description: "Create a post\n"
      requestBody:
        description: "information of a post to be created.\n\nWhen `dataType` is set `data` payload can be anything but it will not support normal data capability (ex. images and files) and `data` payload size will be limit to `100kb`\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                text:
                  type: 'string'
                  deprecated: true
                data:
                  type: 'object'
                  description: 'require text or images or files (can''t add images with files)'
                  properties:
                    text:
                      type: 'string'
                    images:
                      type: 'array'
                      items:
                        type: 'string'
                    files:
                      type: 'array'
                      items:
                        type: 'string'
                  required:
                    - 'text'
                dataType:
                  type: 'string'
                  example: 'upstra.customtype'
                  description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
                targetType:
                  type: 'string'
                  enum:
                    - 'user'
                    - 'community'
                    - 'content'
                  default: 'user'
                targetId:
                  type: 'string'
                  example: '<userId>'
                metadata:
                  type: 'object'
                postId:
                  type: 'string'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    max: 24
                    description: 'tags'
                createdAt:
                  type: 'string'
                  description: 'The date/time when a post is created.'
                  format: 'date-time'
                  example: '2022-07-07T04:24:20.444Z'
              required:
                - 'data'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/posts/{postId}:
    get:
      summary: 'get a post by ID'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      description: "Get a post by ID\n"
      parameters:
        - name: 'postId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'update a post'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      description: "Update a post\n"
      parameters:
        - name: 'postId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
      requestBody:
        description: "information of a post to be updated.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                text:
                  type: 'string'
                  deprecated: true
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      max: 50000
                      description: 'For updating text in the post'
                    fileId:
                      type: 'string'
                      max: 100
                      description: 'Put file id to update file,image inside file, image post (video is not supported yet)'
                    streamId:
                      type: 'string'
                      max: 100
                      description: 'Put stream id to update live streaming post with new streaming'
                    thumbnailFileId:
                      type: 'string'
                      max: 100
                      description: 'Put image file id to update video file thumbnail in video post'
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    max: 24
                    description: 'tags'
              required:
                - 'postId'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'delete a post'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      description: "Delete a post\n"
      parameters:
        - name: 'postId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
      responses:
        '200':
          description: 'post information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/posts/{postId}/approve:
    post:
      summary: 'Approve reviewing post'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      description: "Get a post by ID\n"
      parameters:
        - in: 'path'
          name: 'postId'
          required: true
          schema:
            type: 'string'
            minimum: 1
          description: 'Post public id'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/posts/{postId}/decline:
    post:
      summary: 'Decline reviewing post'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      description: "Get a post by ID\n"
      parameters:
        - in: 'path'
          name: 'postId'
          required: true
          schema:
            type: 'string'
            minimum: 1
          description: 'Post public id'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/posts/{postId}/flag:
    post:
      summary: 'flag a post.'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      parameters:
        - name: 'postId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostResponse'
        '403':
          $ref: './global/error.yaml#/NumberOfFlagExceedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/posts/{postId}/isflagbyme:
    get:
      summary: 'Check whether user flag a given post.'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      description: "Check whether user flag a given post.\n"
      parameters:
        - name: 'postId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
      responses:
        '200':
          $ref: './global/response.yaml#/IsSocialFlagByMeResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
  /api/v3/posts/:postId/unflag:
    delete:
      summary: 'unflag a post.'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      parameters:
        - name: 'postId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/posts/list:
    get:
      summary: 'get list of post'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      description: "Get list of post\n"
      parameters:
        - name: 'postIds'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 100
            items:
              type: 'string'
              maxLength: 50
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/posts/:postId/flags:
    delete:
      summary: 'clear flags'
      tags:
        - 'Post'
      security:
        - BearerAuth: []
      parameters:
        - name: 'postId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.create:
    post:
      summary: 'create a post'
      tags:
        - 'Post'
      security:
        - SocketAuth: []
      description: "Create a post\n"
      requestBody:
        description: "information of a post to be created.\n\n\nWhen `dataType` is set `data` payload can be anything but it will not support normal data capability (ex. images and files)\nand `data` payload size will be limit to 100kb\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                text:
                  type: 'string'
                  deprecated: true
                data:
                  type: 'object'
                  description: 'require text or images or files (can''t add images with files)'
                  properties:
                    text:
                      type: 'string'
                    images:
                      type: 'array'
                      items:
                        type: 'string'
                    files:
                      type: 'array'
                      items:
                        type: 'string'
                  required:
                    - 'text'
                dataType:
                  type: 'string'
                  example: 'upstra.customtype'
                  description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
                targetType:
                  type: 'string'
                  enum:
                    - 'user'
                    - 'community'
                    - 'content'
                  default: 'user'
                targetId:
                  type: 'string'
                  example: '<userId>'
                metadata:
                  type: 'object'
                postId:
                  type: 'string'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    max: 24
                    description: 'tags'
              required:
                - 'data'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.update:
    post:
      summary: 'update a post'
      tags:
        - 'Post'
      security:
        - SocketAuth: []
      description: "Update a post (can't update images and files yet)\n"
      requestBody:
        description: "information of a post to be updated.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postId:
                  type: 'string'
                text:
                  type: 'string'
                  deprecated: true
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      max: 50000
                      description: 'For updating text in the post'
                    fileId:
                      type: 'string'
                      max: 100
                      description: 'Put file id to update file,image inside file, image post (video is not supported yet)'
                    streamId:
                      type: 'string'
                      max: 100
                      description: 'Put stream id to update live streaming post with new streaming'
                    thumbnailFileId:
                      type: 'string'
                      max: 100
                      description: 'Put image file id to update video file thumbnail in video post'
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    max: 24
                    description: 'tags'
              required:
                - 'postId'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.delete:
    post:
      summary: 'delete a post'
      tags:
        - 'Post'
      security:
        - SocketAuth: []
      description: "Delete a post\n"
      requestBody:
        description: "information of a post to be deleted.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postId:
                  type: 'string'
              required:
                - 'postId'
      responses:
        '200':
          description: 'post information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.get:
    post:
      summary: 'get a post by ID'
      tags:
        - 'Post'
      security:
        - ApiKeyAuth: []
      description: "Get a post by ID\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a post.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'postId'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.flag:
    post:
      summary: 'flag a post.'
      tags:
        - 'Post'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a post to be flagged.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'postId'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostSocketResponse'
        '403':
          $ref: './global/error.yaml#/NumberOfFlagExceedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.unflag:
    post:
      summary: 'unflag a post.'
      tags:
        - 'Post'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a post to be unflagged.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'postId'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostSocketResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.isflagbyme:
    post:
      summary: 'Check whether user flag a given post.'
      tags:
        - 'Post'
      security:
        - SocketAuth: []
      description: "Check whether user flag a given post.\n"
      requestBody:
        description: "postId to check if the post is flagged by user.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'postId'
      responses:
        '200':
          $ref: './global/response.yaml#/IsSocialFlagByMeResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
  /sockets/v3/post.getList:
    post:
      summary: 'get list of post'
      tags:
        - 'Post'
      security:
        - ApiKeyAuth: []
      description: "Get list of post\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a post.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postIds:
                  type: 'array'
                  maxItems: 100
                  items:
                    type: 'string'
                    maxLength: 50
              required:
                - 'postIds'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.clearFlags:
    post:
      summary: 'clear flags'
      tags:
        - 'Post'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a post to be clear flagged.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'postId'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.query:
    post:
      summary: 'query posts'
      tags:
        - 'Post'
      security:
        - ApiKeyAuth: []
      description: "Query posts\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                targetId:
                  type: 'string'
                  maxLength: 900
                targetType:
                  type: 'string'
                  enum:
                    - 'community'
                    - 'user'
                    - 'content'
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'lastUpdated'
                    - 'firstUpdated'
                  default: 'lastCreated'
                dataType:
                  type: 'string'
                  example: 'upstra.customtype'
                  description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
                  deprecated: true
                hasFlag:
                  type: 'boolean'
                  default: null
                  description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
                isDeleted:
                  type: 'boolean'
                  default: null
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      maxLength: 1000
                feedType:
                  type: 'string'
                  enum:
                    - 'published'
                    - 'reviewing'
                  default: 'published'
                dataTypes:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    oneOf:
                      - type: 'string'
                        enum:
                          - 'video'
                          - 'image'
                          - 'file'
                          - 'liveStream'
                        description: 'post data type to filter'
                      - type: 'string'
                        example: 'upstra.customtype'
                        description: 'custom post type - must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
                matchingOnlyParentPost:
                  type: 'boolean'
                  default: true
                  description: 'When `true` will filter only parent post'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    max: 24
                    description: 'tags'
              required:
                - 'targetType'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostPaginationSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.approve:
    post:
      summary: 'Approve reviewing post'
      tags:
        - 'Post'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a post to be clear flagged.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'postId'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/post.decline:
    post:
      summary: 'Decline reviewing post'
      tags:
        - 'Post'
      security:
        - ApiKeyAuth: []
      description: "Query posts\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                targetId:
                  type: 'string'
                  maxLength: 900
                targetType:
                  type: 'string'
                  enum:
                    - 'community'
                    - 'user'
                    - 'content'
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'lastUpdated'
                    - 'firstUpdated'
                  default: 'lastCreated'
                dataType:
                  type: 'string'
                  example: 'upstra.customtype'
                  description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
                  deprecated: true
                hasFlag:
                  type: 'boolean'
                  default: null
                  description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
                isDeleted:
                  type: 'boolean'
                  default: null
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      maxLength: 1000
                feedType:
                  type: 'string'
                  enum:
                    - 'published'
                    - 'reviewing'
                  default: 'published'
                dataTypes:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    oneOf:
                      - type: 'string'
                        enum:
                          - 'video'
                          - 'image'
                          - 'file'
                          - 'liveStream'
                        description: 'post data type to filter'
                      - type: 'string'
                        example: 'upstra.customtype'
                        description: 'custom post type - must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
                matchingOnlyParentPost:
                  type: 'boolean'
                  default: true
                  description: 'When `true` will filter only parent post'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    max: 24
                    description: 'tags'
              required:
                - 'targetType'
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostPaginationSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/posts:
    post:
      summary: 'create a post'
      tags:
        - 'Post v4'
      security:
        - BearerAuth: []
      description: "Create a post\n"
      requestBody:
        description: "information of a post to be created.\n\nrequire text or at least 1 attachments\n\n### Custom post\n- When `dataType` is set as the custom name (dot separated string format, see the `dataType` field section), `data` payload can be anything but it will not support normal data capability (ex. `text` data will not be created)\nand `data` payload size will be limit to `100kb`\n- `attachments` will be ignored, users need to keep them in `data` field and handle the file info by themselves\n\n### Image, File, Video post\n- Put `type` with file id in `attachments`\n- Image and File data can be picked from `fileId` in `data` object in child post\n- Video fileId for each resolution will be in `videoFileId` in `data` object in child post\n\n### Live streaming post\n- When put `dataType` as `liveStream` and `streamId` in `data`, post will be created as live streaming post\n- `attachments` will be ignored\n- Video streaming info will be in `videoStreamings` object in response\n\n### Poll post\n- When put `dataType` as `poll` and `pollId` in `data`, post will be created as poll post\n- `attachments` will be ignored\n- Poll info will be in `polls` object in response\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      description: 'data for text in post parent'
                      example: 'example text'
                    streamId:
                      type: 'string'
                      description: 'video streaming id for create live streaming post'
                      example: '81559bcc3a5bb3b6bbd69a83b89d337e'
                    pollId:
                      type: 'string'
                      description: 'poll id for create poll post'
                      example: '53a9fd8b5aaa1af6c5a1bbd245ce4a9b1627373735551'
                attachments:
                  type: 'array'
                  items:
                    type: 'object'
                    description: 'attachment info'
                    properties:
                      fileId:
                        type: 'string'
                        example: '57b916d38eaf8010caddfb7759a2d06c'
                        description: 'file id for attachment'
                      type:
                        type: 'string'
                        description: 'attachment type'
                        enum:
                          - 'image'
                          - 'file'
                          - 'video'
                dataType:
                  type: 'string'
                  example: 'upstra.customtype'
                  description: 'Must be in dot separated string format or system defined format (ex. "upstra.customtype", "com.eko.birthday", "liveStream")'
                targetType:
                  type: 'string'
                  enum:
                    - 'user'
                    - 'community'
                    - 'content'
                  default: 'user'
                  description: 'where to create post to'
                targetId:
                  type: 'string'
                  example: 'public_user_id'
                  description: 'Resource public id depends on target type (ex. target type is community, target id will be community public id)'
                metadata:
                  type: 'object'
                  example:
                    anything: 'you want'
                postId:
                  type: 'string'
                  example: 'postidiwant'
                  description: 'for specify public post id on post creation'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    description: 'tags'
                    max: 24
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification from the post.'
                  items:
                    type: 'object'
                    properties:
                      type:
                        type: 'string'
                        example: 'user'
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - 'user'
                      userIds:
                        type: 'array'
                        example:
                          - 'userId1'
                          - 'userId2'
                        description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds'
                        items:
                          type: 'string'
                createdAt:
                  type: 'string'
                  description: 'The date/time when a post is created.'
                  format: 'date-time'
                  example: '2022-07-07T04:24:20.444Z'
              required:
                - 'data'
      responses:
        '200':
          $ref: './v4/post/response.yaml#/PostResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    get:
      summary: 'query a post'
      tags:
        - 'Post v4'
      security:
        - BearerAuth: []
      description: "Query posts\n"
      parameters:
        - name: 'targetId'
          in: 'query'
          required: true
          schema:
            type: 'string'
            maxLength: 900
        - name: 'targetType'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'community'
              - 'user'
              - 'content'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'lastCreated'
              - 'firstCreated'
              - 'lastUpdated'
              - 'firstUpdated'
            default: 'lastCreated'
        - name: 'hasFlag'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
          description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
              before:
                type: 'string'
                maxLength: 24
              after:
                type: 'string'
                maxLength: 24
              updatedAt:
                type: 'string'
                maxLength: 100
          description: 'use updatedAt when sort by first/lastUpdated'
        - name: 'feedType'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            minItems: 1
            maxItems: 4
            items:
              type: 'string'
              enum:
                - 'reviewing'
                - 'published'
            default: 'published'
        - name: 'dataTypes'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            minItems: 1
            maxItems: 4
            items:
              type: 'string'
              maxLength: 100
              enum:
                - 'video'
                - 'image'
                - 'file'
                - 'liveStream'
                - 'poll'
          description: 'post data type to filter'
        - name: 'tags'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            minItems: 0
            maxItems: 5
            items:
              type: 'string'
              max: 24
          description: 'tags'
        - name: 'matchingOnlyParentPost'
          in: 'query'
          schema:
            type: 'boolean'
            default: true
          description: 'When `true` will filter only parent post'
      responses:
        '200':
          $ref: './v4/post/response.yaml#/PostPaginationApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/posts/:postId:
    put:
      summary: 'update a post'
      tags:
        - 'Post v4'
      security:
        - BearerAuth: []
      description: "Update a post\n"
      parameters:
        - name: 'postId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a post to be updated.\n### Image, File, Video post update - Put `type` with file id in `attachments` - Image and File data can be picked from `fileId` in `data` object in child post - Video fileId for each resolution will be in `videoFileId` in `data` object in child post\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                text:
                  type: 'string'
                  deprecated: true
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      max: 50000
                      description: 'For updating text in the post'
                    fileId:
                      type: 'string'
                      max: 100
                      description: 'Put file id to update file,image inside file, image post (video is not supported yet)'
                    streamId:
                      type: 'string'
                      max: 100
                      description: 'Put stream id to update live streaming post with new streaming'
                    thumbnailFileId:
                      type: 'string'
                      max: 100
                      description: 'Put image file id to update video file thumbnail in video post'
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    max: 24
                    description: 'tags'
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification from the post.'
                  items:
                    type: 'object'
                    properties:
                      type:
                        type: 'string'
                        example: 'user'
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - 'user'
                      userIds:
                        type: 'array'
                        example:
                          - 'userId1'
                          - 'userId2'
                        description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds'
                        items:
                          type: 'string'
                attachments:
                  type: 'array'
                  items:
                    type: 'object'
                    description: 'attachment info'
                    properties:
                      fileId:
                        type: 'string'
                        example: '57b916d38eaf8010caddfb7759a2d06c'
                        description: 'file id for attachment'
                      type:
                        type: 'string'
                        description: 'attachment type'
                        enum:
                          - 'image'
                          - 'file'
                          - 'video'
      responses:
        '200':
          $ref: './v4/post/response.yaml#/PostResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'delete a post'
      tags:
        - 'Post v4'
      security:
        - BearerAuth: []
      description: "Delete a post\n"
      parameters:
        - name: 'postId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'permanent'
          in: 'query'
          schema:
            type: 'boolean'
            default: false
            description: 'If permanent data will be hard deleted'
      responses:
        '200':
          description: 'post information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/post.query:
    post:
      summary: 'query a post'
      tags:
        - 'Post v4'
      security:
        - ApiKeyAuth: []
      description: "Query posts\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                targetId:
                  type: 'string'
                  maxLength: 900
                targetType:
                  type: 'string'
                  enum:
                    - 'community'
                    - 'user'
                    - 'content'
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'lastUpdated'
                    - 'firstUpdated'
                  default: 'lastCreated'
                hasFlag:
                  type: 'boolean'
                  default: null
                  description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
                isDeleted:
                  type: 'boolean'
                  default: null
                options:
                  type: 'object'
                  properties:
                    before:
                      type: 'string'
                      maxLength: 24
                    after:
                      type: 'string'
                      maxLength: 24
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      maxLength: 1000
                feedType:
                  type: 'string'
                  enum:
                    - 'published'
                    - 'reviewing'
                  default: 'published'
                dataTypes:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    oneOf:
                      - type: 'string'
                        maxLength: 100
                        enum:
                          - 'video'
                          - 'image'
                          - 'file'
                          - 'liveStream'
                        description: 'post data type to filter'
                      - type: 'string'
                        example: 'upstra.customtype'
                        description: 'custom post type - must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
                matchingOnlyParentPost:
                  type: 'boolean'
                  default: true
                  description: 'When `true` will filter only parent post'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    max: 24
                    description: 'tags'
              required:
                - 'targetType'
      responses:
        '200':
          $ref: './v4/post/response.yaml#/PostPaginationSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/post.create:
    post:
      summary: 'create a post'
      tags:
        - 'Post v4'
      security:
        - SocketAuth: []
      description: "Create a post\n"
      requestBody:
        description: "information of a post to be created.\n\nrequire text or at least 1 attachments\n\n### Custom post\nWhen `dataType` is set `data` payload can be anything but it will not support normal data capability (ex. `text` data will not be created)\nand `data` payload size will be limit to `100kb`\n\n### Image, File, Video post\n- Put `type` with file id in `attachments`\n- Image and File data can be picked from `fileId` in `data` object in child post\n- Video fileId for each resolution will be in `videoFileId` in `data` object in child post\n\n### Live streaming post\n- When put `dataType` as `liveStream` and `streamId` in `data`, post will be created as live streaming post\n- `attachments` will be ignored\n- Video streaming info will be in `videoStreamings` object in response\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      description: 'data for text in post parent'
                      example: 'example text'
                    streamId:
                      type: 'string'
                      description: 'video streaming id for create live streaming post'
                      example: '81559bcc3a5bb3b6bbd69a83b89d337e'
                    pollId:
                      type: 'string'
                      description: 'poll id for create poll post'
                      example: '53a9fd8b5aaa1af6c5a1bbd245ce4a9b1627373735551'
                attachments:
                  type: 'array'
                  items:
                    type: 'object'
                    description: 'attachment info'
                    properties:
                      fileId:
                        type: 'string'
                        example: '57b916d38eaf8010caddfb7759a2d06c'
                        description: 'file id for attachment'
                      type:
                        type: 'string'
                        description: 'attachment type'
                        enum:
                          - 'image'
                          - 'file'
                          - 'video'
                dataType:
                  type: 'string'
                  example: 'upstra.customtype'
                  description: 'Must be in namespace like or system defined format (ex. "upstra.customtype", "com.eko.birthday", "liveStream")'
                targetType:
                  type: 'string'
                  enum:
                    - 'user'
                    - 'community'
                    - 'content'
                  default: 'user'
                  description: 'where to create post to'
                targetId:
                  type: 'string'
                  example: 'public_user_id'
                  description: 'Resource public id depends on target type (ex. target type is community, target id will be community public id)'
                metadata:
                  type: 'object'
                  example:
                    anything: 'you want'
                postId:
                  type: 'string'
                  example: 'postidiwant'
                  description: 'for specify public post id on post creation'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    max: 24
                    description: 'tags'
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification from the post.'
                  items:
                    type: 'object'
                    properties:
                      type:
                        type: 'string'
                        example: 'user'
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - 'user'
                      userIds:
                        type: 'array'
                        example:
                          - 'userId1'
                          - 'userId2'
                        description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds'
                        items:
                          type: 'string'
              required:
                - 'data'
      responses:
        '200':
          $ref: './v4/post/response.yaml#/PostSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/post.update:
    post:
      summary: 'update a post'
      tags:
        - 'Post v4'
      security:
        - SocketAuth: []
      description: "Update a post (can't update images and files yet)\n"
      requestBody:
        description: "information of a post to be updated.\n### Image, File, Video post update - Put `type` with file id in `attachments` - Image and File data can be picked from `fileId` in `data` object in child post - Video fileId for each resolution will be in `videoFileId` in `data` object in child post\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postId:
                  type: 'string'
                text:
                  type: 'string'
                  deprecated: true
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      max: 50000
                      description: 'For updating text in the post'
                    fileId:
                      type: 'string'
                      max: 100
                      description: 'Put file id to update file,image inside file, image post (video is not supported yet)'
                    streamId:
                      type: 'string'
                      max: 100
                      description: 'Put stream id to update live streaming post with new streaming'
                    thumbnailFileId:
                      type: 'string'
                      max: 100
                      description: 'Put image file id to update video file thumbnail in video post'
                metadata:
                  type: 'object'
                tags:
                  type: 'array'
                  minItems: 0
                  maxItems: 5
                  items:
                    type: 'string'
                    max: 24
                    description: 'tags'
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification from the post.'
                  items:
                    type: 'object'
                    properties:
                      type:
                        type: 'string'
                        example: 'user'
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - 'user'
                      userIds:
                        type: 'array'
                        example:
                          - 'userId1'
                          - 'userId2'
                        description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds'
                        items:
                          type: 'string'
                attachments:
                  type: 'array'
                  items:
                    type: 'object'
                    description: 'attachment info'
                    properties:
                      fileId:
                        type: 'string'
                        example: '57b916d38eaf8010caddfb7759a2d06c'
                        description: 'file id for attachment'
                      type:
                        type: 'string'
                        description: 'attachment type'
                        enum:
                          - 'image'
                          - 'file'
                          - 'video'
              required:
                - 'postId'
      responses:
        '200':
          $ref: './v4/post/response.yaml#/PostSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/post.delete:
    post:
      summary: 'delete a post'
      tags:
        - 'Post v4'
      security:
        - SocketAuth: []
      description: "Delete a post\n"
      requestBody:
        description: "information of a post to be deleted.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                postId:
                  type: 'string'
                permanent:
                  type: 'boolean'
                  default: false
                  description: 'If true data will be deleted from database'
              required:
                - 'postId'
      responses:
        '200':
          description: 'post information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/polls:
    post:
      summary: 'create a poll'
      tags:
        - 'Poll v3'
      security:
        - BearerAuth: []
      description: "Create a poll\n"
      requestBody:
        description: "Information of a poll to be created.\n### Required\n- at least 2 options\n- dataType currently support only `text`\n- closedIn unit must be `milliseconds`\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                text:
                  type: 'string'
                question:
                  type: 'string'
                  description: 'question.'
                answers:
                  type: 'array'
                  min: 2
                  maxItems: 10
                  items:
                    type: 'object'
                    properties:
                      dataType:
                        description: 'Datatype of answer (current only string).'
                        type: 'string'
                        enum:
                          - 'text'
                      data:
                        type: 'string'
                answerType:
                  description: 'single or multiple.'
                  type: 'single'
                  default: null
                closedIn:
                  type: 'number'
                  description: 'Countdown time to close vote (milliseconds)'
              required:
                - 'data'
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollResponse'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/polls/{pollId}:
    put:
      summary: 'update status poll'
      tags:
        - 'Poll v3'
      security:
        - BearerAuth: []
      description: "update a poll\n"
      parameters:
        - name: 'pollId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of a poll to be updated.\n### Required\n- currently support only `closed`\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                text:
                  type: 'string'
                status:
                  description: 'poll status'
                  type: 'string'
                  default: 'closed'
              required:
                - 'data'
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollResponse'
        '403':
          $ref: './global/error.yaml#/PollForbiddenError'
        '404':
          $ref: './global/error.yaml#/PollNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    get:
      summary: 'get poll'
      tags:
        - 'Poll v3'
      security:
        - BearerAuth: []
      description: "List users who vote the poll with specific answer\n"
      parameters:
        - name: 'pollId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollResponse'
        '404':
          $ref: './global/error.yaml#/PollNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'delete poll'
      tags:
        - 'Poll v3'
      security:
        - BearerAuth: []
      description: "delete a poll\n"
      parameters:
        - name: 'pollId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: 'poll deleted'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '404':
          $ref: './global/error.yaml#/PollNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/polls/{pollId}/votes:
    post:
      summary: 'vote poll'
      tags:
        - 'Poll v3'
      security:
        - BearerAuth: []
      description: "Client vote poll\n"
      parameters:
        - name: 'pollId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Information of a poll to be voted.\n### Required\n- answerIds for vote the poll\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                answerIds:
                  description: 'poll id'
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'data'
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/PollNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/polls/{pollId}/answers/{answerId}:
    get:
      summary: 'List users who vote the poll with specific answer'
      tags:
        - 'Poll v3'
      security:
        - BearerAuth: []
      description: "List users who vote the poll with specific answer\n"
      parameters:
        - name: 'pollId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
        - name: 'answerId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'lastCreated'
              - 'firstCreated'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
              before:
                type: 'string'
                maxLength: 24
              after:
                type: 'string'
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollPaginationResponse'
        '404':
          $ref: './global/error.yaml#/PollNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/poll.create:
    post:
      summary: 'create a poll'
      tags:
        - 'Poll v3'
      security:
        - SocketAuth: []
      description: "Create a poll\n"
      requestBody:
        description: "Information of a poll to be created.\n### Required\n- at least 2 options\n- dataType currently support only `text`\n- closedIn unit must be `milliseconds`\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                text:
                  type: 'string'
                question:
                  type: 'string'
                  description: 'question.'
                answers:
                  type: 'array'
                  min: 2
                  maxItems: 10
                  items:
                    type: 'object'
                    properties:
                      dataType:
                        description: 'Datatype of answer (current only string).'
                        type: 'string'
                        enum:
                          - 'text'
                      data:
                        type: 'string'
                answerType:
                  description: 'single or multiple.'
                  type: 'single'
                  default: null
                closedIn:
                  type: 'number'
                  description: 'Countdown time to close vote (milliseconds)'
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollSocketResponse'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/poll.update:
    post:
      summary: 'update status poll'
      tags:
        - 'Poll v3'
      security:
        - SocketAuth: []
      description: "update a poll\n"
      requestBody:
        description: "Information of a poll to be updated.\n### Required\n- currently support only `closed`\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                pollId:
                  type: 'string'
                text:
                  type: 'string'
                status:
                  description: 'poll status'
                  type: 'string'
                  default: 'closed'
              required:
                - 'pollId'
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollSocketResponse'
        '403':
          $ref: './global/error.yaml#/PollForbiddenError'
        '404':
          $ref: './global/error.yaml#/PollNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/poll.delete:
    post:
      summary: 'delete poll'
      tags:
        - 'Poll v3'
      security:
        - SocketAuth: []
      description: "delete a poll\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                pollId:
                  type: 'string'
              required:
                - 'pollId'
      responses:
        '200':
          description: 'poll deleted'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '404':
          $ref: './global/error.yaml#/PollNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/poll.vote:
    post:
      summary: 'vote poll'
      tags:
        - 'Poll v3'
      security:
        - SocketAuth: []
      description: "Client vote poll\n"
      requestBody:
        description: "Information of a poll to be voted.\n### Required\n- answerIds for vote the poll\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                pollId:
                  type: 'string'
                answerIds:
                  description: 'poll id'
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'pollId'
                - 'answerIds'
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/PollNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/poll.get:
    post:
      summary: 'get poll'
      tags:
        - 'Poll v3'
      security:
        - ApiKeyAuth: []
      description: "List users who vote the poll with specific answer\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                pollId:
                  type: 'string'
              required:
                - 'pollId'
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollSocketResponse'
        '404':
          $ref: './global/error.yaml#/PollNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/poll.getList:
    post:
      summary: 'List users who vote the poll with specific answer'
      tags:
        - 'Poll v3'
      security:
        - SocketAuth: []
      description: "List users who vote the poll with specific answer\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                pollId:
                  type: 'string'
                answerId:
                  type: 'string'
              required:
                - 'pollId'
                - 'answerId'
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollPaginationSocketResponse'
        '404':
          $ref: './global/error.yaml#/PollNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/user-feeds/{userId}:
    get:
      summary: 'Get list of posts.'
      tags:
        - 'UserFeed'
      security:
        - BearerAuth: []
      description: "Get paginable list of posts.\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
              - 'lastUpdated'
              - 'firstUpdated'
            default: 'lastCreated'
        - name: 'hasFlag'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
          description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
        - name: 'dataTypes'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            minItems: 1
            maxItems: 4
            items:
              type: 'string'
              enum:
                - 'video'
                - 'image'
                - 'file'
                - 'liveStream'
            description: 'post data type to filter'
      responses:
        '200':
          $ref: './v3/user-feed/response.yaml#/UserFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/user-feeds/{userId}/count:
    get:
      summary: 'Get number of post.'
      tags:
        - 'UserFeed'
      security:
        - BearerAuth: []
      description: "Get number of post.\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
      responses:
        '200':
          $ref: './v3/user-feed/response.yaml#/NumberOfPostResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/user-feed.query:
    post:
      summary: 'Get list of posts.'
      tags:
        - 'UserFeed'
      security:
        - SocketAuth: []
      description: "Get paginable list of posts.\n"
      requestBody:
        description: "Condition of querying and pagination.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'lastUpdated'
                    - 'firstUpdated'
                  default: 'lastCreated'
                isDeleted:
                  type: 'boolean'
                  default: null
                hasFlag:
                  type: 'boolean'
                  default: null
                  description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                dataTypes:
                  type: 'array'
                  minItems: 1
                  maxItems: 4
                  items:
                    type: 'string'
                    enum:
                      - 'video'
                      - 'image'
                      - 'file'
                      - 'liveStream'
                    description: 'post data type to filter'
              required:
                - 'userId'
      responses:
        '200':
          $ref: './v3/user-feed/response.yaml#/UserFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/user-feed.count:
    post:
      summary: 'Get number of post.'
      tags:
        - 'UserFeed'
      security:
        - SocketAuth: []
      description: "Get number of post.\n"
      requestBody:
        description: "Condition of querying.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                isDeleted:
                  type: 'boolean'
                  default: null
              required:
                - 'userId'
      responses:
        '200':
          $ref: './v3/user-feed/response.yaml#/NumberOfPostResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/community-feeds/{communityId}:
    get:
      summary: 'Get list of posts.'
      tags:
        - 'CommunityFeed'
      security:
        - BearerAuth: []
      description: "Get paginable list of posts.\n"
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
              - 'lastUpdated'
              - 'firstUpdated'
            default: 'lastCreated'
        - name: 'hasFlag'
          in: 'query'
          schema:
            type: 'boolean'
            default: false
          description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
        - name: 'dataTypes'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            minItems: 1
            maxItems: 4
            items:
              type: 'string'
              enum:
                - 'video'
                - 'image'
                - 'file'
                - 'liveStream'
            description: 'post data type to filter'
      responses:
        '200':
          $ref: './v3/community-feed/response.yaml#/CommunityFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '401':
          $ref: './global/error.yaml#/UnAuthorizedError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community-feed.query:
    post:
      tags:
        - 'CommunityFeed'
      summary: 'Get list of posts.'
      security:
        - SocketAuth: []
      description: "Get paginable list of posts.\n"
      requestBody:
        description: "Condition of querying and pagination.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'lastUpdated'
                    - 'firstUpdated'
                  default: 'lastCreated'
                isDeleted:
                  type: 'boolean'
                  default: null
                hasFlag:
                  type: 'boolean'
                  default: null
                  description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                dataTypes:
                  type: 'array'
                  minItems: 1
                  maxItems: 4
                  items:
                    type: 'string'
                    enum:
                      - 'video'
                      - 'image'
                      - 'file'
                      - 'liveStream'
                    description: 'post data type to filter'
              required:
                - 'userId'
      responses:
        '200':
          $ref: './v3/community-feed/response.yaml#/CommunityFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '401':
          $ref: './global/error.yaml#/UnAuthorizedError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/global-feeds:
    get:
      summary: 'Get global feed.'
      tags:
        - 'GlobalFeed'
      security:
        - BearerAuth: []
      description: "Get paginable list of active posts (not deleted) from users and community.\n"
      parameters:
        - name: 'showOnlyMyFeed'
          in: 'query'
          schema:
            type: 'boolean'
        - name: 'dataTypes'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            minItems: 1
            maxItems: 4
            items:
              type: 'string'
              enum:
                - 'video'
                - 'image'
                - 'file'
                - 'liveStream'
            description: 'post data type to filter'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
      responses:
        '200':
          $ref: './v3/global-feed/response.yaml#/GlobalFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/global-feed.query:
    post:
      tags:
        - 'GlobalFeed'
      summary: 'Get global feed.'
      security:
        - SocketAuth: []
      description: "Get paginable list of active posts (not deleted) from users and community.\n"
      requestBody:
        description: "Condition of querying and pagination.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                showOnlyMyFeed:
                  type: 'boolean'
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                    dataTypes:
                      type: 'array'
                      minItems: 1
                      maxItems: 4
                      items:
                        type: 'string'
                        enum:
                          - 'video'
                          - 'image'
                          - 'file'
                          - 'liveStream'
                        description: 'post data type to filter'
      responses:
        '200':
          $ref: './v3/global-feed/response.yaml#/GlobalFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/comments:
    get:
      summary: 'query comments (pagination support).'
      tags:
        - 'Comment'
      security:
        - ApiKeyAuth: []
      description: "query comments.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'referenceId'
          required: true
          in: 'query'
          schema:
            type: 'string'
            maxLength: 900
        - name: 'referenceType'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'post'
              - 'content'
        - name: 'filterByParentId'
          in: 'query'
          schema:
            type: 'boolean'
            default: true
        - name: 'parentId'
          in: 'query'
          schema:
            type: 'string'
            maxLength: 900
        - name: 'hasFlag'
          in: 'query'
          schema:
            type: 'boolean'
            default: false
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
              - 'lastUpdated'
              - 'firstUpdated'
            default: 'lastCreated'
          description: "type:\n  * `scrollable(default)` - sort by segment number only.\n  * `pagination` - can sort by 'lastCreated(default)', 'firstCreated', 'lastUpdated', 'firstUpdated'.\n"
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          description: "type:\n  * `scrollable(default)` - 'after', 'first', 'before' and 'last' will be set for page size with direction.\n  * `pagination` - 'skip' and 'limit' will be the number of records to skip and max records size.\n\nlimit/skip:\n  * support pagination type only\n\nbefore/after/first/last:\n  * support scrollable type only\n"
          schema:
            type: 'object'
            properties:
              type:
                type: 'string'
                enum:
                  - 'scrollable'
                  - 'pagination'
                default: 'scrollable'
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
              skip:
                type: 'integer'
                minimum: 0
                maximum: 100
              after:
                type: 'integer'
                minimum: 1
              first:
                type: 'integer'
                minimum: 1
                maximum: 100
              before:
                type: 'integer'
                minimum: 1
              last:
                type: 'integer'
                minimum: 1
                maximum: 100
              token:
                type: 'string'
                maxLength: 1000
        - name: 'dataTypes'
          in: 'query'
          style: 'deepObject'
          description: "Option to set how the returned comments dataTypes will be contained:\n  * `values`: the dataTypes values want to be contained in the comment (available values: `text`, `image`)\n  * `matchType`: how the dataTypes must be contained in the comment\n    * `any`: the dataTypes could match only partial of the provided field\n    * `exact`: the dataTypes must contain exactly the same as provided in values\n\nExample query params: `GET /api/v3/comments?dataTypes[values][]=text&dataTypes[values][]=image&dataTypes[matchType]=any`\n"
          schema:
            type: 'object'
            properties:
              values:
                type: 'array'
                items:
                  type: 'string'
              matchType:
                type: 'string'
                enum:
                  - 'any'
                  - 'exact'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentPaginationApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'create a comment.'
      tags:
        - 'Comment'
      security:
        - BearerAuth: []
      requestBody:
        description: "information of a comment to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                referenceId:
                  type: 'string'
                  maxLength: 900
                referenceType:
                  type: 'string'
                  enum:
                    - 'post'
                    - 'content'
                  default: 'post'
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      maxLength: 50000
                metadata:
                  type: 'object'
                commentId:
                  type: 'string'
                  maxLength: 900
                parentId:
                  type: 'string'
                  maxLength: 900
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification from the post.'
                  items:
                    type: 'object'
                    properties:
                      type:
                        type: 'string'
                        example: 'user'
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - 'user'
                      userIds:
                        type: 'array'
                        example:
                          - 'userId1'
                          - 'userId2'
                        description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds'
                        items:
                          type: 'string'
                createdAt:
                  type: 'string'
                  description: 'The date/time when a comment is created.'
                  format: 'date-time'
                  example: '2022-07-07T04:24:20.444Z'
                attachments:
                  type: 'array'
                  description: 'The attachments/medias to be included in the comment'
                  items:
                    $ref: './schema/comment.yaml#/CommentAttachment'
              required:
                - 'referenceId'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/comments/{commentId}:
    get:
      summary: 'get a comment.'
      tags:
        - 'Comment'
      security:
        - BearerAuth: []
      description: "get a comment.\n"
      parameters:
        - name: 'commentId'
          in: 'path'
          required: true
          description: "Get comment by ID.\n"
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'update a comment.'
      tags:
        - 'Comment'
      security:
        - BearerAuth: []
      parameters:
        - name: 'commentId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "comment information.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      maxLength: 50000
                metadata:
                  type: 'object'
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification from the post.'
                  items:
                    type: 'object'
                    properties:
                      type:
                        type: 'string'
                        example: 'user'
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - 'user'
                      userIds:
                        type: 'array'
                        example:
                          - 'userId1'
                          - 'userId2'
                        description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds'
                        items:
                          type: 'string'
                attachments:
                  type: 'array'
                  description: 'The attachments/medias to be included in the comment'
                  items:
                    $ref: './schema/comment.yaml#/CommentAttachment'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'delete a comment.'
      tags:
        - 'Comment'
      security:
        - BearerAuth: []
      parameters:
        - name: 'commentId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: 'comment information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/comments/{commentId}/flag:
    post:
      summary: 'flag a comment.'
      tags:
        - 'Comment'
      security:
        - BearerAuth: []
      parameters:
        - name: 'commentId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a comment to be flagged.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                commentId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'commentId'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentApiResponse'
        '403':
          $ref: './global/error.yaml#/NumberOfFlagExceedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/comments/{commentId}/isflagbyme:
    get:
      summary: 'Check whether user flag a given comment.'
      tags:
        - 'Comment'
      security:
        - BearerAuth: []
      parameters:
        - name: 'commentId'
          in: 'path'
          required: true
          description: "commentId to be flagged\n"
          schema:
            type: 'string'
      description: "Check whether user flag a given comment.\n"
      responses:
        '200':
          $ref: './global/response.yaml#/IsSocialFlagByMeResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
  /api/v3/comments/:commentId/unflag:
    delete:
      summary: 'unflag a comment.'
      tags:
        - 'Comment'
      security:
        - BearerAuth: []
      parameters:
        - name: 'commentId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentApiResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/comments/list:
    get:
      summary: 'get comments by IDs.'
      tags:
        - 'Comment'
      security:
        - BearerAuth: []
      description: "get comments by IDs.\n"
      parameters:
        - name: 'commentIds'
          in: 'query'
          collectionFormat: 'multi'
          required: true
          schema:
            type: 'array'
            minItems: 1
            maxItems: 10
            items:
              type: 'string'
              maxLength: 50
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/comments/{commentId}/flags:
    delete:
      summary: 'clear flags.'
      tags:
        - 'Comment'
      security:
        - BearerAuth: []
      parameters:
        - name: 'commentId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentApiResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/comment.query:
    post:
      summary: 'query comments.'
      tags:
        - 'Comment'
      security:
        - ApiKeyAuth: []
      description: "query comments.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                referenceId:
                  type: 'string'
                  maxLength: 900
                referenceType:
                  type: 'string'
                  enum:
                    - 'post'
                    - 'content'
                filterByParentId:
                  type: 'boolean'
                  default: true
                parentId:
                  type: 'string'
                  maxLength: 900
                isDeleted:
                  type: 'boolean'
                  default: null
                sortBy:
                  type: 'string'
                  enum:
                    - 'firstCreated'
                    - 'lastCreated'
                    - 'lastUpdated'
                    - 'firstUpdated'
                  default: 'lastCreated'
                  description: "type:\n  * `scrollable(default)` - sort by segment number only.\n  * `pagination` - can sort by 'lastCreated(default)', 'firstCreated', 'lastUpdated', 'firstUpdated'.\n"
                options:
                  type: 'object'
                  properties:
                    type:
                      type: 'string'
                      enum:
                        - 'scrollable'
                        - 'pagination'
                      default: 'scrollable'
                      description: "type:\n  * `scrollable(default)` - 'after', 'first', 'before' and 'last' will be set for page size with direction.\n  * `pagination` - 'skip' and 'limit' will be the number of records to skip and max records size.\n"
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      description: 'support pagination type only'
                    skip:
                      type: 'integer'
                      minimum: 0
                      maximum: 100
                      description: 'support pagination type only'
                    after:
                      type: 'integer'
                      minimum: 1
                      description: 'support scrollable type only'
                    first:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      description: 'support scrollable type only'
                    before:
                      type: 'integer'
                      minimum: 1
                      description: 'support scrollable type only'
                    last:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      description: 'support scrollable type only'
                    token:
                      type: 'string'
                      maxLength: 1000
              required:
                - 'referenceId'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentPaginationSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/comment.create:
    post:
      summary: 'create a comment.'
      tags:
        - 'Comment'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a comment to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                referenceId:
                  type: 'string'
                  maxLength: 900
                referenceType:
                  type: 'string'
                  enum:
                    - 'post'
                    - 'content'
                  default: 'post'
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      maxLength: 50000
                metadata:
                  type: 'object'
                parentId:
                  type: 'string'
                  maxLength: 900
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification from the post.'
                  items:
                    type: 'object'
                    properties:
                      type:
                        type: 'string'
                        example: 'user'
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - 'user'
                      userIds:
                        type: 'array'
                        example:
                          - 'userId1'
                          - 'userId2'
                        description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds'
                        items:
                          type: 'string'
              required:
                - 'referenceId'
                - 'data'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/comment.update:
    post:
      summary: 'update a comment.'
      tags:
        - 'Comment'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "comment information.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                commentId:
                  type: 'string'
                  maxLength: 900
                data:
                  type: 'object'
                  properties:
                    text:
                      type: 'string'
                      maxLength: 50000
                metadata:
                  type: 'object'
                mentionees:
                  type: 'array'
                  description: 'The object of the mentions type and user who get a notification from the post.'
                  items:
                    type: 'object'
                    properties:
                      type:
                        type: 'string'
                        example: 'user'
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - 'user'
                      userIds:
                        type: 'array'
                        example:
                          - 'userId1'
                          - 'userId2'
                        description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds'
                        items:
                          type: 'string'
              required:
                - 'commentId'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/comment.delete:
    post:
      summary: 'delete a comment.'
      tags:
        - 'Comment'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "comment information.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                commentId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'commentId'
      responses:
        '200':
          description: 'comment information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/comment.flag:
    post:
      summary: 'flag a comment.'
      tags:
        - 'Comment'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a comment to be flagged.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                commentId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'commentId'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentSocketResponse'
        '403':
          $ref: './global/error.yaml#/NumberOfFlagExceedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/comment.unflag:
    post:
      summary: 'unflag a comment.'
      tags:
        - 'Comment'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a comment to be unflagged.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                commentId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'commentId'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentSocketResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/comment.isflagbyme:
    post:
      summary: 'Check whether user flag a given comment.'
      tags:
        - 'Comment'
      security:
        - SocketAuth: []
      description: "Check whether user flag a given comment.\n"
      requestBody:
        description: "commentId to be flagged\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                commentId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'commentId'
      responses:
        '200':
          $ref: './global/response.yaml#/IsSocialFlagByMeResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
  /sockets/v3/comment.get:
    post:
      summary: 'get a comment.'
      tags:
        - 'Comment'
      security:
        - ApiKeyAuth: []
      description: "get a comment.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Get comment by ID.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                commentId:
                  type: 'string'
                  maxLength: 50
              required:
                - 'commentId'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/comment.getList:
    post:
      summary: 'get comments by IDs.'
      tags:
        - 'Comment'
      security:
        - ApiKeyAuth: []
      description: "get comments by IDs.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Get comments by IDs.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                commentIds:
                  type: 'array'
                  maxItems: 100
                  items:
                    type: 'string'
                    maxLength: 50
              required:
                - 'commentIds'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/comment.clearFlags:
    post:
      summary: 'clear flags.'
      tags:
        - 'Comment'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a comment to be clearflagged.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                commentId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'commentId'
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/comments/{commentId}:
    delete:
      summary: 'delete a comment.'
      tags:
        - 'Comment v4'
      security:
        - BearerAuth: []
      parameters:
        - name: 'commentId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'permanent'
          in: 'query'
          schema:
            type: 'boolean'
            description: 'If permanent data will be hard deleted'
      responses:
        '200':
          description: 'comment information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/comment.delete:
    post:
      summary: 'delete a comment.'
      tags:
        - 'Comment v4'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "comment information.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                commentId:
                  type: 'string'
                  maxLength: 900
                permanent:
                  type: 'boolean'
                  default: false
                  description: 'If permanent data will be hard deleted'
              required:
                - 'commentId'
      responses:
        '200':
          description: 'comment information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/moderation-setting.get:
    post:
      summary: 'get a moderation setting'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      description: "Get a moderation setting.\n"
      responses:
        '200':
          $ref: '#/components/responses/ModerationSettingResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /sockets/moderation-setting.update:
    post:
      summary: 'update a moderation setting'
      tags:
        - 'Admin'
      security:
        - ApiKeyAuth: []
      description: "Update a moderation setting\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "moderation setting information\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                maxRepetition:
                  type: 'integer'
                  minimum: 0
                maxRepetitionTimeout:
                  type: 'integer'
                  minimum: 0
                blacklistMuteTimeout:
                  type: 'integer'
                  minimum: 0
                whitelistMuteTimeout:
                  type: 'integer'
                  minimum: 0
                maxRepetitionMuteTimeout:
                  type: 'integer'
                  minimum: 0
                enableImageModeration:
                  type: 'boolean'
                imageModeration:
                  type: 'object'
                  properties:
                    nudity:
                      type: 'number'
                      minimum: 0
                    suggestive:
                      type: 'number'
                      minimum: 0
                    violence:
                      type: 'number'
                      minimum: 0
                    disturbing:
                      type: 'number'
                      minimum: 0
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v3/files:
    post:
      summary: 'Upload file.'
      tags:
        - 'File'
      security:
        - BearerAuth: []
      consumes:
        - 'multipart/form-data'
      description: "Upload file to cloud storage\n"
      requestBody:
        description: "Information of file to be created. It will be applied to every attachment\n"
        content:
          multipart/form-data:
            schema:
              type: 'object'
              properties:
                files:
                  type: 'array'
                  items:
                    type: 'string'
                    format: 'binary'
                fullImage:
                  type: 'boolean'
                  optional: true
      responses:
        '200':
          $ref: './v3/file/response.yaml#/FileUploadResponse'
        '413':
          $ref: './global/error.yaml#/PayloadTooLargeError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/files/{fileId}:
    get:
      summary: 'Get file info'
      security:
        - BearerAuth: []
      tags:
        - 'File'
      description: "Get file info of fileId (ex. type, attributes)\n"
      parameters:
        - in: 'path'
          name: 'fileId'
          required: true
          schema:
            type: 'string'
            maxLength: 50
          description: 'File id'
      responses:
        '200':
          $ref: './v3/file/response.yaml#/FileResponse'
        '400':
          $ref: './global/error.yaml#/NotFoundError'
    delete:
      summary: 'Delete file'
      tags:
        - 'File'
      security:
        - BearerAuth: []
      description: "Delete file (also remove from cloud). Only uploader and admin can remove.\n"
      parameters:
        - in: 'path'
          name: 'fileId'
          required: true
          schema:
            type: 'string'
            maxLength: 50
          description: 'File id to remove'
      responses:
        '200':
          $ref: './v3/file/response.yaml#/FileDeleteResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '422':
          $ref: './global/error.yaml#/ValidationError'
  /api/v3/files/{fileId}/download:
    get:
      summary: 'Get file'
      tags:
        - 'File'
      security:
        - SocketAuth: []
      description: "Get file info of fileId (type, attributes)\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          schema:
            type: 'string'
        - name: 'upstra-access-token'
          in: 'cookie'
          schema:
            type: 'string'
          description: 'Alternative way to pass authorization token'
        - in: 'query'
          name: 't'
          optional: true
          schema:
            type: 'string'
          description: 'Access token (for showing image inside img tag on web)'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - in: 'path'
          name: 'fileId'
          required: true
          schema:
            type: 'string'
            maxLength: 50
          description: 'File id'
        - in: 'query'
          name: 'size'
          optional: true
          schema:
            type: 'string'
            enum:
              - 'full'
              - 'large'
              - 'medium'
              - 'small'
          description: 'Size of image to download (no effect on file type ''file'')'
      responses:
        '200':
          $ref: './v3/file/response.yaml#/FileDeleteResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
  /sockets/v3/file.get:
    post:
      summary: 'Get file info'
      tags:
        - 'File'
      security:
        - SocketAuth: []
      description: "Get file info of fileId (ex. type, attributes)\n"
      requestBody:
        description: "Condition of querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                fileId:
                  type: 'string'
                  maxLength: 50
              required:
                - 'fileId'
      responses:
        '200':
          $ref: './v3/file/response.yaml#/FileResponse'
        '404':
          $ref: './global/error.yaml#/FileNotFoundError'
  /sockets/v3/file.delete:
    post:
      summary: 'Delete file'
      tags:
        - 'File'
      security:
        - SocketAuth: []
      description: "Delete file (also remove from cloud). Only uploader and admin can remove.\n"
      requestBody:
        description: "Condition of removing\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                fileId:
                  type: 'string'
                  maxLength: 50
              required:
                - 'fileId'
      responses:
        '200':
          $ref: './v3/file/response.yaml#/FileDeleteResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
  /api/v4/images:
    post:
      summary: 'Upload image file.'
      security:
        - BearerAuth: []
      tags:
        - 'File'
      parameters:
        - name: 'Content-Type'
          in: 'header'
          value: 'multipart/form-data'
          required: true
          schema:
            type: 'string'
      consumes:
        - 'multipart/form-data'
      description: "Upload image to cloud storage\n\nImage size limit: 1,073,741,824 byte\n"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: 'object'
              properties:
                files:
                  type: 'array'
                  items:
                    type: 'string'
                    format: 'binary'
                    description: 'Image file data'
              required:
                - 'files'
      responses:
        '200':
          $ref: './v4/file/response.yaml#/FileImageUploadResponse'
        '413':
          $ref: './global/error.yaml#/PayloadTooLargeError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/files:
    post:
      summary: 'Upload file.'
      security:
        - BearerAuth: []
      tags:
        - 'File'
      parameters:
        - name: 'Content-Type'
          in: 'header'
          value: 'multipart/form-data'
          required: true
          schema:
            type: 'string'
      consumes:
        - 'multipart/form-data'
      description: "Upload file to cloud storage\n\nFile size limit: 1,073,741,824 byte\n"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: 'object'
              properties:
                files:
                  type: 'array'
                  items:
                    type: 'string'
                    format: 'binary'
                    description: 'file data'
              required:
                - 'files'
      responses:
        '200':
          $ref: './v4/file/response.yaml#/FileUploadResponse'
        '413':
          $ref: './global/error.yaml#/PayloadTooLargeError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/videos:
    post:
      summary: 'Upload video file.'
      security:
        - BearerAuth: []
      tags:
        - 'File'
      parameters:
        - name: 'Content-Type'
          in: 'header'
          value: 'multipart/form-data'
          required: true
          schema:
            type: 'string'
      consumes:
        - 'multipart/form-data'
      description: "Upload video to cloud storage\n\nVideo size limit: 1,073,741,824 byte\n"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: 'object'
              properties:
                files:
                  type: 'array'
                  items:
                    type: 'string'
                    format: 'binary'
                    description: 'Video file data'
                feedType:
                  type: 'string'
              required:
                - 'files'
      responses:
        '200':
          $ref: './v4/file/response.yaml#/FileVideoUploadResponse'
        '413':
          $ref: './global/error.yaml#/PayloadTooLargeError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities:
    get:
      summary: 'query communities.'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "query communities.\n"
      parameters:
        - name: 'keyword'
          in: 'query'
          schema:
            type: 'string'
            minLength: 0
            maxLength: 100
        - name: 'tags'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 10
            items:
              type: 'string'
              minLength: 1
              maxLength: 1000
        - name: 'filter'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'all'
              - 'member'
              - 'notMember'
            default: 'all'
        - name: 'categoryId'
          in: 'query'
          schema:
            type: 'string'
            minLength: 50
            maxLength: 50
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
              - 'displayName'
            default: 'lastCreated'
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
          description: "isDeleted:\n  * `null(default)` - Show both community is actived and community is inactived.\n  * `true` - Show community is inactived only.\n  * `false` - Show community is actived only.\n"
        - name: 'hasFlag'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
          description: "hasFlag:\n    * `null(default)` - Show all communities.\n    * `true` - Show only community has flagged post(or children post) or has flagged comment.\n    * `false` - Show only community has no flagged post(and children post) and has no flagged comment.\n"
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
              token:
                type: 'string'
                maxLength: 1000
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityPaginationApiResponse'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'create a community.'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      requestBody:
        description: "information of a community to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                displayName:
                  type: 'string'
                  minLength: 1
                  maxLength: 1000
                isPublic:
                  type: 'boolean'
                  default: true
                isOfficial:
                  type: 'boolean'
                  default: false
                onlyAdminCanPost:
                  type: 'boolean'
                  default: false
                description:
                  type: 'string'
                  minLength: 1
                  maxLength: 5000
                tags:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 1000
                metadata:
                  type: 'object'
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                  minLength: 1
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 1000
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 900
                categoryIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
                isUniqueDisplayName:
                  type: 'boolean'
                  default: false
                needApprovalOnPostCreation:
                  type: 'boolean'
                  default: false
              required:
                - 'displayName'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '400315':
          $ref: './global/error.yaml#/DuplicateEntryError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/{communityId}:
    get:
      summary: 'get a community by ID.'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "Get a community by ID\n"
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
        - name: 'type'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'public'
              - 'internal'
            default: 'public'
          description: 'type of communityId'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'update a community.'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      requestBody:
        description: "community information.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                displayName:
                  type: 'string'
                  minLength: 1
                  maxLength: 1000
                isPublic:
                  type: 'boolean'
                isOfficial:
                  type: 'boolean'
                onlyAdminCanPost:
                  type: 'boolean'
                description:
                  type: 'string'
                  minLength: 0
                  maxLength: 5000
                tags:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 1000
                metadata:
                  type: 'object'
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                  minLength: 1
                categoryIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
                isUniqueDisplayName:
                  type: 'boolean'
                  default: false
                needApprovalOnPostCreation:
                  type: 'boolean'
                  default: false
              required:
                - 'communityId'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '400315':
          $ref: './global/error.yaml#/DuplicateEntryError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'delete a community.'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      responses:
        '200':
          $ref: './global/response.yaml#/DeleteApiResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/:communityId/join:
    post:
      summary: 'Join a community'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "Join community by ID\n"
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/:communityId/leave:
    delete:
      summary: 'Leave a community.'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "Leave community by ID\n"
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '401':
          $ref: './global/error.yaml#/UnAuthorizedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/{communityId}/users:
    get:
      summary: 'query community users'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "query community users.\n"
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
        - name: 'memberships'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            description: 'Membership type to filter (If not filter will return both banned user and member)'
            minItems: 1
            maxItems: 2
            items:
              type: 'string'
              enum:
                - 'banned'
                - 'member'
        - name: 'roles'
          in: 'query'
          collectionFormat: 'multi'
          description: 'Role to filter'
          schema:
            type: 'array'
            minItems: 1
            maxItems: 20
            items:
              type: 'string'
              minLength: 1
              maxLength: 100
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
            default: 'lastCreated'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                minLength: 1
                maxLength: 1000
        - name: 'search'
          description: 'Input text for searching display name and user id'
          in: 'query'
          schema:
            type: 'string'
            maxLength: 10000
        - name: 'type'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'public'
              - 'internal'
            default: 'public'
          description: 'type of communityId'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityPaginationApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'add community users'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "add community users\n"
      parameters:
        - in: 'path'
          name: 'communityId'
          required: true
          schema:
            type: 'string'
          description: 'Community public id'
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'remove community users'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "remove community users\n"
      parameters:
        - in: 'path'
          name: 'communityId'
          required: true
          schema:
            type: 'string'
            minimum: 1
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/:communityId/users/ban:
    put:
      summary: 'ban community users'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "ban community users.\n"
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 900
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '400306':
          $ref: './global/error.yaml#/ExemptFromBanError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/:communityId/users/unban:
    put:
      summary: 'unban community users'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "unban community users.\n"
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 900
              required:
                - 'userIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '400316':
          $ref: './global/error.yaml#/UserIsUnbannedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/:communityId/users/roles:
    post:
      summary: 'Add role to community users'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Add role to community users.\n"
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                role:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
                - 'role'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'Remove role from community users'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "Remove role from community users.\n"
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                role:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
                - 'role'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/{communityId}/permissions/me:
    get:
      summary: 'Get self permission in community'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "query comments.\n"
      parameters:
        - in: 'path'
          name: 'communityId'
          required: true
          schema:
            type: 'string'
            minimum: 1
          description: 'Community public id'
      responses:
        '200':
          description: 'Communities permission information for this user'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  isCreator:
                    type: 'boolean'
                    example: false
                    description: 'Is this person create this community?'
                  permissions:
                    type: 'array'
                    items:
                      $ref: './schema/role.yaml#/PermissionEnum'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/list:
    get:
      summary: 'get list of community'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "Get list of community\n"
      parameters:
        - name: 'communityIds'
          in: 'query'
          required: true
          collectionFormat: 'multi'
          schema:
            type: 'array'
            minLength: 1
            maxItems: 100
            items:
              type: 'string'
              maxLength: 50
        - name: 'type'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'public'
              - 'internal'
            default: 'public'
          description: 'type of communityId'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/recommended:
    get:
      summary: 'get list of recommended community'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "Get list of recommended community\n"
      parameters:
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 5
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/communities/top-trending:
    get:
      summary: 'get list of top trend community'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "Get list of top trend community\n"
      parameters:
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 5
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesApiResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/communities/:communityId/users/roles:
    post:
      summary: 'Add roles to community users'
      tags:
        - 'Community'
      security:
        - BearerAuth: []
      description: "Add roles to community users.\n"
      parameters:
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                roles:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    description: 'Role id'
                    type: 'string'
                    minLength: 1
                    maxLength: 100
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
                - 'roles'
      responses:
        '200':
          $ref: './v4/community/response.yaml#/CommunitiesApiResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'Remove roles from community users'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Remove roles from community users.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'communityId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            minLength: 1
            maxLength: 900
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                roles:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    description: 'Role id'
                    type: 'string'
                    minLength: 1
                    maxLength: 100
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'userIds'
                - 'roles'
      responses:
        '200':
          $ref: './v4/community/response.yaml#/CommunitiesApiResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.query:
    post:
      summary: 'query communities.'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "query comments.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                keyword:
                  type: 'string'
                  minLength: 0
                  maxLength: 100
                tags:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 1000
                filter:
                  type: 'string'
                  enum:
                    - 'all'
                    - 'member'
                    - 'notMember'
                  default: 'all'
                categoryId:
                  type: 'string'
                  minLength: 1
                  maxLength: 50
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'displayName'
                  default: 'lastCreated'
                isDeleted:
                  type: 'boolean'
                  default: null
                  description: "isDeleted:\n  * `null(default)` - Show both community is actived and community is inactived.\n  * `true` - Show community is inactived only.\n  * `false` - Show community is actived only.\n"
                hasFlag:
                  type: 'boolean'
                  default: null
                  description: "hasFlag:\n  * `null(default)` - Show all communities.\n  * `true` - Show only community has flagged post(or children post) or has flagged comment.\n  * `false` - Show only community has no flagged post(and children post) and has no flagged comment.\n"
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      minLength: 1
                      maxLength: 1000
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityPaginationSocketResponse'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.create:
    post:
      summary: 'create a community.'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a community to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                displayName:
                  type: 'string'
                  minLength: 1
                  maxLength: 1000
                isPublic:
                  type: 'boolean'
                  default: true
                description:
                  type: 'string'
                  minLength: 1
                  maxLength: 5000
                tags:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 1000
                metadata:
                  type: 'object'
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                  minLength: 1
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 1000
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 900
                categoryIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
                isUniqueDisplayName:
                  type: 'boolean'
                  default: false
                needApprovalOnPostCreation:
                  type: 'boolean'
                  default: false
              required:
                - 'displayName'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '400315':
          $ref: './global/error.yaml#/DuplicateEntryError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.update:
    post:
      summary: 'update a community.'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "community information.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                displayName:
                  type: 'string'
                  minLength: 1
                  maxLength: 1000
                isPublic:
                  type: 'boolean'
                description:
                  type: 'string'
                  minLength: 0
                  maxLength: 5000
                tags:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 1000
                metadata:
                  type: 'object'
                avatarFileId:
                  type: 'string'
                  maxLength: 50
                  minLength: 1
                categoryIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 10
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
                isUniqueDisplayName:
                  type: 'boolean'
                  default: false
                needApprovalOnPostCreation:
                  type: 'boolean'
                  default: false
              required:
                - 'communityId'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '403':
          $ref: './global/error.yaml#/ForbiddenError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '400315':
          $ref: './global/error.yaml#/DuplicateEntryError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.delete:
    post:
      summary: 'delete a community.'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "community information.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
              required:
                - 'communityId'
      responses:
        '200':
          $ref: './global/response.yaml#/DeleteSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.get:
    post:
      summary: 'get a community by ID.'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Get a community by ID\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                type:
                  type: 'string'
                  enum:
                    - 'public'
                    - 'internal'
                  default: 'public'
                  description: 'type of communityId'
              required:
                - 'communityId'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.join:
    post:
      summary: 'Join community by id'
      tags:
        - 'Community'
      description: "Join community by id\n"
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
              required:
                - 'communityId'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.leave:
    post:
      summary: 'Leave community by id'
      tags:
        - 'Community'
      description: "Leave community by id\n"
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
              required:
                - 'communityId'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '401':
          $ref: './global/error.yaml#/UnAuthorizedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.queryUsers:
    post:
      summary: 'query community users'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "query community users.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                memberships:
                  type: 'array'
                  description: 'Membership type to filter (If not filter will return both banned user and member)'
                  minItems: 1
                  maxItems: 2
                  items:
                    type: 'string'
                    enum:
                      - 'banned'
                      - 'member'
                roles:
                  type: 'array'
                  description: 'Role to filter'
                  minItems: 1
                  maxItems: 20
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 100
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                  default: 'lastCreated'
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      minLength: 1
                      maxLength: 1000
                search:
                  type: 'string'
                  maxLength: 10000
                type:
                  type: 'string'
                  enum:
                    - 'public'
                    - 'internal'
                  default: 'public'
                  description: 'type of communityId'
              required:
                - 'communityId'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityPaginationSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.banUsers:
    post:
      summary: 'ban community users'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "ban community users.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 900
              required:
                - 'communityId'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '400306':
          $ref: './global/error.yaml#/ExemptFromBanError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.unbanUsers:
    post:
      summary: 'unban community users'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "unban community users.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 900
              required:
                - 'communityId'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '400316':
          $ref: './global/error.yaml#/UserIsUnbannedError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.getList:
    post:
      summary: 'get list of community'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Get list of community\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
                type:
                  type: 'string'
                  enum:
                    - 'public'
                    - 'internal'
                  default: 'public'
                  description: 'type of communityId'
              required:
                - 'communityIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.getRecommendedList:
    post:
      summary: 'get list of recommended community'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Get list of recommended community\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 5
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.getTopTrendingList:
    post:
      summary: 'get list of top trend community'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Get list of top trend community\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 5
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.addUsers:
    post:
      summary: 'add community users'
      tags:
        - 'Community'
      description: "add community users\n"
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'communityId'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.removeUsers:
    post:
      summary: 'remove community users'
      tags:
        - 'Community'
      description: "remove community users\n"
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'communityId'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '403':
          $ref: './global/error.yaml#/PermissionDenidedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.assignRoleToUsers:
    post:
      summary: 'Add role to community users'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Add role to community users\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                role:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'communityId'
                - 'role'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.removeRoleFromUsers:
    post:
      summary: 'Remove role from community users'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Remove role from community users\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                role:
                  type: 'string'
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'communityId'
                - 'role'
                - 'userIds'
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunitiesSocketResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community.getSelfPermission:
    post:
      summary: 'Get self permission in community'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Get list of top trend community\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
      responses:
        '200':
          description: 'Communities permission information for this user'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  isCreator:
                    type: 'boolean'
                    example: false
                    description: 'Is this person create this community?'
                  permissions:
                    type: 'array'
                    items:
                      $ref: './schema/role.yaml#/PermissionEnum'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/community.assignRolesToUsers:
    post:
      summary: 'Add roles to community users'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Add roles to community users.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 32
                roles:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    description: 'Role id'
                    type: 'string'
                    minLength: 1
                    maxLength: 100
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'communityId'
                - 'userIds'
                - 'roles'
      responses:
        '200':
          $ref: './v4/community/response.yaml#/CommunitiesSocketResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/community.removeRolesFromUsers:
    post:
      summary: 'Remove roles from community users'
      tags:
        - 'Community'
      security:
        - ApiKeyAuth: []
      description: "Remove roles from community users.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                communityId:
                  type: 'string'
                  minLength: 1
                  maxLength: 32
                roles:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    description: 'Role id'
                    type: 'string'
                    minLength: 1
                    maxLength: 100
                userIds:
                  type: 'array'
                  minItems: 1
                  maxItems: 100
                  items:
                    type: 'string'
                    minLength: 1
                    maxLength: 50
              required:
                - 'communityId'
                - 'userIds'
                - 'roles'
      responses:
        '200':
          $ref: './v4/community/response.yaml#/CommunitiesSocketResponse'
        '403':
          $ref: './global/error.yaml#/GenericPermissionDenidedError'
        '400304':
          $ref: './global/error.yaml#/UserIsBannedError'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/community-categories:
    get:
      summary: 'query community categories.'
      tags:
        - 'CommunityCategory'
      security:
        - BearerAuth: []
      description: "query community categories.\n"
      parameters:
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
              - 'name'
            default: 'name'
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
      responses:
        '200':
          $ref: './v3/community-category/response.yaml#/CommunityCategoriesResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    post:
      summary: 'create a community categories.'
      tags:
        - 'CommunityCategory'
      security:
        - BearerAuth: []
      requestBody:
        description: "information of a community category to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                name:
                  type: 'string'
                  maxLength: 1000
                metadata:
                  type: 'object'
                avatarFileId:
                  type: 'string'
                  maxLength: 50
              required:
                - 'name'
      responses:
        '200':
          $ref: './v3/community-category/response.yaml#/CommunityCategoriesResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/community-categories/{categoryId}:
    get:
      summary: 'get a community category.'
      tags:
        - 'CommunityCategory'
      security:
        - BearerAuth: []
      description: "get a community category.\n"
      parameters:
        - name: 'categoryId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 50
      responses:
        '200':
          $ref: './v3/community-category/response.yaml#/CommunityCategoriesResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'update a community categories.'
      tags:
        - 'CommunityCategory'
      security:
        - BearerAuth: []
      parameters:
        - name: 'categoryId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "community category information.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                categoryId:
                  type: 'string'
                  maxLength: 50
                name:
                  type: 'string'
                  maxLength: 1000
                metadata:
                  type: 'object'
                avatarFileId:
                  type: 'string'
                  maxLength: 50
              required:
                - 'categoryId'
      responses:
        '200':
          $ref: './v3/community-category/response.yaml#/CommunityCategoriesResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'delete a community category.'
      tags:
        - 'CommunityCategory'
      security:
        - BearerAuth: []
      parameters:
        - name: 'categoryId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "community category information.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                categoryId:
                  type: 'string'
                  maxLength: 50
              required:
                - 'categoryId'
      responses:
        '200':
          description: 'community category information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/community-categories/list:
    get:
      summary: 'get list of community category.'
      tags:
        - 'CommunityCategory'
      security:
        - BearerAuth: []
      description: "Get list of community category.\n"
      parameters:
        - name: 'categoryIds'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 100
            items:
              type: 'string'
              maxLength: 50
      responses:
        '200':
          $ref: './v3/community-category/response.yaml#/CommunityCategoriesResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community-category.query:
    post:
      summary: 'query community categories.'
      tags:
        - 'CommunityCategory'
      security:
        - ApiKeyAuth: []
      description: "query community categories.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'name'
                  default: 'name'
                isDeleted:
                  type: 'boolean'
                  default: null
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      maxLength: 1000
      responses:
        '200':
          $ref: './v3/community-category/response.yaml#/CommunityCategoriesResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community-category.get:
    post:
      summary: 'get a community category.'
      tags:
        - 'CommunityCategory'
      security:
        - ApiKeyAuth: []
      description: "Get a community category.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of a community category.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                categoryId:
                  type: 'string'
                  maxLength: 50
              required:
                - 'categoryId'
      responses:
        '200':
          $ref: './v3/community-category/response.yaml#/CommunityCategoriesResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/community-category.getList:
    post:
      summary: 'get list of community category.'
      tags:
        - 'CommunityCategory'
      security:
        - ApiKeyAuth: []
      description: "Get list of community category.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information of community category.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                categoryIds:
                  type: 'array'
                  maxItems: 100
                  items:
                    type: 'string'
                    maxLength: 50
              required:
                - 'categoryIds'
      responses:
        '200':
          $ref: './v3/community-category/response.yaml#/CommunityCategoriesResponse'
        '429':
          $ref: './global/error.yaml#/RateLimitError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/content-feeds:
    get:
      summary: 'Get list of contents.'
      tags:
        - 'ContentFeed'
      security:
        - BearerAuth: []
      description: "Get paginable list of contents.\n"
      parameters:
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
              - 'lastUpdated'
              - 'firstUpdated'
            default: 'lastCreated'
        - name: 'hasFlag'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
          description: "hasFlag:\n  * `null(default)` - Show all contents.\n  * `true` - Show only flagged content or has flagged comment.\n  * `false` - Show only no flagged content and has no flagged comment.\n"
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: 'string'
                maxLength: 1000
      responses:
        '200':
          $ref: './v3/content-feed/response.yaml#/ContentFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/content-feed.query:
    post:
      summary: 'Get list of contents.'
      tags:
        - 'ContentFeed'
      security:
        - SocketAuth: []
      description: "Get paginable list of contents.\n"
      requestBody:
        description: "Condition of querying and pagination.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                    - 'lastUpdated'
                    - 'firstUpdated'
                  default: 'lastCreated'
                isDeleted:
                  type: 'boolean'
                  default: null
                hasFlag:
                  type: 'boolean'
                  default: null
                  description: "hasFlag:\n  * `null(default)` - Show all contents.\n  * `true` - Show only flagged content or has flagged comment.\n  * `false` - Show only no flagged content and has no flagged comment.\n"
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
      responses:
        '200':
          $ref: './v3/content-feed/response.yaml#/ContentFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/video-streaming:
    post:
      summary: 'create video streaming'
      tags:
        - 'VideoStreaming'
      security:
        - BearerAuth: []
      requestBody:
        description: "Information of video streaming to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                title:
                  type: 'string'
                  maxLength: 1000
                description:
                  type: 'string'
                  maxLength: 5000
                thumbnailFileId:
                  type: 'string'
                  maxLength: 50
                metadata:
                  type: 'object'
                isSecure:
                  type: 'boolean'
                  default: false
                resolution:
                  type: 'string'
                  enum:
                    - 'SD'
                    - 'HD'
                    - 'FHD'
                  default: 'SD'
              required:
                - 'title'
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsApiResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    get:
      summary: 'get list of video streaming'
      tags:
        - 'VideoStreaming'
      security:
        - BearerAuth: []
      parameters:
        - name: 'isLive'
          in: 'query'
          schema:
            type: 'boolean'
            default: false
        - name: 'statuses'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 10
            items:
              type: 'string'
              enum:
                - 'idle'
                - 'live'
                - 'ended'
                - 'recorded'
          description: "Status of livestreaming  \n  * idle - streaming is just created  \n  * live - streamer is streaming now or streamer is reconnecting  \n  * ended - streamer stop streaming or streamer disconnect and not connect back in time period  \n  * recorded - live stream recordings available \n"
        - name: 'userPublicIds'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            maxItems: 100
            items:
              type: 'string'
              maxLength: 50
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
        - name: 'isDeleted'
          in: 'query'
          schema:
            type: 'boolean'
            default: null
          description: "isDeleted:\n  * `null(default)` - Show both video streaming is activated and video streaming is inactivated.\n  * `true` - Show video streaming is inactivated only.\n  * `false` - Show video streaming is activated only.\n"
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          schema:
            type: 'object'
            properties:
              limit:
                type: 'integer'
              skip:
                type: 'integer'
              token:
                type: 'string'
                maxLength: 1000
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingPaginationApiResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/video-streaming/{streamId}:
    get:
      summary: 'get single video-streaming item'
      tags:
        - 'VideoStreaming'
      security:
        - BearerAuth: []
      parameters:
        - in: 'path'
          name: 'streamId'
          required: true
          schema:
            type: 'string'
            maxLength: 50
          description: 'Stream id to update'
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsApiResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'update video streaming'
      tags:
        - 'VideoStreaming'
      security:
        - BearerAuth: []
      parameters:
        - in: 'path'
          name: 'streamId'
          required: true
          schema:
            type: 'string'
            maxLength: 50
          description: 'Stream id to update'
      requestBody:
        description: "Information of video streaming to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                title:
                  type: 'string'
                  maxLength: 1000
                description:
                  type: 'string'
                  maxLength: 5000
                thumbnailFileId:
                  type: 'string'
                  maxLength: 50
                metadata:
                  type: 'object'
                resolution:
                  type: 'string'
                  enum:
                    - 'SD'
                    - 'HD'
                    - 'FHD'
                  default: 'SD'
              required:
                - 'title'
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsApiResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'delete video streaming'
      tags:
        - 'VideoStreaming'
      security:
        - BearerAuth: []
      description: "Delete a video streaming\n"
      parameters:
        - in: 'path'
          name: 'streamId'
          required: true
          schema:
            type: 'string'
            maxLength: 50
          description: 'Stream id to update'
      responses:
        '200':
          description: 'video streaming information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/video-streaming/:streamId/streaming-url:
    delete:
      summary: 'dispose video streaming url'
      tags:
        - 'VideoStreaming'
      security:
        - ApiKeyAuth: []
      description: "This API will update streaming status to `ended` and dispose apsara streaming url\n"
      parameters:
        - in: 'path'
          name: 'streamId'
          required: true
          schema:
            type: 'string'
            maxLength: 50
          description: 'Stream id to update'
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/video-streaming.create:
    post:
      summary: 'create video streaming'
      tags:
        - 'VideoStreaming'
      security:
        - SocketAuth: []
      requestBody:
        description: "Information of video streaming to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                description:
                  type: 'string'
                  maxLength: 5000
                thumbnailFileId:
                  type: 'string'
                  maxLength: 50
                metadata:
                  type: 'object'
                title:
                  type: 'string'
                  maxLength: 1000
                isSecure:
                  type: 'boolean'
                  default: false
                resolution:
                  type: 'string'
                  enum:
                    - 'SD'
                    - 'HD'
                    - 'FHD'
                  default: 'SD'
              required:
                - 'title'
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsSocketResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/video-streaming.update:
    post:
      summary: 'update video streaming'
      tags:
        - 'VideoStreaming'
      security:
        - SocketAuth: []
      requestBody:
        description: "Information of video streaming to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                streamId:
                  type: 'string'
                  maxLength: 50
                description:
                  type: 'string'
                  maxLength: 5000
                thumbnailFileId:
                  type: 'string'
                  maxLength: 50
                metadata:
                  type: 'object'
                title:
                  type: 'string'
                  maxLength: 1000
                resolution:
                  type: 'string'
                  enum:
                    - 'SD'
                    - 'HD'
                    - 'FHD'
                  default: 'SD'
              required:
                - 'title'
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsSocketResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/video-streaming.delete:
    post:
      summary: 'delete video streaming'
      tags:
        - 'VideoStreaming'
      security:
        - SocketAuth: []
      description: "Delete a video streaming\n"
      requestBody:
        description: "information of a video streaming to be deleted.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                streamId:
                  type: 'string'
                  maxLength: 50
              required:
                - 'streamId'
      responses:
        '200':
          description: 'video streaming information'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      success:
                        type: 'boolean'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/video-streaming.query:
    post:
      summary: 'get list of video streaming'
      tags:
        - 'VideoStreaming'
      security:
        - SocketAuth: []
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                isLive:
                  type: 'boolean'
                  default: false
                statuses:
                  type: 'array'
                  items:
                    type: 'string'
                    enum:
                      - 'idle'
                      - 'live'
                      - 'ended'
                      - 'recorded'
                  description: "Status of livestreaming  \n  * idle - streaming is just created  \n  * live - streamer is streaming now or streamer is reconnecting  \n  * ended - streamer stop streaming or streamer disconnect and not connect back in time period  \n  * recorded - live stream recordings available\n"
                userPublicIds:
                  type: 'array'
                  maxItems: 100
                  items:
                    type: 'string'
                    maxLength: 50
                sortBy:
                  type: 'string'
                  enum:
                    - 'lastCreated'
                    - 'firstCreated'
                isDeleted:
                  type: 'boolean'
                  default: null
                  description: "isDeleted:\n  * `null(default)` - Show both video streaming is activated and video streaming is inactivated.\n  * `true` - Show video streaming is inactivated only.\n  * `false` - Show video streaming is activated only.\n"
                options:
                  type: 'object'
                  properties:
                    after:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                    first:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                    before:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                    last:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                    token:
                      type: 'string'
                      maxLength: 1000
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingPaginationSocketResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/video-streaming.get:
    post:
      summary: 'get single video-streaming item'
      tags:
        - 'VideoStreaming'
      security:
        - SocketAuth: []
      requestBody:
        description: "Information of video streaming\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                streamId:
                  type: 'string'
                  maxLength: 50
              required:
                - 'streamId'
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsSocketResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/video-streaming.dispose:
    post:
      summary: 'dispose video streaming'
      tags:
        - 'VideoStreaming'
      security:
        - SocketAuth: []
      description: "This API will update streaming status to `ended` and dispose apsara streaming url\n"
      requestBody:
        description: "information of a video streaming to be deleted.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                streamId:
                  type: 'string'
                  maxLength: 50
              required:
                - 'streamId'
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /callbacks/video-streaming.didStart:
    get:
      tags:
        - 'VideoStreaming'
      security:
        - SocketAuth: []
      description: "Publish this event to __every user of network__ after a streamer started streaming\n"
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsSocketResponse'
  /callbacks/video-streaming.didStop:
    get:
      tags:
        - 'VideoStreaming'
      security:
        - SocketAuth: []
      description: "Publish this event to __every user of network__ after a streamer stopped streaming\n"
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsSocketResponse'
  /callbacks/video-streaming.didRecord:
    get:
      tags:
        - 'VideoStreaming'
      security:
        - SocketAuth: []
      description: "Publish this event to __every user of network__ after a streaming is recorded\n"
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsSocketResponse'
  /api/v3/user-event/video-streaming:
    post:
      summary: 'create user event for video streaming'
      tags:
        - 'UserEvent'
      security:
        - BearerAuth: []
      requestBody:
        $ref: './v3/user-event/request.yaml#/VideoStreamingUserEventRequestBody'
      responses:
        '200':
          $ref: './v3/user-event/response.yaml#/VideoStreamingUserEventApiResponse'
        '500':
          $ref: './global/error.yaml#/CustomValidationError'
  /api/v4/me/following/:userId:
    post:
      summary: 'Follow user.'
      tags:
        - 'Follow'
      security:
        - BearerAuth: []
      description: "Follow user information\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'Unfollow or Cancel follow request'
      tags:
        - 'Follow'
      security:
        - BearerAuth: []
      description: "Unfollow or Cancel follow request\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/me/followers/:userId:
    post:
      summary: 'Accept follow request.'
      tags:
        - 'Follow'
      security:
        - BearerAuth: []
      description: "Accept follow request.\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'Decline follow request or delete followers.'
      tags:
        - 'Follow'
      security:
        - BearerAuth: []
      description: "Delete follower.\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/me/followers:
    get:
      summary: 'Get my follower list.'
      tags:
        - 'Follow'
      security:
        - BearerAuth: []
      description: "Get follower information (pagination supported)\n"
      parameters:
        - name: 'status'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'all'
              - 'pending'
              - 'accepted'
            default: 'all'
        - name: 'limit'
          in: 'query'
          schema:
            type: 'integer'
            minimum: 1
            maximum: 100
            default: 10
        - name: 'token'
          in: 'query'
          schema:
            type: 'string'
            minLength: 1
            maxLength: 100
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowPaginationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/users/{userId}/followers:
    get:
      summary: 'Get other follower list.'
      tags:
        - 'Follow'
      security:
        - BearerAuth: []
      description: "Get follower information (pagination supported)\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
        - name: 'status'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'all'
              - 'pending'
              - 'accepted'
            default: 'all'
        - name: 'limit'
          in: 'query'
          schema:
            type: 'integer'
            minimum: 1
            maximum: 100
            default: 10
        - name: 'token'
          in: 'query'
          schema:
            type: 'string'
            minLength: 1
            maxLength: 100
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowPaginationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/me/following:
    get:
      summary: 'Get my following list'
      tags:
        - 'Follow'
      security:
        - BearerAuth: []
      description: "Get following information (pagination supported)\n"
      parameters:
        - name: 'status'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'all'
              - 'pending'
              - 'accepted'
            default: 'all'
        - name: 'limit'
          in: 'query'
          schema:
            type: 'integer'
            minimum: 1
            maximum: 100
            default: 10
        - name: 'token'
          in: 'query'
          schema:
            type: 'string'
            minLength: 1
            maxLength: 100
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowPaginationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/users/{userId}/following:
    get:
      summary: 'Get other following list.'
      tags:
        - 'Follow'
      security:
        - BearerAuth: []
      description: "Get following information (pagination supported)\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
        - name: 'status'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'all'
              - 'pending'
              - 'accepted'
            default: 'all'
        - name: 'limit'
          in: 'query'
          schema:
            type: 'integer'
            minimum: 1
            maximum: 100
            default: 10
        - name: 'token'
          in: 'query'
          schema:
            type: 'string'
            minLength: 1
            maxLength: 100
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowPaginationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/me/followInfo:
    get:
      summary: 'Get my follow information.'
      tags:
        - 'Follow'
      security:
        - BearerAuth: []
      description: "Get my follow information.\n"
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowCountResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/users/{userId}/followInfo:
    get:
      summary: 'Get other follow information.'
      tags:
        - 'Follow'
      security:
        - BearerAuth: []
      description: "Get other follow information.\n"
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'string'
            maxLength: 900
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowInformationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/users/{userId}:
    delete:
      summary: 'Delete user'
      security:
        - BearerAuth: []
      tags:
        - 'User'
      parameters:
        - in: 'path'
          name: 'userId'
          required: true
          schema:
            type: 'string'
            minimum: 1
            maximum: 50
          description: 'User public id'
      description: "Delete user from system. User display name will be replaced with \"Deleted user\".\n\nContent that is created from the user will be able to be wiped depend on the options.\n\n**This API allow only admin user to call**\n"
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                deleteAll:
                  type: 'boolean'
                  description: 'true - it will hard delete this user created channels, messages, comments, posts, polls, reactions after user is deleted.'
                  default: false
                markMessageDeleted:
                  type: 'boolean'
                  description: 'true - it will hard delete this user messages after user is deleted.'
                  default: false
                hardDeletePost:
                  type: 'boolean'
                  description: 'true - it will hard delete this user posts after user is deleted.'
                  default: false
                hardDeleteComment:
                  type: 'boolean'
                  description: 'true - it will hard delete this user comments after user is deleted.'
                  default: false
      responses:
        '200':
          $ref: './v4/user/response.yaml#/UserDeleteResponse'
        '400':
          $ref: './global/error.yaml#/UserIsAlreadyDeletedError'
        '404':
          $ref: './global/error.yaml#/UserNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/me/flags/{userId}:
    post:
      summary: 'Report user (flag user)'
      security:
        - BearerAuth: []
      tags:
        - 'User'
      parameters:
        - in: 'path'
          name: 'userId'
          required: true
          schema:
            type: 'string'
            minimum: 1
            maximum: 50
          description: 'User public id'
      description: "Report user by user id.\n"
      responses:
        '200':
          $ref: './v4/user/response.yaml#/FlagUserResponse'
        '404':
          $ref: './global/error.yaml#/UserNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    delete:
      summary: 'Unreported user (unflag user)'
      security:
        - BearerAuth: []
      tags:
        - 'User'
      parameters:
        - in: 'path'
          name: 'userId'
          required: true
          schema:
            type: 'string'
            minimum: 1
            maximum: 50
          description: 'User public id'
      description: "Unreported user by user id.\n"
      responses:
        '200':
          $ref: './v4/user/response.yaml#/UnflagUserResponse'
        '404':
          $ref: './global/error.yaml#/UserNotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/following.create:
    post:
      summary: 'Follow user.'
      tags:
        - 'Follow'
      security:
        - ApiKeyAuth: []
      description: "Follow user information\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "User to be follow.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'userId'
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/following.delete:
    post:
      summary: 'Unfollow or Cancel follow request'
      tags:
        - 'Follow'
      security:
        - ApiKeyAuth: []
      description: "Unfollow or Cancel follow request\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "User to be unfollow or cancel follow request.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'userId'
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/follower.accept:
    post:
      summary: 'Accept follow request.'
      tags:
        - 'Follow'
      security:
        - ApiKeyAuth: []
      description: "Accept follow request.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "User to be accepted.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'userId'
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/follower.delete:
    post:
      summary: 'Decline follow request or delete follower.'
      tags:
        - 'Follow'
      security:
        - ApiKeyAuth: []
      description: "Delete follower.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "User of follower to be deleted\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 900
              required:
                - 'userId'
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/followers.getList:
    post:
      summary: 'Get follower list.'
      tags:
        - 'Follow'
      security:
        - ApiKeyAuth: []
      description: "Get follower information (pagination supported)\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Request body\n"
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 900
                status:
                  type: 'string'
                  enum:
                    - 'all'
                    - 'pending'
                    - 'accepted'
                  default: 'all'
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      minLength: 1
                      maxLength: 100
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowPaginationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/following.getList:
    post:
      summary: 'Get following list.'
      tags:
        - 'Follow'
      security:
        - ApiKeyAuth: []
      description: "Get following information (pagination supported)\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Request body\n"
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 900
                status:
                  type: 'string'
                  enum:
                    - 'all'
                    - 'pending'
                    - 'accepted'
                  default: 'all'
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      minLength: 1
                      maxLength: 100
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowPaginationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/followInfo.get:
    post:
      summary: 'Get follow information.'
      tags:
        - 'Follow'
      security:
        - ApiKeyAuth: []
      description: "Get other follow information.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "User to be get follow information\n"
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  maxLength: 900
      responses:
        '200':
          $ref: './v4/follow/response.yaml#/FollowInformationResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v4/me/global-feeds:
    get:
      summary: 'Get global feed.'
      tags:
        - 'GlobalFeed'
      security:
        - BearerAuth: []
      description: "Get paginable list of active posts (not deleted) from users and community.\n"
      parameters:
        - name: 'limit'
          in: 'query'
          schema:
            type: 'integer'
            minimum: 1
            maximum: 100
            default: 10
        - name: 'token'
          in: 'query'
          schema:
            type: 'string'
            minLength: 1
            maxLength: 100
        - name: 'dataTypes'
          in: 'query'
          collectionFormat: 'multi'
          schema:
            type: 'array'
            minItems: 1
            maxItems: 4
            items:
              type: 'string'
              enum:
                - 'video'
                - 'image'
                - 'file'
                - 'liveStream'
            description: 'post data type to filter'
      responses:
        '200':
          $ref: './v4/global-feed/response.yaml#/GlobalFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v4/global-feed.query:
    post:
      tags:
        - 'GlobalFeed'
      summary: 'Get global feed.'
      security:
        - SocketAuth: []
      description: "Get paginable list of active posts (not deleted) from users and community.\n"
      requestBody:
        description: "Condition of querying and pagination.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                    dataTypes:
                      type: 'array'
                      minItems: 1
                      maxItems: 4
                      items:
                        type: 'string'
                        enum:
                          - 'video'
                          - 'image'
                          - 'file'
                          - 'liveStream'
                        description: 'post data type to filter'
      responses:
        '200':
          $ref: './v4/global-feed/response.yaml#/GlobalFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/network-settings:
    put:
      summary: 'Update network setting configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Update network setting configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                networkId:
                  type: 'string'
                tierHandler:
                  type: 'string'
                  maxLength: 200
                socialEnabled:
                  type: 'boolean'
                videoStreamingEnabled:
                  type: 'boolean'
                chatEnabled:
                  type: 'boolean'
                isWhitelistEnabled:
                  type: 'boolean'
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/NetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/network-settings/social:
    put:
      summary: 'Update social configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Update social configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userPrivacySetting:
                  type: 'string'
                  enum:
                    - 'public'
                    - 'private'
                isFollowWithRequestEnabled:
                  type: 'boolean'
                  default: false
                isAllowEditPostWhenReviewingEnabled:
                  type: 'boolean'
                showOnlyMyFeed:
                  type: 'boolean'
                  default: false
                showMyPost:
                  type: 'boolean'
                showEveryonePost:
                  type: 'boolean'
                showCommunityPost:
                  type: 'boolean'
                showFollowingPost:
                  type: 'boolean'
                isAllowMentionedChannelEnabled:
                  type: 'boolean'
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/SocialNetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    get:
      summary: 'Get social configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Get social configuration.\n"
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/SocialNetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/network-settings/webhook:
    put:
      summary: 'Update webhook configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Update webhook configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                webhookEnabled:
                  type: 'boolean'
                  description: "`true` - User can register webhook for network and will receive a webhook.\n`false` - User won't be able to register webhook and won't receive a webhook.\n"
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/WebhookNetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    get:
      summary: 'Get webhook configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Get webhook configuration.\n"
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/WebhookNetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/network-settings/chat:
    put:
      summary: 'Update chat network setting configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Update chat network setting configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                isAllowMentionedChannelEnabled:
                  type: 'boolean'
                  default: true
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/ChatNetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    get:
      summary: 'Get chat network setting configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Get chat network setting configuration.\n"
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/ChatNetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/network-settings/moderation:
    get:
      summary: 'Get moderation configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Using for get network moderation configuration.\n"
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/ModerationNetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'Update moderation configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Update moderation configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                isWhitelistEnabled:
                  type: 'boolean'
                  description: "`true` - Enabled whitelist validation.\n`false` - Disabled whitelist validation.\n"
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/ModerationNetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/network-settings/feed-setting:
    get:
      summary: 'Get feed setting check configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Using for get network feed setting check configuration.\n"
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/FeedSettingNetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'Update feed setting check configuration.'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Update feed setting check configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              $ref: './schema/network-setting.yaml#/FeedSettingNetworkSetting'
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/FeedSettingNetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/network-settings/tier:
    put:
      summary: 'Update network tier and feature'
      tags:
        - 'Network Setting'
      security:
        - BearerAuth: []
      description: "Update network tier and feature\n# Authorization token is a Cognito client_credentials access token (client is amity-portal and scope is asc/network.write)\n"
      parameters:
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                networkIds:
                  type: 'array'
                  description: 'Array of networkId'
                  minimum: 1
                  maximum: 10
                  items:
                    type: 'string'
                tierHandler:
                  type: 'string'
                  maximum: 200
                  enum:
                    - 'asc-basic'
                    - 'asc-advance'
                    - 'asc-max'
                    - 'asc-fixed-term-basic'
                    - 'asc-fixed-term-advance'
                    - 'asc-fixed-term-max'
                  description: 'Network tier'
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/NetworkSettingApiResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/allowlists:
    get:
      summary: 'Get list of allowed words'
      security:
        - BearerAuth: []
      tags:
        - 'Moderation'
      parameters:
        - name: 'regex'
          in: 'query'
          schema:
            type: 'string'
          description: 'search keyword from start'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          explode: true
          schema:
            type: 'object'
            properties:
              after:
                type: 'number'
              before:
                type: 'number'
              limit:
                type: 'number'
                description: 'limit amount of result'
              token:
                type: 'string'
                description: 'pagination token'
      responses:
        '200':
          $ref: './v3/moderation/response.yaml#/AllowedlistResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v3/blocklists:
    get:
      summary: 'Get list of banned words'
      security:
        - BearerAuth: []
      tags:
        - 'Moderation'
      parameters:
        - name: 'regex'
          in: 'query'
          schema:
            type: 'string'
          description: 'search keyword from start'
        - name: 'sortBy'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'firstCreated'
              - 'lastCreated'
        - name: 'options'
          in: 'query'
          style: 'deepObject'
          explode: true
          schema:
            type: 'object'
            properties:
              after:
                type: 'number'
              before:
                type: 'number'
              limit:
                type: 'number'
                description: 'limit amount of result'
              token:
                type: 'string'
                description: 'pagination token'
      responses:
        '200':
          $ref: './v3/moderation/response.yaml#/BlocklistResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/network-settings.getSocial:
    post:
      summary: 'Get social configuration.'
      tags:
        - 'Network Setting'
      security:
        - SocketAuth: []
      description: "Get social configuration.\n"
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/SocialNetworkSettingSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v3/network-settings.getChat:
    post:
      summary: 'Get chat network setting configuration.'
      tags:
        - 'Network Setting'
      security:
        - SocketAuth: []
      description: "Get chat network setting configuration.\n"
      responses:
        '200':
          $ref: './v3/network-setting/response.yaml#/ChatNetworkSettingSocketResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /realtime/community.created:
    get:
      summary: 'community created'
      description: "Event has occurred when community was created\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/community/response.yaml#/Response'
  /realtime/community.updated:
    get:
      summary: 'community updated'
      description: "Event has occurred when community was updated\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/community/response.yaml#/Response'
  /realtime/community.deleted:
    get:
      summary: 'community deleted'
      description: "Event has occurred when community was deleted\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/community/response.yaml#/Response'
  /realtime/community.joined:
    get:
      summary: 'community joined'
      description: "Event has occurred when joined community\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/community/response.yaml#/Response'
  /realtime/community.left:
    get:
      summary: 'community left'
      description: "Event has occurred when left community\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/community/response.yaml#/Response'
  /realtime/community.userAdded:
    get:
      summary: 'community user added'
      description: "Event has occurred when user was added to community\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/community/response.yaml#/Response'
  /realtime/community.userRemoved:
    get:
      summary: 'community user removed'
      description: "Event has occurred when user was removed from community\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/community/response.yaml#/Response'
  /realtime/community.userChanged:
    get:
      summary: 'community user changed'
      description: "Event has occurred when the number of user was changed in community\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/community/response.yaml#/Response'
  /realtime/community.userBanned:
    get:
      summary: 'community user banned'
      description: "Event has occurred when user was banned from community\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/community/response.yaml#/Response'
  /realtime/community.userUnbanned:
    get:
      summary: 'community user unbanned'
      description: "Event has occurred when user was unbanned from community\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/community/response.yaml#/Response'
  /realtime/post.created:
    get:
      summary: 'post created'
      description: "Event has occurred when post was created\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/post/response.yaml#/Response'
  /realtime/post.updated:
    get:
      summary: 'post updated'
      description: "Event has occurred when post was updated\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/post/response.yaml#/Response'
  /realtime/post.deleted:
    get:
      summary: 'post deleted'
      description: "Event has occurred post was deleted\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/post/response.yaml#/Response'
  /realtime/post.approved:
    get:
      summary: 'post approved'
      description: "Event has occurred when post was approved\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/post/response.yaml#/ResponseWithFlag'
  /realtime/post.declined:
    get:
      summary: 'post declined'
      description: "Event has occurred when post was declined\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/post/response.yaml#/ResponseWithFlag'
  /realtime/post.flagged:
    get:
      summary: 'post flagged'
      description: "Event has occurred when post was flagged\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/post/response.yaml#/ResponseWithFlag'
  /realtime/post.unflagged:
    get:
      summary: 'post unflagged'
      description: "Event has occurred when post was unflagged\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/post/response.yaml#/ResponseWithFlag'
  /realtime/post.addReaction:
    get:
      summary: 'post add reaction'
      description: "Event has occurred when a reaction is added to post\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/post/response.yaml#/ResponseWithReactor'
  /realtime/post.removeReaction:
    get:
      summary: 'post remove reaction'
      description: "Event has occurred when a reaction is removed from post\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/post/response.yaml#/ResponseWithReactor'
  /realtime/comment.created:
    get:
      summary: 'comment created'
      description: "Event has occurred when comment was created\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/comment/response.yaml#/Response'
  /realtime/comment.updated:
    get:
      summary: 'comment updated'
      description: "Event has occurred when comment was updated\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/comment/response.yaml#/Response'
  /realtime/comment.deleted:
    get:
      summary: 'comment deleted'
      description: "Event has occurred when comment was deleted\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/comment/response.yaml#/Response'
  /realtime/comment.flagged:
    get:
      summary: 'comment flagged'
      description: "Event has occurred when comment was flagged\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/comment/response.yaml#/ResponseWithFlag'
  /realtime/comment.unflagged:
    get:
      summary: 'comment unflagged'
      description: "Event has occurred when comment was unflagged\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/comment/response.yaml#/ResponseWithFlag'
  /realtime/comment.addReaction:
    get:
      summary: 'comment add reaction'
      description: "Event has occurred when a reaction is added to comment\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/comment/response.yaml#/ResponseWithReactor'
  /realtime/comment.removeReaction:
    get:
      summary: 'comment remove reaction'
      description: "Event has occurred when a reaction is removed from comment\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/comment/response.yaml#/ResponseWithReactor'
  /realtime/user.updated:
    get:
      summary: 'user updated'
      description: "Event has occurred when user was updated\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/user/response.yaml#/Response'
  /realtime/user.flagged:
    get:
      summary: 'user flagged'
      description: "Event has occurred when user was flagged\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/user/response.yaml#/Response'
  /realtime/user.unflagged:
    get:
      summary: 'user unflagged'
      description: "Event has occurred when user was unflagged\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/user/response.yaml#/Response'
  /realtime/user.flagCleared:
    get:
      summary: 'user flag cleared'
      description: "Event has occurred when the user flag was cleared\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/user/response.yaml#/Response'
  /realtime/follow.created:
    get:
      summary: 'follow created'
      description: "Event has occurred when follow was created\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/follow/response.yaml#/Response'
  /realtime/follow.requested:
    get:
      summary: 'follow requested'
      description: "Event has occurred when follow was requested\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/follow/response.yaml#/Response'
  /realtime/follow.accepted:
    get:
      summary: 'follow accepted'
      description: "Event has occurred when follow was accepted\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/follow/response.yaml#/Response'
  /realtime/follow.unfollowed:
    get:
      summary: 'unfollowed'
      description: "Event has occurred when unfollow was created\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/follow/response.yaml#/Response'
  /realtime/follow.requestCanceled:
    get:
      summary: 'follow request canceled'
      description: "Event has occurred when follow request was canceled\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/follow/response.yaml#/Response'
  /realtime/follow.followerDeleted:
    get:
      summary: 'delete follower'
      description: "Event has occurred when follower was deleted\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/follow/response.yaml#/Response'
  /realtime/follow.requestDeclined:
    get:
      summary: 'decline follow request'
      description: "Event has occurred when follow request was declined\n"
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v4/realtime/follow/response.yaml#/Response'
  /realtime/message.created:
    get:
      summary: 'message created'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v5/realtime/message/response.yaml#/CreatedResponse'
  /realtime/message.updated:
    get:
      summary: 'message updated'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v5/realtime/message/response.yaml#/Response'
  /realtime/message.deleted:
    get:
      summary: 'message deleted'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v5/realtime/message/response.yaml#/Response'
  /realtime/message.flagged:
    get:
      summary: 'message flagged'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v5/realtime/message/response.yaml#/Response'
  /realtime/message.unflagged:
    get:
      summary: 'message unflagged'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v5/realtime/message/response.yaml#/Response'
  /realtime/message.reactionAdded:
    get:
      summary: 'message reaction added'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v5/realtime/message/response.yaml#/ResponseWithReaction'
  /realtime/message.reactionRemoved:
    get:
      summary: 'message reaction removed'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v5/realtime/message/response.yaml#/ResponseWithReaction'
  /realtime/message-feed.created:
    get:
      summary: 'message feed created'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v5/realtime/message-feed/response.yaml#/Response'
  /realtime/message-feed.updated:
    get:
      summary: 'message feed updated'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v5/realtime/message-feed/response.yaml#/Response'
  /realtime/message-feed.deleted:
    get:
      summary: 'message feed deleted'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v5/realtime/message-feed/response.yaml#/Response'
  /realtime/channel.created:
    get:
      summary: 'channel created'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v3/realtime/channel/response.yaml#/Response'
  /realtime/channel.updated:
    get:
      summary: 'channel updated'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v3/realtime/channel/response.yaml#/Response'
  /realtime/channel.deleted:
    get:
      summary: 'channel deleted'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v3/realtime/channel/response.yaml#/Response'
  /realtime/channel.joined:
    get:
      summary: 'user joined the channel'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v3/realtime/channel/response.yaml#/Response'
  /realtime/channel.left:
    get:
      summary: 'user left the channel'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v3/realtime/channel/response.yaml#/Response'
  /realtime/channel.membersAdded:
    get:
      summary: 'users were added to the channel'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v3/realtime/channel/response.yaml#/Response'
  /realtime/channel.membersRemoved:
    get:
      summary: 'users were removed from the channel'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v3/realtime/channel/response.yaml#/Response'
  /realtime/channel.banned:
    get:
      summary: 'user is banned from the channel'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v3/realtime/channel/response.yaml#/Response'
  /realtime/channel.unbanned:
    get:
      summary: 'user is unbanned from the channel'
      tags:
        - 'Realtime'
      responses:
        '200':
          $ref: './v3/realtime/channel/response.yaml#/Response'
  /api/v5/me/global-feeds:
    get:
      summary: 'Get global feed.'
      tags:
        - 'GlobalFeed'
      security:
        - BearerAuth: []
      description: "Get posts from your wall, people you follow and communities you join sorted by custom rannking algorithm\n"
      parameters:
        - name: 'limit'
          in: 'query'
          schema:
            type: 'integer'
            minimum: 1
            maximum: 100
            default: 10
        - name: 'token'
          in: 'query'
          schema:
            type: 'string'
            minLength: 1
            maxLength: 1000
      responses:
        '200':
          $ref: './v5/global-feed/response.yaml#/GlobalFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /sockets/v5/global-feed.query:
    post:
      tags:
        - 'GlobalFeed'
      summary: 'Get global feed.'
      security:
        - SocketAuth: []
      description: "Get posts from your wall, people you follow and communities you join sorted by custom rannking algorithm\n"
      requestBody:
        description: "Condition of querying and pagination.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                options:
                  type: 'object'
                  properties:
                    limit:
                      type: 'integer'
                      minimum: 1
                      maximum: 100
                      default: 10
                    token:
                      type: 'string'
                      minimum: 1
                      maximum: 1000
      responses:
        '200':
          $ref: './v5/global-feed/response.yaml#/GlobalFeedResponse'
        '400':
          $ref: './global/error.yaml#/BadRequestError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
  /api/v5/message-feeds:
    post:
      tags:
        - 'Message Feed'
      summary: 'Add a new message feed'
      security:
        - BearerAuth: []
      description: 'Add a new message feed'
      requestBody:
        $ref: './v5/message-feed/request.yaml#/CreateMessageFeed'
      responses:
        '200':
          $ref: './v5/message-feed/response.yaml#/MessageFeedPayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
  /api/v5/message-feeds/{messageFeedId}:
    delete:
      tags:
        - 'Message Feed'
      summary: 'Delete a message feed'
      security:
        - BearerAuth: []
      description: 'Delete an existing message feed except the default message feed'
      parameters:
        - $ref: './v5/message-feed/parameter.yaml#/MessageFeedId'
        - $ref: './schema/generic.yaml#/Generic_permanent'
      responses:
        '200':
          description: 'Successful operation'
        '403':
          description: 'Fobidden error'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
    put:
      tags:
        - 'Message Feed'
      summary: 'Update a message feed'
      description: 'Update an existing message feed except the default message feed'
      security:
        - BearerAuth: []
      parameters:
        - $ref: './v5/message-feed/parameter.yaml#/MessageFeedId'
      requestBody:
        $ref: './v5/message-feed/request.yaml#/UpdateMessageFeed'
      responses:
        '200':
          $ref: './v5/message-feed/response.yaml#/MessageFeedPayload'
        '403':
          description: 'Forbidden error'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
    get:
      tags:
        - 'Message Feed'
      summary: 'Find a message feed by ID'
      security:
        - BearerAuth: []
      description: 'Return a single message feed'
      parameters:
        - $ref: './v5/message-feed/parameter.yaml#/MessageFeedId'
      responses:
        '200':
          $ref: './v5/message-feed/response.yaml#/MessageFeedPayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
  /api/v5/message-feeds/channel/{channelId}:
    get:
      tags:
        - 'Message Feed'
      summary: 'Finds message feeds by channelId and multiple conditions'
      description: 'Multiple conditions can be provided by query string'
      security:
        - BearerAuth: []
      operationId: 'findMessageFeedsByConditions'
      parameters:
        - name: 'channelId'
          in: 'path'
          required: true
          description: 'channel ID of message feed that needs to be find'
          schema:
            $ref: './schema/message-feed.yaml#/MessageFeed_channelId'
        - $ref: './v5/message-feed/parameter.yaml#/IsDeleted'
        - $ref: './v5/message-feed/parameter.yaml#/PagingOptions'
      responses:
        '200':
          $ref: './v5/message-feed/response.yaml#/PaginatedMessageFeedPayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
  /api/v5/message-feeds/list:
    get:
      tags:
        - 'Message Feed'
      summary: 'Find message feeds by list of ID''s'
      description: 'Multiple message feed id values can be provided with array format'
      parameters:
        - name: 'messageFeedIds'
          in: 'query'
          required: true
          description: 'List of message feed ID that needs to find (max=10) [messageFeedIds[]=messageFeedId1&messageFeedIds[]=messageFeedId2]'
          schema:
            $ref: './schema/message-feed.yaml#/MessageFeed_messageFeedIds'
      responses:
        '200':
          $ref: './v5/message-feed/response.yaml#/MessageFeedPayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
  /api/v5/message-feeds/user/{creatorId}:
    get:
      tags:
        - 'Message Feed'
      summary: 'Finds message feeds by creatorId and multiple conditions'
      description: 'Conditions can be provided in query string'
      operationId: 'findMessageFeedsByCreatorId'
      parameters:
        - name: 'creatorId'
          in: 'path'
          required: true
          description: 'ID of message feed creator'
          schema:
            description: Creator's ID
            type: string
            maxLength: 30
            example: 8aa313c8dbb00af911b07672
        - $ref: './v5/message-feed/parameter.yaml#/IsDeleted'
        - $ref: './v5/message-feed/parameter.yaml#/PagingOptions'
      responses:
        '200':
          $ref: './v5/message-feed/response.yaml#/MessageFeedPayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
  /api/v5/messages:
    post:
      tags:
        - 'Message V5'
      summary: 'Create a new message in message feed'
      description: 'Create a new message'
      requestBody:
        $ref: './v5/message/request.yaml#/CreateMessage'
      responses:
        '200':
          $ref: './v5/message/response.yaml#/CreateMessagePayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
    get:
      tags:
        - 'Message V5'
      summary: 'Find message by message feed id and multiple conditions'
      description: 'Multiple conditions can be provided in query string'
      parameters:
        - $ref: './v5/message-feed/parameter.yaml#/MessageFeedId'
        - $ref: './v5/message/parameter.yaml#/ParentId'
        - $ref: './v5/message/parameter.yaml#/IsDeleted'
        - $ref: './v5/message/parameter.yaml#/IncludeTags'
        - $ref: './v5/message/parameter.yaml#/ExcludeTags'
        - $ref: './v5/message/parameter.yaml#/HasFlags'
        - $ref: './v5/message/parameter.yaml#/DataType'
        - $ref: './v5/message/parameter.yaml#/PagingOptions'
      responses:
        '200':
          $ref: './v5/message/response.yaml#/PaginatedMessagePayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
  /api/v5/messages/{messageId}:
    delete:
      tags:
        - 'Message V5'
      summary: 'Delete a message'
      description: 'Delete a message'
      parameters:
        - $ref: './v5/message/parameter.yaml#/MessageId'
        - $ref: './v5/message/parameter.yaml#/Permanent'
      responses:
        '200':
          description: 'Successful operation'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
    get:
      tags:
        - 'Message V5'
      summary: 'Find message by ID'
      description: 'Returns a single message'
      parameters:
        - $ref: './v5/message/parameter.yaml#/MessageId'
      responses:
        '200':
          $ref: './v5/message/response.yaml#/MessagePayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
    put:
      tags:
        - 'Message V5'
      summary: 'Update a message'
      description: 'Update a message'
      parameters:
        - $ref: './v5/message/parameter.yaml#/MessageId'
      requestBody:
        $ref: './v5/message/request.yaml#/UpdateMessage'
      responses:
        '200':
          $ref: './v5/message/response.yaml#/MessagePayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
  /api/v5/messages/{messageId}/flags/all:
    delete:
      tags:
        - 'Message V5'
      summary: 'Delete all flags in message'
      description: 'Delete all flags in message'
      parameters:
        - $ref: './v5/message/parameter.yaml#/MessageId'
      responses:
        '200':
          $ref: './v5/message/response.yaml#/MessagePayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
  /api/v5/messages/{messageId}/flags:
    delete:
      tags:
        - 'Message V5'
      summary: 'Delete my flag in a message'
      description: 'Delete my flag in a message'
      parameters:
        - $ref: './v5/message/parameter.yaml#/MessageId'
      responses:
        '200':
          $ref: './v5/message/response.yaml#/MessagePayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
    get:
      tags:
        - 'Message V5'
      summary: 'Find my flag in message by ID'
      description: 'Return my flag in message'
      parameters:
        - $ref: './v5/message/parameter.yaml#/MessageId'
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  result:
                    $ref: './schema/message.yaml#/MessageV5_hasFlags'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
    post:
      tags:
        - 'Message V5'
      summary: 'Create my flag in a message'
      description: 'Flag a message'
      parameters:
        - $ref: './v5/message/parameter.yaml#/MessageId'
      responses:
        '200':
          $ref: './v5/message/response.yaml#/MessagePayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
  /api/v5/messages/list:
    get:
      tags:
        - 'Message V5'
      summary: 'Find messages by message id (max=10)'
      description: 'Multiple message id values can be provided with array format'
      parameters:
        - $ref: './v5/message/parameter.yaml#/MessageIds'
      responses:
        '200':
          $ref: './v5/message/response.yaml#/MessagePayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
  /api/v5/messages/user/{creatorId}:
    get:
      tags:
        - 'Message V5'
      summary: 'Find messages by creatorId and multiple conditions'
      description: 'Multiple conditions can be provided by query string'
      parameters:
        - $ref: './v5/message/parameter.yaml#/CreatorId'
        - $ref: './v5/message/parameter.yaml#/IsDeleted'
        - $ref: './v5/message/parameter.yaml#/HasFlags'
        - $ref: './v5/message/parameter.yaml#/PagingOptions'
      responses:
        '200':
          $ref: './v5/message/response.yaml#/PaginatedMessagePayload'
        '404':
          description: 'Not found error'
        '422':
          description: 'Parameters validation error'
      security:
        - BearerAuth: []
  /webhook/message.didCreate:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send new created message whenever a message got created in a channel'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didCreate'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
  /webhook/message.didDelete:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send deleted message whenever a message got deleted in a channel'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didDelete'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
  /webhook/message.didUpdate:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send updated message whenever a message got updated in a channel'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didUpdate'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
  /webhook/message.didFlag:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send updated message whenever a message got flag'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didFlag'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
  /webhook/message.didUnflag:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send updated message whenever a message flag is removed.'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didUnflag'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
  /webhook/message.didClearflag:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send updated message whenever all message flags are cleared.'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didClearflag'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
  /webhook/channel.didCreate:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send new created channel whenever a channel got create'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of userId who is added to channel. users is a list of user information.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didCreate'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
  /webhook/channel.didJoin:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send join event information whenever a channel got joined'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of joined userId. users is a list of user information.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didJoin'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
  /webhook/channel.didAddUsers:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send user added event information whenever new member got added to a channel.'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of added userId. adderId is user who add other user to channel users is a list of user information.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didAddUsers'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
                      adderId:
                        type: 'string'
  /webhook/channel.didClose:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send channel close event information whenever a channel close.'
      responses:
        '200':
          description: 'channel is channel information.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didClose'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/Channel'
  /webhook/channel.didLeave:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send channel leave event information whenever someone leave a channel.'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of userId who leave channel. users is a list of userInfo'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didLeave'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
  /webhook/channel.didUpdate:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send channel updated event information whenever a channel got updated.'
      responses:
        '200':
          description: 'channel is channel information. userId is a userId who update channel. users is a list of userInfo'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didUpdate'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
                      userId:
                        type: 'string'
  /webhook/channel.didRemoveUsers:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send user removed event information whenever member got remove from channel.'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of removed userId. removerId is userId who remove other users from channel. users is a list of user information.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didRemoveUsers'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
                      removerId:
                        type: 'string'
  /webhook/channel.didUpdateMeta:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send channel''s meta data updated event information whenever a channel''s meta data got updated.'
      responses:
        '200':
          description: 'channel is channel information. userId is a userId who update channel''s meta data. users is a list of userInfo'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didUpdateMeta'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#/User'
                      userId:
                        type: 'string'
  /webhook/channel.didBan:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send channel banned event whenever a channel got banned.'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of userIds who being banned. actorId is userId who ban other user. users is a list of userInfo'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didBan'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/User'
                      actorId:
                        type: 'string'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
  /webhook/moderation.didBan:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send banned event whenever a system detect message that contain in the blacklist'
      responses:
        '200':
          description: 'channel is channel information. userId is a userId who send the message. users is a list of userInfo'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'moderation.didBan'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: '#/components/schemas/User'
                      userId:
                        type: 'string'
  /webhook/user.didClearFlag:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when the user flags are cleared\n"
      responses:
        '200':
          $ref: './v1/user/response.yaml#/UserWebhookResponse'
  /webhook/user.didFlag:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when a user is flagged\n"
      responses:
        '200':
          $ref: './v1/user/response.yaml#/UserWebhookResponse'
  /webhook/user.didUnflag:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when a user is unflagged\n"
      responses:
        '200':
          $ref: './v1/user/response.yaml#/UserWebhookResponse'
  /webhook/user.didUpdate:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when a user information is updated\n"
      responses:
        '200':
          $ref: './v1/user/response.yaml#/UserWebhookResponse'
  /webhook/v3.community.didCreate:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when community is created\n"
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityWebhookResponse'
  /webhook/v3.community.didUpdate:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when community is updated\n"
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityWebhookResponse'
  /webhook/v3.community.didDelete:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when community is deleted\n"
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityWebhookResponse'
  /webhook/v3.community.didJoin:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when user joined a community.\n"
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityWebhookResponse'
  /webhook/v3.community.didLeave:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when user left a community\n"
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityWebhookResponse'
  /webhook/v3.community.didAddUsers:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when add users into community\n"
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityWebhookResponse'
  /webhook/v3.community.didRemoveUsers:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when remove users from community\n"
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityWebhookResponse'
  /webhook/v3.community.didBan:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when community user is banned\n"
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityWebhookResponse'
  /webhook/v3.community.didUnban:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when community user is unbanned\n"
      responses:
        '200':
          $ref: './v3/community/response.yaml#/CommunityWebhookResponse'
  /webhook/v3.post.didCreate:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is created\n"
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostWebhookResponse'
  /webhook/v3.post.didUpdate:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is updated\n"
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostWebhookResponse'
  /webhook/v3.post.didDelete:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is deleted\n"
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostWebhookResponse'
  /webhook/v3.post.didApprove:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is approved\n"
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostWebhookResponse'
  /webhook/v3.post.didDecline:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is declined\n"
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostWebhookResponse'
  /webhook/v3.post.didFlag:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is flagged.\n"
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostWithFlagWebhookResponse'
  /webhook/v3.post.didUnflag:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is unflagged.\n"
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostWithFlagWebhookResponse'
  /webhook/v3.post.didAddReaction:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when reaction of post is added.\n"
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostWithReactorWebhookResponse'
  /webhook/v3.post.didRemoveReaction:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when reaction of post is removed.\n"
      responses:
        '200':
          $ref: './v3/post/response.yaml#/PostWithReactorWebhookResponse'
  /webhook/v3.comment.didCreate:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is created\n"
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentWebhookResponse'
  /webhook/v3.comment.didUpdate:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is updated\n"
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentWebhookResponse'
  /webhook/v3.comment.didDelete:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is deleted\n"
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentWebhookResponse'
  /webhook/v3.comment.didFlag:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is flagged.\n"
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentWithFlagWebhookResponse'
  /webhook/v3.comment.didUnflag:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is unflagged.\n"
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentWithFlagWebhookResponse'
  /webhook/v3.comment.didAddReaction:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when reaction of comment is added.\n"
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentWithReactorWebhookResponse'
  /webhook/v3.comment.didRemoveReaction:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when reaction of comment is removed.\n"
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentWithReactorWebhookResponse'
  /webhook/v3.comment.didReply:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is replied.\n"
      responses:
        '200':
          $ref: './v3/comment/response.yaml#/CommentWebhookResponse'
  /webhook/poll.didCreate:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when poll is created\n"
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollResponse'
  /webhook/poll.didUpdate:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when poll is updated\n"
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollResponse'
  /webhook/poll.didVote:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when vote is created in poll\n"
      responses:
        '200':
          $ref: './v3/poll/response.yaml#/PollResponse'
  /webhook/v3.video-streaming.didRecord:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when video streaming recordings is ready.\n"
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsApiResponse'
  /webhook/v3.video-streaming.didStart:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when video streaming start.\n"
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsApiResponse'
  /webhook/v3.video-streaming.didStop:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when video streaming stop.\n"
      responses:
        '200':
          $ref: './v3/video-streaming/response.yaml#/VideoStreamingsApiResponse'
  /webhook/follow.didCreate:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when a user follows another user.\n"
      responses:
        '200':
          description: 'Follow Object'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  from:
                    type: 'string'
                  to:
                    type: 'string'
                  status:
                    type: 'string'
                    enum:
                      - 'accepted'
                  createdAt:
                    type: 'string'
                    format: 'date-time'
                  updatedAt:
                    type: 'string'
                    format: 'date-time'
  /webhook/follow.didRequest:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when a user sends a request to follow another user.\n"
      responses:
        '200':
          description: 'Follow Object'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  from:
                    type: 'string'
                  to:
                    type: 'string'
                  status:
                    type: 'string'
                    enum:
                      - 'pending'
                  createdAt:
                    type: 'string'
                    format: 'date-time'
                  updatedAt:
                    type: 'string'
                    format: 'date-time'
  /webhook/follow.didAcceptRequest:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when a user accepts a follow request from another user.\n"
      responses:
        '200':
          description: 'Follow Object'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  from:
                    type: 'string'
                  to:
                    type: 'string'
                  status:
                    type: 'string'
                    enum:
                      - 'accepted'
                  createdAt:
                    type: 'string'
                    format: 'date-time'
                  updatedAt:
                    type: 'string'
                    format: 'date-time'
  /webhook/follow.didUnfollow:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when a user unfollows another user.\n"
      responses:
        '200':
          description: 'Follow Object'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  from:
                    type: 'string'
                  to:
                    type: 'string'
                  status:
                    type: 'string'
                    enum:
                      - 'none'
                  createdAt:
                    type: 'string'
                    format: 'date-time'
                  updatedAt:
                    type: 'string'
                    format: 'date-time'
  /webhook/follow.didCancelRequest:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when a user cancels a request to follow another user.\n"
      responses:
        '200':
          description: 'Follow Object'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  from:
                    type: 'string'
                  to:
                    type: 'string'
                  status:
                    type: 'string'
                    enum:
                      - 'none'
                  createdAt:
                    type: 'string'
                    format: 'date-time'
                  updatedAt:
                    type: 'string'
                    format: 'date-time'
  /webhook/follow.didDecineRequest:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when a user declines a follow request from another user.\n"
      responses:
        '200':
          description: 'Follow Object'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  from:
                    type: 'string'
                  to:
                    type: 'string'
                  status:
                    type: 'string'
                    enum:
                      - 'none'
                  createdAt:
                    type: 'string'
                    format: 'date-time'
                  updatedAt:
                    type: 'string'
                    format: 'date-time'
  /webhook/follow.didDeleteFollower:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when a user deletes a user from their follower's list.\n"
      responses:
        '200':
          description: 'Follow Object'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  from:
                    type: 'string'
                  to:
                    type: 'string'
                  status:
                    type: 'string'
                    enum:
                      - 'none'
                  createdAt:
                    type: 'string'
                    format: 'date-time'
                  updatedAt:
                    type: 'string'
                    format: 'date-time'
  /webhook/push-notification/post.created:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is created\n"
      responses:
        '200':
          description: 'post created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/post/response.yaml#/PostCustomNotificationResponse'
  /webhook/push-notification/post.need-reviewing:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is created\n"
      responses:
        '200':
          description: 'post created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/post/response.yaml#/PostCustomNotificationResponse'
  /webhook/push-notification/post.approved:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is created\n"
      responses:
        '200':
          description: 'post created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/post/response.yaml#/PostCustomNotificationResponse'
  /webhook/push-notification/comment.created:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is created\n"
      responses:
        '200':
          description: 'comment created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/comment/response.yaml#/CommentCustomNotificationResponse'
  /webhook/push-notification/comment.replied:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is created\n"
      responses:
        '200':
          description: 'comment created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/comment/response.yaml#/CommentCustomNotificationResponse'
  /webhook/push-notification/post.reacted:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is created\n"
      responses:
        '200':
          description: 'post created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/post/response.yaml#/PostCustomNotificationResponse'
  /webhook/push-notification/comment.reacted:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is created\n"
      responses:
        '200':
          description: 'comment created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/comment/response.yaml#/CommentCustomNotificationResponse'
  /webhook/push-notification/message.created:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when message is created\n"
      responses:
        '200':
          description: 'message created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/message/response.yaml#/MessageCustomNotificationResponse'
  /webhook/push-notification/channel.created:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when channel is created/joined\n"
      responses:
        '200':
          description: 'channel created/joined'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/channel/response.yaml#/ChannelCustomNotificationResponse'
  /webhook/push-notification/channel.joined:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when channel is created/joined\n"
      responses:
        '200':
          description: 'channel created/joined'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/channel/response.yaml#/ChannelCustomNotificationResponse'
  /webhook/push-notification/follow.created:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when follow is created/requested/accepted\n"
      responses:
        '200':
          description: 'follow created/requested/accepted'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v4/follow/response.yaml#/FollowCustomNotificationResponse'
  /webhook/push-notification/follow.requested:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when follow is created/requested/accepted\n"
      responses:
        '200':
          description: 'follow created/requested/accepted'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v4/follow/response.yaml#/FollowCustomNotificationResponse'
  /webhook/push-notification/follow.accepted:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when follow is created/requested/accepted\n"
      responses:
        '200':
          description: 'follow created/requested/accepted'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v4/follow/response.yaml#/FollowCustomNotificationResponse'
  /webhook/push-notification/mention-post.created:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is created\n"
      responses:
        '200':
          description: 'post created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/post/response.yaml#/PostCustomNotificationResponse'
  /webhook/push-notification/mention-user-feed-post.created:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when post is created\n"
      responses:
        '200':
          description: 'post created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/post/response.yaml#/PostCustomNotificationResponse'
  /webhook/push-notification/mention-comment.created:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is created\n"
      responses:
        '200':
          description: 'comment created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/comment/response.yaml#/CommentCustomNotificationResponse'
  /webhook/push-notification/mention-comment.replied:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is created\n"
      responses:
        '200':
          description: 'comment created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/comment/response.yaml#/CommentCustomNotificationResponse'
  /webhook/push-notification/mention-user-feed-comment.created:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is created\n"
      responses:
        '200':
          description: 'comment created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/comment/response.yaml#/CommentCustomNotificationResponse'
  /webhook/push-notification/mention-user-feed-comment.replied:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when comment is created\n"
      responses:
        '200':
          description: 'comment created'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: false
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/comment/response.yaml#/CommentCustomNotificationResponse'
  /webhook/push-notification/video-streaming.started:
    get:
      tags:
        - 'WebhookEvent'
      security:
        - SocketAuth: []
      description: "This is called when video-streaming is started\n"
      responses:
        '200':
          description: 'video-streaming is started'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  eventType:
                    type: 'string'
                    enum:
                      - 'push-notification.created'
                  id:
                    type: 'string'
                  networkId:
                    type: 'string'
                  path:
                    type: 'string'
                  senderId:
                    type: 'string'
                  sentTime:
                    type: 'string'
                    format: 'date-time'
                  version:
                    type: 'string'
                  data:
                    type: 'object'
                    properties:
                      eventName:
                        type: 'string'
                      isBroadcast:
                        type: 'boolean'
                        default: true
                      targetIds:
                        type: 'array'
                        items:
                          type: 'string'
                      notify:
                        type: 'boolean'
                        description: 'should notify to user targetIds'
                      title:
                        type: 'string'
                      body:
                        type: 'string'
                    allOf:
                      - $ref: './v3/video-streaming/response.yaml#/VideoStreamingCustomNotificationResponse'
components:
  schemas:
    User:
      $ref: './schema/user.yaml#/User'
    ChannelType:
      $ref: './schema/channel.yaml#/ChannelType'
    ChannelMembership:
      $ref: './schema/channel.yaml#/ChannelMembership'
    Channel:
      type: 'object'
      properties:
        channelId:
          type: 'string'
          description: 'ID of a channel.'
        isDistinct:
          type: 'boolean'
        metadata:
          type: 'object'
          description: 'Additional properties to support custom fields.'
        type:
          $ref: '#/components/schemas/ChannelType'
          description: 'Type of a channel (standard, conversation, broadcast). This property is not be used for now.'
        tags:
          type: 'array'
          description: 'List of tags. They will be used for searching.'
          items:
            type: 'string'
        isMuted:
          type: 'boolean'
          description: 'Is this channel muted? (Computed by using muteTimeout).'
        isRateLimited:
          type: 'boolean'
          description: 'Is this channel limited sending rate? (Computed by using muteTimeout).'
        muteTimeout:
          type: 'string'
          description: 'The date/time to suppress muteness.'
          format: 'date-time'
        rateLimit:
          type: 'integer'
          description: 'Number of messages within rate limit.'
        rateLimitWindow:
          type: 'integer'
          description: 'Waiting time interval before reset rateLimit to 0.'
        rateLimitTimeout:
          type: 'string'
          description: 'The date/time to suppress limitation of sending rate.'
          format: 'date-time'
        displayName:
          type: 'string'
          description: 'Channel name for displaying.'
        messageAutoDeleteEnabled:
          type: 'boolean'
          description: 'Is message in this channel will be deleted when the user flagged until flag limit?'
        autoDeleteMessageByFlagLimit:
          type: 'number'
          description: 'Number of flags that will force a message to be deleted automatically.'
        memberCount:
          type: 'integer'
          description: 'Number of members in channel.'
        messageCount:
          type: 'integer'
          description: 'Number of messages in channel.'
        lastActivity:
          type: 'string'
          description: 'The date/time when a user last did something related to the channel such as add/remove members .'
          format: 'date-time'
        createdAt:
          type: 'string'
          description: 'The date/time when a channel is created.'
          format: 'date-time'
        updatedAt:
          type: 'string'
          description: 'The date/time when a channel is updated.'
          format: 'date-time'
        avatar:
          $ref: './schema/file.yaml#/File'
      required:
        - 'channelId'
        - 'createdAt'
        - 'updatedAt'
    ChannelUser:
      type: 'object'
      properties:
        channelId:
          type: 'string'
        userId:
          type: 'string'
        roles:
          type: 'array'
          items:
            type: 'string'
        readToSegment:
          type: 'integer'
        membership:
          $ref: '#/components/schemas/ChannelMembership'
        isBanned:
          type: 'boolean'
        isMuted:
          type: 'boolean'
        muteTimeout:
          type: 'string'
          format: 'date-time'
        lastActivity:
          type: 'string'
          format: 'date-time'
        createdAt:
          type: 'string'
          format: 'date-time'
        updatedAt:
          type: 'string'
          format: 'date-time'
      required:
        - 'userId'
        - 'channelId'
        - 'createdAt'
        - 'updatedAt'
    Comment:
      $ref: './schema/comment.yaml#/Comment'
    Community:
      $ref: './schema/community.yaml#/Community'
    CommunityUser:
      $ref: './schema/community.yaml#/CommunityUser'
    CommunityCategory:
      $ref: './schema/community.yaml#/CommunityCategory'
    Message:
      $ref: './schema/message.yaml#/Message'
    Reaction:
      $ref: './schema/reaction.yaml#/Reaction'
    ShortUser:
      $ref: './schema/user.yaml#/ShortUser'
    Network:
      type: 'object'
      properties:
        _id:
          type: 'string'
          description: 'ID of a network.'
        name:
          type: 'string'
          description: 'network name'
        defaultMessageAutoDeleteEnabled:
          type: 'boolean'
          description: 'Is message in this channel will be deleted when the user flagged until flag limit?'
        defaultAutoDeleteMessageByFlagLimit:
          type: 'number'
          min: 1
          example: 1
          description: 'Number of flags that will force a message to be deleted automatically.'
        createdAt:
          type: 'string'
          description: 'The date/time when a network is created.'
          format: 'date-time'
        updatedAt:
          type: 'string'
          description: 'The date/time when a network is created.'
          format: 'date-time'
      required:
        - 'referenceId'
        - 'referenceType'
    BlacklistRule:
      type: 'object'
      properties:
        ruleId:
          type: 'string'
        regex:
          type: 'string'
          description: 'Rule of blacklist.'
        isMatchExactWord:
          type: 'boolean'
        isEnabled:
          type: 'boolean'
          description: 'A flag to enabled a rule.'
        isDeleted:
          type: 'boolean'
          description: 'A flag to deleted a rule.'
        createdAt:
          type: 'string'
          description: 'The date/time when a rule is created.'
          format: 'date-time'
        updatedAt:
          type: 'string'
          description: 'The date/time when a rule is updated or deleted.'
          format: 'date-time'
      required:
        - 'regex'
    WhitelistRule:
      type: 'object'
      properties:
        ruleId:
          type: 'string'
        regex:
          type: 'string'
          description: 'Rule of whitelist.'
        isEnabled:
          type: 'boolean'
          description: 'A flag to enabled a rule.'
        isDeleted:
          type: 'boolean'
          description: 'A flag to deleted a rule.'
        createdAt:
          type: 'string'
          description: 'The date/time when a rule is created.'
          format: 'date-time'
        updatedAt:
          type: 'string'
          description: 'The date/time when a rule is updated or deleted.'
          format: 'date-time'
      required:
        - 'regex'
    Role:
      type: 'object'
      properties:
        permissions:
          type: 'array'
          items:
            type: 'string'
        publicId:
          type: 'string'
      required:
        - 'publicId'
    ModerationSetting:
      type: 'object'
      properties:
        maxRepetition:
          type: 'integer'
        maxRepetitionTimeout:
          type: 'integer'
        blacklistMuteTimeout:
          type: 'integer'
        whitelistMuteTimeout:
          type: 'integer'
        maxRepetitionMuteTimeout:
          type: 'integer'
        enableImageModeration:
          type: 'boolean'
        imageModeration:
          type: 'object'
          properties:
            nudity:
              type: 'number'
            suggestive:
              type: 'number'
            violence:
              type: 'number'
            disturbing:
              type: 'number'
        createdAt:
          type: 'string'
          description: 'The date/time when a rule is created.'
          format: 'date-time'
        updatedAt:
          type: 'string'
          description: 'The date/time when a rule is updated or deleted.'
          format: 'date-time'
    Error:
      type: 'object'
      properties:
        status:
          type: 'string'
        code:
          type: 'string'
        message:
          type: 'string'
    File:
      $ref: './schema/file.yaml#/File'
    Follow:
      $ref: './schema/follow.yaml#/Follow'
    FollowCount:
      $ref: './schema/follow.yaml#/FollowCount'
  securitySchemes:
    ApiKeyAuth:
      type: 'apiKey'
      in: 'header'
      name: 'X-API-Key'
    SocketAuth:
      type: 'apiKey'
      in: 'query'
      name: 'token'
    BearerAuth:
      type: 'http'
      scheme: 'bearer'
  responses:
    SuccessResponse:
      description: 'Success response.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
    IsFlagByMeResponse:
      description: 'Is flag by me response.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  isFlagByMe:
                    type: 'boolean'
    IsPushNotifiableResponse:
      description: 'Is push notifiable response.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  isPushNotifiable:
                    type: 'boolean'
    ChannelResultsResponse:
      description: 'Channels Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  results:
                    type: 'array'
                    items:
                      type: 'object'
                      properties:
                        channel:
                          $ref: '#/components/schemas/Channel'
                        channelUser:
                          $ref: '#/components/schemas/ChannelUser'
    ChannelResultResponse:
      description: 'Channel Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  results:
                    type: 'object'
                    properties:
                      channel:
                        $ref: '#/components/schemas/Channel'
                      channelUser:
                        $ref: '#/components/schemas/ChannelUser'
    ChannelResponse:
      description: 'Channel response.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              isDistinct:
                type: 'boolean'
              type:
                $ref: '#/components/schemas/ChannelType'
                description: 'Type of a channel (standard, conversation, broadcast). This property is not be used for now.'
              metadata:
                type: 'object'
                description: 'Additional properties to support custom fields.'
              tags:
                type: 'array'
                description: 'List of tags. They will be used for searching.'
                items:
                  type: 'string'
              isMuted:
                type: 'boolean'
                description: 'Is this channel muted? (Computed by using muteTimeout).'
              lastActivity:
                type: 'string'
                description: 'The date/time when a user last did something related to the channel such as add/remove members .'
                format: 'date-time'
              createdAt:
                type: 'string'
                description: 'The date/time when a channel is created.'
                format: 'date-time'
              updatedAt:
                type: 'string'
                description: 'The date/time when a channel is updated.'
                format: 'date-time'
              isRateLimited:
                type: 'boolean'
                description: 'Is this channel limited sending rate? (Computed by using muteTimeout).'
              rateLimitWindow:
                type: 'integer'
                description: 'Waiting time interval before reset rateLimit to 0.'
              channelId:
                type: 'string'
                description: 'ID of a channel.'
              muteTimeout:
                type: 'string'
                description: 'The date/time to suppress muteness.'
                format: 'date-time'
              rateLimit:
                type: 'integer'
                description: 'Number of messages within rate limit.'
              rateLimitTimeout:
                type: 'string'
                description: 'The date/time to suppress limitation of sending rate.'
                format: 'date-time'
              displayName:
                type: 'string'
                description: 'Channel name for displaying.'
              messageAutoDeleteEnabled:
                type: 'boolean'
                description: 'Is message in this channel will be deleted when the user flagged until flag limit?'
              autoDeleteMessageByFlagLimit:
                type: 'number'
                description: 'Number of flags that will force a message to be deleted automatically.'
              memberCount:
                type: 'integer'
                description: 'Number of members in channel.'
              messageCount:
                type: 'integer'
                description: 'Number of messages in channel.'
              avatar:
                $ref: './schema/file.yaml#/File'
    ChannelUserResponse:
      description: 'Channel User response.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              results:
                type: 'array'
                items:
                  $ref: '#/components/schemas/ChannelUser'
    UsersResponse:
      description: 'Users Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  results:
                    type: 'array'
                    items:
                      $ref: './schema/user.yaml#/User'
    UserResponse:
      description: 'User Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                $ref: './schema/user.yaml#/User'
    NetworkResponse:
      description: 'Network information.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Network'
    BlacklistRulesResponse:
      description: 'rules of blacklist Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  results:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/BlacklistRule'
    BlacklistRuleResponse:
      description: 'rule of blacklist Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                $ref: '#/components/schemas/BlacklistRule'
    WhitelistRulesResponse:
      description: 'rules of whitelist Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  results:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/BlacklistRule'
    WhitelistRuleResponse:
      description: 'rule of whitelist Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                $ref: '#/components/schemas/BlacklistRule'
    RolesResponse:
      description: 'Roles information.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  moderatonSettings:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/ModerationSetting'
                  roles:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/Role'
    UserByAdminsResponse:
      description: 'Users information.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  users:
                    type: 'array'
                    items:
                      type: 'object'
                      properties:
                        info:
                          type: 'object'
                          properties:
                            publicId:
                              type: 'string'
                            roleIds:
                              type: 'array'
                              items:
                                type: 'string'
                            roles:
                              type: 'array'
                              items:
                                type: 'string'
                            displayName:
                              type: 'string'
                            isGlobalBan:
                              type: 'boolean'
                            metadata:
                              type: 'object'
                            flagCount:
                              type: 'integer'
                  roles:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/Role'
    ModerationSettingResponse:
      description: 'Moderation Setting Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                $ref: '#/components/schemas/ModerationSetting'
    UnexpectedError:
      description: 'Unexpected error.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 500
            message: 'Unexpected error'
    NotFoundError:
      description: 'Resource Not Found error.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 404
            message: 'Resource Not Found.'
    BadRequestError:
      description: 'Bad Request error.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 400
            message: 'Bad Request.'
    ChannelNotFoundError:
      description: 'Channel Not Found error.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 404
            message: 'Channel Not Found.'
    PermissionDenidedError:
      description: 'Permission denied.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 403
            message: 'User is not a member of a channel'
    UserIsBannedError:
      description: 'User is banned from a channel / community.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 400304
            message: 'User is banned from a channel / community.'
    RateLimitError:
      description: 'Error due to a client create the same request with the same parameters exceed the number of time that server limit to.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 429
            message: 'RateLimit Exceed.'
    UserNotFoundError:
      description: 'User Not Found error.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 404
            message: 'User Not Found.'
    NumberOfFlagExceedError:
      description: 'Error when too many user is already flagged message.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 403
            message: 'Number of flag already exceed.'
    ForbiddenAvatarError:
      description: 'Put file type not image into avatar'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 403
            message: 'Avatar must be an image.'
    UserNotJoinError:
      description: 'User is not join community.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 401
            message: 'User ${userId} is not join this community ${communityId}'
    UserIsUnbannedError:
      description: 'User is unbanned from a channel / community.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#/Error'
          example:
            status: 'error'
            code: 400316
            message: 'User is unbanned from a channel / community.'
