openapi: "3.0.0"
info:
  title: "Amity Social Cloud SDK"
  description: "<h2>Using Amity APIs</h2><p>\n\nOur API documentation explains all API endpoints used in Amity Social Cloud. All APIs, with the exception of some\nauthentication APIs, require an access token for authentication and authorization. APIs can be used either in Admin\nor User context. When used in user context, you will only be able to fetch data related to that user only.\nFor Administrators who are using our API documentation in making server-to-server API calls, you need an Admin\nAccess token to connect to the Amity server. Refer to<a href="\&quot;https:/docs.amity.co/console/settings#admin-api-access-token\&quot;" target="\&quot;_blank\&quot;">this documentation</a>\nfor the instructions on how to generate an admin access token.\n\nAll backend endpoints that support Amity SDK are included here. To easily differentiate the type of each endpoint,\nwe added a prefix in each endpoint's path.\n\n1. REST API Endpoint: /v1/, /v2/, /v3/, or /v4/...\n4. Webhook Event: /webhook/...\n\n</p><h2><strong>Schema Definitions</strong></h2><p>his section provides detailed descriptions of the key schemas used in Amity Social Cloud. Understanding these schemas is essential for effectively integrating our features into your applications. Each schema entry includes a concise description and highlights its core functionality and relationships within the platform. These definitions will help you grasp the structure and purpose of various components, ensuring a seamless and efficient development experience.</p><hr><h4><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Scheme: User</span></span></strong></h4><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">A User represents an individual who interacts with the Amity Social Cloud. Users can create profiles, join communities, post content, comment, react, and engage with other users.</span></span></span></p><hr><h4><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Schema: Role</span></span></strong></h4><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">A Role defines the permissions and access levels for Users within the Amity Social Cloud. Roles can be assigned to manage and moderate content, ensuring a controlled and safe environment for all users.</span></span></span></p><hr><h4><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Scheme: Channel</span></span></strong></h4><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">A Channel is a primary structure used to implement various chat messaging capabilities within an application. Channels serve as containers for Subchannels, enabling a hierarchical organization of conversations. This structure allows developers to manage and navigate different chat threads efficiently.</span></span></span></p><hr><h4><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Scheme: Subchannel</span></span></strong></h4><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">A Subchannel is a subdivision within a Channel for specific conversation threads. Subchannels host all messages and interactions, providing organized discussions within a larger channel. Users can individually create, update, delete, and manage subchannels. Moderation actions, such as banning and muting, are applied at the channel level, affecting all subchannels</span></span></span></p><hr><h4><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Schema: ChannelUser</span></span></strong></h4><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">A ChannelUser represents an individual user within a specific Channel. This schema tracks user participation, roles, and permissions within the channel. Each ChannelUser can interact in subchannels, participate in discussions, and engage with other members. Users can be assigned roles with varying permissions, such as admin, moderator, or member, allowing for tailored access and control. Moderation actions like banning or muting a ChannelUser affect their participation across all subchannels within the channel.&nbsp;</span></span></span></p><hr><h4><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Schema: Message</span></span></strong></h4><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">A Message facilitates real-time communication among channel users. Messages can contain up to 20,000 characters or weigh up to 100KB for custom content. For larger binary data, such as files, it's recommended to upload the data to a cloud storage service like AWS S3 and include the URL in the message. The SDK supports various message types, including text and image, built on a standard message layer.&nbsp;</span></span></span></p><hr><h4><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Scheme: Community</span></span></strong></h4><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">A Community is a feature that allows users to share their posts and comments and engage with each other within the app. Communities provide a dedicated space for discussing specific topics or interests.</span></span></span></p><hr><h4><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Schema: CommunityUser</span></span></strong></h4><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">&nbsp; A CommunityUser represents an individual user within a specific Community. This schema tracks user participation, roles, and interactions within the community. CommunityUsers can join public or private communities, participate in discussions, and engage with other members. Each user can have different roles with varying permissions, such as admin, moderator, or member, which control their access and actions within the community. Moderation actions, like banning or muting, can be applied to CommunityUsers to maintain a safe and respectful environment.&nbsp;</span></span></span></p><hr><h4><strong><span style="vertical-align:inherit">Schema: CommunityCategory</span></strong></h4><p><strong><span style="vertical-align:inherit">Description:</span></strong><span style="font-weight:400"><span style="vertical-align:inherit">A CommunityCategory helps organize and manage communities by categorizing them into specific groups. This categorization allows users to easily sort and filter communities based on their interests or needs.</span></span></p><hr><h4><strong><span style="vertical-align:inherit">Scheme: Post</span></strong></h4><p><strong><span style="vertical-align:inherit">Description:</span></strong><span style="font-weight:400"><span style="vertical-align:inherit">A Post is a piece of content created and shared by a user within a network or community. Posts can include text, images, videos, or other elements. Users can create, view, and interact with posts in a social feed, which can be displayed in chronological order and customized using various settings. Post types supported by Amity include text, image, video, file, live stream, poll, and custom posts. The parent post serves as a container for text data, while each multimedia element (eg, image, video) is treated as a separate child post. Both parent and child posts support reactions and comments, allowing users to engage comprehensively with content.</span></span></p><hr><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Schema: Comment</span></span></strong></p><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">A Comment in Amity Social Cloud is a user-generated response to specific content, such as a post or story. Comments enable users to engage in conversations, express thoughts, opinions, and emotions, fostering a sense of community around the content.</span></span></span></p><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Comment Reference Types:</span></span></strong></p><ul><li style="font-weight:400" aria-level="1"><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Post Type Comment:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">Designed for regular posts like text updates, photos, or videos. These comments are associated with the post and displayed beneath it, promoting conversation and interaction.</span></span></span></li><li style="font-weight:400" aria-level="1"><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Story Type Comment:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">Similar to post type comments but associated with stories, driving user engagement and discussion around short-lived content.</span></span></span></li><li style="font-weight:400" aria-level="1"><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Content Type Comment:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">Intended for content-specific such as articles or specialized content, providing a more organized and contextual commenting experience.</span></span></span></li></ul><hr><h4><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Scheme: Reaction</span></span></strong></h4><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">A Reaction is a user interaction on messages, posts, or comments, such as like, dislike, or love. The type of reactions is customizable. Currently, reactions are supported for Posts, Messages, and Comments.</span></span></span></p><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Reaction Reference Types:</span></span></strong></p><ul><li style="font-weight:400" aria-level="1"><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Comment Reference Type:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">Allows users to query reactions on a specific comment, showing how others have responded to it.</span></span></span></li><li style="font-weight:400" aria-level="1"><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Post Reference Type:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">Allows users to query reactions on a specific post, highlighting user engagement with the post.</span></span></span></li><li style="font-weight:400" aria-level="1"><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Story Reference Type:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">Allows users to query reactions on a specific story, showing user reactions to the story.</span></span></span></li></ul><hr><h4><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Scheme: File</span></span></strong></h4><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">&nbsp; A File in Amity Social Cloud supports file upload and download, enabling file-sharing within applications. It handles various file types, including images, videos, audio, and documents, with a maximum size of 1 GB. This functionality allows users to share files directly in chats or social feeds, enhancing engagement and interaction.&nbsp;</span></span></span></p><hr><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Schema: Follow</span></span></strong></p><p><strong><span style="vertical-align:inherit"><span style="vertical-align:inherit">Description:</span></span></strong><span style="font-weight:400"><span style="vertical-align:inherit"><span style="vertical-align:inherit">&nbsp; A Follow schema in Amity Social Cloud defines one-directional relationships between users, essential for social networking features. When user A follows user B, user A can see user B's updates in their feed, but user B does not need to reciprocate. This schema helps manage visibility and accessibility of user-generated content in user feeds.</span></span></span></p><hr><h2>Select Region Endpoint</h2><p>\n\nBefore making server-to-server API calls, be sure to select the correct API endpoint for your region in\nthe<strong>Servers</strong>dropdown below.\n</p>"
  version: "4.79.0"
servers:
  - url: "https://apix.us.amity.co"
    description: "API Endpoint for US Region"
  - url: "https://apix.eu.amity.co"
    description: "API Endpoint for EU Region"
  - url: "https://apix.sg.amity.co"
    description: "API Endpoint for SG Region"
paths:
  /api/v1/analytics/activities:
    post:
      summary: send analytic activities
      description:
        "Send a batch of analytic activities to the server, currently only support viewing post/story and story link clicked activities.
        \n - For viewing post/story activity, the `impression` and `reach` of the post/story will be updated list
        of users from `/api/v1/analytics/views/posts/{postId}/users` will be updated too. (but not immediately)"
      tags:
        - Analytic
      security:
        - BearerAuth: []
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                activities:
                  type: array
                  minItems: 1
                  maxItems: 1000
                  items:
                    type: object
                    properties:
                      contentId:
                        type: string
                        pattern: '^[a-f\d]{24}$'
                        example: 60e4b1b4b3b2b5c4c4b3b2b5
                      contentType:
                        type: string
                        enum: [post, story]
                      activityType:
                        type: string
                        enum: [view, linkClicked]
                      timestamp:
                        type: string
                        format: date-time
                        example: 2017-07-21T17:32:28Z
      responses:
        202:
          description: ok, not returning any data
        400:
          $ref: "./global/error.yaml#/BadRequestError"
        422:
          $ref: "./global/error.yaml#/UnProcessableError"
        500:
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v1/analytics/views/posts/{postId}/users:
    get:
      summary: query post reach
      description:
        "Query a list of users who have viewed certain post, the user who have been global banned,
        community banned, or soft deleted will be excluded from the list of users. And if the post is soft deleted,
        post owner will be able to view this list, but others can not."
      tags:
        - Analytic
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-f\d]{24}$'
            example: 60e4b1b4b3b2b5c4c4b3b2b5
        - name: token
          in: query
          schema:
            type: string
            maxLength: 1000
            example: "eyJhZnRlciI6eyJfaWQiOnsicG9zdElkIjoiNjUxNjZlZTNlOTVlZTQ4YjkzZWVkMjQ1IiwidXNlcklkIjoiNjUxNjZlZTRlOTVlZTQzZjgzZWVkMjViIn0sIm5ldHdvcmtJZCI6IjYwNmYzN2EzYWU2MDFlZjM3NGViYWEwMSIsInJlYWNoZWRBdCI6IjIwMjMtMDktMjlUMDY6Mjk6NTQuOTQ4WiJ9fQ=="
            description: token of the page that you need from either `next` or `prev` of `paging`
        - name: limit
          in: query
          schema:
            type: number
            default: 10
            description: number of user in a page
      responses:
        200:
          description: List of users who have viewed this posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "./schema/user.yaml#/UserV3"
                  files:
                    type: array
                    items:
                      $ref: "./schema/file.yaml#/File"
                  paging:
                    type: object
                    properties:
                      next:
                        type: string
                        example: "eyJhZnRlciI6eyJfaWQiOnsicG9zdElkIjoiNjUxNjZlZTNlOTVlZTQ4YjkzZWVkMjQ1IiwidXNlcklkIjoiNjUxNjZlZTRlOTVlZTQzZjgzZWVkMjViIn0sIm5ldHdvcmtJZCI6IjYwNmYzN2EzYWU2MDFlZjM3NGViYWEwMSIsInJlYWNoZWRBdCI6IjIwMjMtMDktMjlUMDY6Mjk6NTQuOTQ4WiJ9fQ=="
                      previous:
                        type: string
                        example: "eyJhZnRlciI6eyJfaWQiOnsicG9zdElkIjoiNjUxNjZlZTNlOTVlZTQ4YjkzZWVkMjQ1IiwidXNlcklkIjoiNjUxNjZlZTRlOTVlZTQzZjgzZWVkMjViIn0sIm5ldHdvcmtJZCI6IjYwNmYzN2EzYWU2MDFlZjM3NGViYWEwMSIsInJlYWNoZWRBdCI6IjIwMjMtMDktMjlUMDY6Mjk6NTQuOTQ4WiJ9fQ=="
        403:
          $ref: "./global/error.yaml#/ForbiddenError"
        404:
          $ref: "./global/error.yaml#/NotFoundError"
        422:
          $ref: "./global/error.yaml#/UnProcessableError"
        500:
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v1/analytics/views/stories/{storyId}/users:
    get:
      summary: query story reach
      description:
        "Query a list of users who have viewed certain story, the user who have been global banned,
        community banned, or soft deleted will be excluded from the list of users. And if the post is soft deleted,
        post owner will be able to view this list, but others can not."
      tags:
        - Analytic
      security:
        - BearerAuth: []
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-f\d]{24}$'
            example: 60e4b1b4b3b2b5c4c4b3b2b5
        - name: token
          in: query
          schema:
            type: string
            maxLength: 1000
            example: "eyJhZnRlciI6eyJfaWQiOnsicG9zdElkIjoiNjUxNjZlZTNlOTVlZTQ4YjkzZWVkMjQ1IiwidXNlcklkIjoiNjUxNjZlZTRlOTVlZTQzZjgzZWVkMjViIn0sIm5ldHdvcmtJZCI6IjYwNmYzN2EzYWU2MDFlZjM3NGViYWEwMSIsInJlYWNoZWRBdCI6IjIwMjMtMDktMjlUMDY6Mjk6NTQuOTQ4WiJ9fQ=="
            description: token of the page that you need from either `next` or `prev` of `paging`
        - name: limit
          in: query
          schema:
            type: number
            default: 10
            description: number of user in a page
      responses:
        200:
          description: List of users who have viewed this story
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "./schema/user.yaml#/UserV3"
                  files:
                    type: array
                    items:
                      $ref: "./schema/file.yaml#/File"
                  paging:
                    type: object
                    properties:
                      next:
                        type: string
                        example: "eyJhZnRlciI6eyJfaWQiOnsicG9zdElkIjoiNjUxNjZlZTNlOTVlZTQ4YjkzZWVkMjQ1IiwidXNlcklkIjoiNjUxNjZlZTRlOTVlZTQzZjgzZWVkMjViIn0sIm5ldHdvcmtJZCI6IjYwNmYzN2EzYWU2MDFlZjM3NGViYWEwMSIsInJlYWNoZWRBdCI6IjIwMjMtMDktMjlUMDY6Mjk6NTQuOTQ4WiJ9fQ=="
                      previous:
                        type: string
                        example: "eyJhZnRlciI6eyJfaWQiOnsicG9zdElkIjoiNjUxNjZlZTNlOTVlZTQ4YjkzZWVkMjQ1IiwidXNlcklkIjoiNjUxNjZlZTRlOTVlZTQzZjgzZWVkMjViIn0sIm5ldHdvcmtJZCI6IjYwNmYzN2EzYWU2MDFlZjM3NGViYWEwMSIsInJlYWNoZWRBdCI6IjIwMjMtMDktMjlUMDY6Mjk6NTQuOTQ4WiJ9fQ=="
        403:
          $ref: "./global/error.yaml#/ForbiddenError"
        404:
          $ref: "./global/error.yaml#/NotFoundError"
        422:
          $ref: "./global/error.yaml#/UnProcessableError"
        500:
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v3/authentication/token:
    get:
      summary: Get authentication token
      tags:
        - Authentication
      parameters:
        - name: x-server-key
          in: header
          required: true
          schema:
            type: string
            maxLength: 150
        - in: query
          name: userId
          schema:
            type: string
            maxLength: 100
          description: User id to get token for
      responses:
        "500":
          description: Put a wrong request parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  code:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      detail:
                        type: array
                        items:
                          type: string
              example:
                status: error
                code: 500000
                message: Parameters error.
                data:
                  detail:
                    - >-
                      The 'data.text' field length must be less than or equal to
                      20000 characters long.
        "200":
          description: Return string
          content:
            application/json:
              schema:
                type: string
                example: s9qne0wEqVb2e05271177748659f574a4e8ab85e08
        "403":
          description: No permission to access this resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  code:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      detail:
                        type: array
                        items:
                          type: string
              example:
                status: error
                code: 400300
                message: Forbidden error.
  /api/v4/authentication/token:
    post:
      summary: "Create authentication token for session creation API"
      tags:
        - "Authentication"
      parameters:
        - name: "x-server-key"
          in: "header"
          required: true
          schema:
            type: "string"
      description: "Create authentication token for session creation API. Token userId need to match userId when using it\n"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
                  description: "User id to assign this token"
      responses:
        "200":
          description: "Response payload"
          content:
            text/plain:
              schema:
                type: "string"
                example: "s9qne0wEqVb2e05271177748659f574a4e8ab85e08"
                description: "Use this token when create sessions"
        "401":
          description: "Unauthorized. Server key is invalid."
          content:
            text/plain:
              schema:
                type: "string"
                example: "Unauthorized"
                description: "Server key is invalid"
        "403":
          description: "Forbidden. Possibly that secure mode is disabled"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  message:
                    type: "string"
                  code:
                    type: "number"
                  data:
                    type: "object"
                    description: "error detail"
        "422":
          description: "Parameters validation error"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  message:
                    type: "string"
                  code:
                    type: "number"
                  data:
                    type: "object"
                    description: "error detail"

  /api/v2/channels/{channelId}/close:
    post:
      summary: "close channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      description: "Close channel\n"
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
        "403":
          $ref: "./global/error.yaml#/PermissionDenidedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v2/channel/{channelId}/mute:
    put:
      summary: "Mute channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      description: "Mute all users in channel for a specific period of time.\n"
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Information of channel to be muted and period\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                mutePeriod:
                  type: "number"
                  description: "mute period (milliseconds)"
              required:
                - "mutePeriod"
      responses:
        "200":
          $ref: "./v2/channel/response.yaml#/MuteApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v2/channel/{channelId}/users/mute:
    put:
      summary: "Mute user in channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      description: "Mute a user in channel for a specific period of time.\n"
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Information of channel to be muted and period\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userIds:
                  type: "array"
                  items:
                    type: "string"
                    maxLength: 50
                  maxItems: 100
                mutePeriod:
                  type: "number"
                  description: "mute period (milliseconds)"
              required:
                - "userIds"
                - "mutePeriod"
      responses:
        "200":
          $ref: "./v2/channel/response.yaml#/MuteApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v2/search/channels:
    get:
      tags:
        - "Channel"
      summary: "Search channels"
      description: "Retrieve channels based on search criteria"
      security:
        - BearerAuth: []
      parameters:
        - $ref: "./v2/search-channel/parameter.yaml#/Query"
        - $ref: "./v2/search-channel/parameter.yaml#/ExactMatch"
        - $ref: "./v2/search-channel/parameter.yaml#/IsMemberOnly"
        - $ref: "./v2/search-channel/parameter.yaml#/Types"
        - $ref: "./v2/search-channel/parameter.yaml#/Tags"
        - $ref: "./v2/search-channel/parameter.yaml#/Options"

      responses:
        "200":
          $ref: "./v2/search-channel/response.yaml#/SearchChannelResponse"
        "422":
          description: "Parameters validation error"
  /api/v3/channels:
    get:
      summary: "Query channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "keyword"
          in: "query"
          schema:
            type: "string"
            maxLength: 100
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
          description: "isDeleted:\n  * `null(default)` - Show both channel is actived and channel is inactived.\n  * `true` - Show channel is inactived only.\n  * `false` - Show channel is actived only.\n"
        - name: "tags"
          in: "query"
          schema:
            type: "array"
            maxItems: 10
            items:
              type: "string"
              maxLength: 100
        - name: "excludeTags"
          in: "query"
          schema:
            type: "array"
            maxItems: 10
            items:
              type: "string"
              maxLength: 100
        - name: "filter"
          in: "query"
          schema:
            type: "string"
            enum:
              - "all"
              - "member"
              - "notMember"
              - "flagged"
            default: "all"
        - name: "types"
          in: "query"
          schema:
            type: "array"
            maxItems: 10
            items:
              type: "string"
              enum:
                - "standard"
                - "private"
                - "conversation"
                - "broadcast"
                - "live"
                - "community"
        - name: "userId"
          in: "query"
          schema:
            type: "string"
            maxLength: 100
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "lastActivity"
              - "lastCreated"
              - "firstCreated"
              - "displayName"
            default: "lastActivity"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 100
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelPaginationApiResponse"
        "403":
          $ref: "./global/error.yaml#/PermissionDenidedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "Create channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      requestBody:
        description: "Information of channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                channelId:
                  type: "string"
                  maxLength: 100
                type:
                  type: "string"
                  enum:
                    - "community"
                    - "live"
                    - "broadcast"
                  default: "community"
                displayName:
                  type: "string"
                  maxLength: 100
                avatarFileId:
                  type: "string"
                  maxLength: 50
                metadata:
                  type: "object"
                tags:
                  type: "array"
                  maxItems: 10
                  items:
                    type: "string"
                    maxLength: 100
                userIds:
                  type: "array"
                  maxItems: 1000
                  items:
                    type: "string"
                    maxLength: 50
                isMuted:
                  type: "boolean"
                messageAutoDeleteEnabled:
                  type: "boolean"
                autoDeleteMessageByFlagLimit:
                  type: "number"
                  minimum: 1
                  maximum: 100
                isPublic:
                  type: "boolean"
                notificationMode:
                  type: string
                  enum:
                    - default
                    - silent
                    - subscribe
                  description: >
                    Notification Mode:
                      * `default` - Auto register push notification.
                      * `silent` - Do not send notification.
                      * `subscribe` - Send notification to subscribed users only.
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenAvatarError:
                  $ref: "./global/error-example.yaml#/ForbiddenAvatarError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/channels/{channelId}:
    get:
      summary: "get a channel by ID."
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "update a channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Information of channel to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                displayName:
                  type: "string"
                  maxLength: 100
                avatarFileId:
                  type: "string"
                  maxLength: 50
                metadata:
                  type: "object"
                tags:
                  type: "array"
                  maxItems: 10
                  items:
                    type: "string"
                    maxLength: 100
                messageAutoDeleteEnabled:
                  type: "boolean"
                autoDeleteMessageByFlagLimit:
                  type: "number"
                  minimum: 1
                  maximum: 100
                notificationMode:
                  type: string
                  enum:
                    - default
                    - silent
                    - subscribe
                  description: >
                    Notification Mode:
                      * `default` - Auto register push notification.
                      * `silent` - Do not send notification.
                      * `subscribe` - Send notification to subscribed users only.
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenAvatarError:
                  $ref: "./global/error-example.yaml#/ForbiddenAvatarError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "delete a channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      success:
                        type: "boolean"
        "403":
          $ref: "./global/error.yaml#/PermissionDenidedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/channels/{channelId}/join:
    post:
      summary: "join a channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenError:
                  $ref: "./global/error-example.yaml#/ForbiddenError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/channels/{channelId}/leave:
    delete:
      summary: "leave a channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
                ForbiddenError:
                  $ref: "./global/error-example.yaml#/ForbiddenError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/channels/{channelId}/users:
    get:
      summary: "query channel users"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "roles"
          in: "query"
          schema:
            type: "array"
            minItems: 1
            maxItems: 20
            items:
              type: "string"
              minLength: 1
              maxLength: 900
          description: "Role to filter"
        - name: "filter"
          in: "query"
          schema:
            type: "string"
            enum:
              - "all"
              - "muted"
              - "banned"
              - "member&banned"
            default: "all"
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "lastCreated"
              - "firstCreated"
            default: "lastCreated"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 100
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelPaginationApiResponse"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "add channel users"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userIds:
                  type: "array"
                  minItems: 1
                  maxItems: 100
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 50
              required:
                - "userIds"
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenError:
                  $ref: "./global/error-example.yaml#/ForbiddenError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "remove channel users"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
        - in: query
          name: userIds
          schema:
            type: "array"
            minItems: 1
            maxItems: 100
            items:
              type: "string"
              minLength: 1
              maxLength: 50
          description: list of user id
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenError:
                  $ref: "./global/error-example.yaml#/ForbiddenError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/channels/{channelId}/users/ban:
    put:
      summary: "ban channel users"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userIds:
                  type: "array"
                  minItems: 1
                  maxItems: 100
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 50
              required:
                - "userIds"
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenError:
                  $ref: "./global/error-example.yaml#/ForbiddenError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/channels/{channelId}/users/unban:
    put:
      summary: "unban channel users"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Information of channel\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userIds:
                  type: "array"
                  minItems: 1
                  maxItems: 100
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 50
              required:
                - "userIds"
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenError:
                  $ref: "./global/error-example.yaml#/ForbiddenError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/channels/{channelId}/users/roles:
    post:
      summary: "Add role to channel users"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                role:
                  type: "string"
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: "array"
                  minItems: 1
                  maxItems: 100
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 50
              required:
                - "userIds"
                - "role"
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                GenericPermissionDenidedError:
                  $ref: "./global/error-example.yaml#/GenericPermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "Remove role from channel users"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
        - in: query
          name: userIds
          schema:
            type: "array"
            minItems: 1
            maxItems: 100
            items:
              type: "string"
              minLength: 1
              maxLength: 50
          description: list of user id
        - in: query
          name: role
          schema:
            type: string
            minLength: 1
            maxLength: 900
          description: User id for revocation
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                GenericPermissionDenidedError:
                  $ref: "./global/error-example.yaml#/GenericPermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/channels/conversation:
    post:
      summary: "create a conversation channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      requestBody:
        description: "Information of conversation channel to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userIds:
                  type: "array"
                  maxItems: 10
                  items:
                    type: "string"
                    maxLength: 50
                isDistinct:
                  type: "boolean"
                  default: true
                displayName:
                  type: "string"
                  maxLength: 100
                avatarFileId:
                  type: "string"
                  maxLength: 50
                metadata:
                  type: "object"
                tags:
                  type: "array"
                  maxItems: 10
                  items:
                    type: "string"
                    maxLength: 100
              required:
                - "userIds"
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenAvatarError:
                  $ref: "./global/error-example.yaml#/ForbiddenAvatarError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/channels/list:
    get:
      summary: "get list of channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      description: "Get list of channel\n"
      parameters:
        - name: "channelIds"
          in: "query"
          required: true
          schema:
            type: "array"
            maxItems: 10
            items:
              type: "string"
              maxLength: 50
      responses:
        "200":
          $ref: "./v3/channel/response.yaml#/ChannelsApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/channels/{channelId}/seen:
    post:
      summary: "Mark user message read position inside channel"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      description: "Mark user message read position inside channel\n"
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Segment of the message\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                readToSegment:
                  type: "number"
              required:
                - "readToSegment"
      responses:
        "200":
          description: "OK"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/channels/{channelId}/users:
    get:
      summary: "query channel users"
      tags:
        - "Channel"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
        - name: "role"
          in: "query"
          schema:
            type: "array"
            description: "Role to filter"
            minItems: 1
            maxItems: 20
            items:
              type: "string"
              minLength: 1
              maxLength: 900
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "lastCreated"
              - "firstCreated"
            default: "lastCreated"
        - name: "memberships"
          in: "query"
          schema:
            type: "array"
            description: "Member type to filter - member type: User is member of channel - banned type: User is banned member of channel - muted type: User is member of channel but isMuted is true\n"
            minItems: 1
            maxItems: 3
            items:
              type: "string"
              enum:
                - "muted"
                - "banned"
                - "member"
            default:
              - "member"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
          description: "use updatedAt when sort by first/lastUpdated"
        - name: "search"
          in: "query"
          schema:
            type: "string"
            minLength: 0
            maxLength: 10000
      responses:
        "200":
          $ref: "./v4/channel/response.yaml#/ChannelPaginationApiResponse"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v3/comments:
    get:
      summary: "query comments (pagination support)."
      tags:
        - "Comment"
      security:
        - ApiKeyAuth: []
      description: "query comments.\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "referenceId"
          required: true
          in: "query"
          schema:
            type: "string"
            maxLength: 900
        - name: "referenceType"
          in: "query"
          schema:
            type: "string"
            enum:
              - "post"
              - "content"
              - "story"
        - name: "filterByParentId"
          in: "query"
          schema:
            type: "boolean"
            default: true
        - name: "parentId"
          in: "query"
          schema:
            type: "string"
            maxLength: 900
        - name: "hasFlag"
          in: "query"
          schema:
            type: "boolean"
            default: false
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
              - "lastUpdated"
              - "firstUpdated"
            default: "lastCreated"
          description: "type:\n  * `scrollable(default)` - sort by segment number only.\n  * `pagination` - can sort by 'lastCreated(default)', 'firstCreated', 'lastUpdated', 'firstUpdated'.\n"
        - name: "options"
          in: "query"
          style: "deepObject"
          description: "type:\n  * `scrollable(default)` - 'after', 'first', 'before' and 'last' will be set for page size with direction.\n  * `pagination` - 'skip' and 'limit' will be the number of records to skip and max records size.\n\nlimit/skip:\n  * support pagination type only\n\nbefore/after/first/last:\n  * support scrollable type only\n"
          schema:
            type: "object"
            properties:
              type:
                type: "string"
                enum:
                  - "scrollable"
                  - "pagination"
                default: "scrollable"
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
              skip:
                type: "integer"
                minimum: 0
                maximum: 100
              after:
                type: "integer"
                minimum: 1
              first:
                type: "integer"
                minimum: 1
                maximum: 100
              before:
                type: "integer"
                minimum: 1
              last:
                type: "integer"
                minimum: 1
                maximum: 100
              token:
                type: "string"
                maxLength: 1000
        - name: "dataTypes"
          in: "query"
          style: "deepObject"
          description: "Option to set how the returned comments dataTypes will be contained:\n  * `values`: the dataTypes values want to be contained in the comment (available values: `text`, `image`)\n  * `matchType`: how the dataTypes must be contained in the comment\n    * `any`: the dataTypes could match only partial of the provided field\n    * `exact`: the dataTypes must contain exactly the same as provided in values\n\nExample query params: `GET /api/v3/comments?dataTypes[values][]=text&dataTypes[values][]=image&dataTypes[matchType]=any`\n"
          schema:
            type: "object"
            properties:
              values:
                type: "array"
                items:
                  type: "string"
              matchType:
                type: "string"
                enum:
                  - "any"
                  - "exact"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentPaginationApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "create a comment."
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      requestBody:
        description: "information of a comment to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                referenceId:
                  type: "string"
                  maxLength: 900
                referenceType:
                  type: "string"
                  enum:
                    - "post"
                    - "content"
                    - "story"
                  default: "post"
                data:
                  type: "object"
                  properties:
                    text:
                      type: "string"
                      maxLength: 50000
                metadata:
                  type: "object"
                commentId:
                  type: "string"
                  maxLength: 900
                parentId:
                  type: "string"
                  maxLength: 900
                mentionees:
                  type: "array"
                  description: "The object of the mentions type and user who get a notification from the post."
                  items:
                    type: "object"
                    properties:
                      type:
                        type: "string"
                        example: "user"
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - "user"
                      userIds:
                        type: "array"
                        example:
                          - "userId1"
                          - "userId2"
                        description: "Array of UserId. if the mention type is a channel, doesn't send userIds"
                        items:
                          type: "string"
                createdAt:
                  type: "string"
                  description: "The date/time when a comment is created."
                  format: "date-time"
                  example: "2022-07-07T04:24:20.444Z"
                attachments:
                  type: "array"
                  description: "The attachments/medias to be included in the comment"
                  items:
                    $ref: "./schema/comment.yaml#/CommentAttachment"
              required:
                - "referenceId"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/comments/{commentId}:
    get:
      summary: "get a comment."
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      description: "get a comment.\n"
      parameters:
        - name: "commentId"
          in: "path"
          required: true
          description: "Get comment by ID.\n"
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "update a comment."
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      parameters:
        - name: "commentId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "comment information.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                data:
                  type: "object"
                  properties:
                    text:
                      type: "string"
                      maxLength: 50000
                metadata:
                  type: "object"
                mentionees:
                  type: "array"
                  description: "The object of the mentions type and user who get a notification from the post."
                  items:
                    type: "object"
                    properties:
                      type:
                        type: "string"
                        example: "user"
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - "user"
                      userIds:
                        type: "array"
                        example:
                          - "userId1"
                          - "userId2"
                        description: "Array of UserId. if the mention type is a channel, doesn't send userIds"
                        items:
                          type: "string"
                attachments:
                  type: "array"
                  description: "The attachments/medias to be included in the comment"
                  items:
                    $ref: "./schema/comment.yaml#/CommentAttachment"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "delete a comment."
      deprecated: true
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      parameters:
        - name: "commentId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "comment information"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      success:
                        type: "boolean"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/comments/{commentId}/flag:
    post:
      summary: "flag a comment."
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      parameters:
        - name: "commentId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "information of a comment to be flagged.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                commentId:
                  type: "string"
                  maxLength: 900
              required:
                - "commentId"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentApiResponse"
        "403":
          $ref: "./global/error.yaml#/NumberOfFlagExceedError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/comments/{commentId}/isflagbyme:
    get:
      summary: "Check whether user flag a given comment."
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      parameters:
        - name: "commentId"
          in: "path"
          required: true
          description: "commentId to be flagged\n"
          schema:
            type: "string"
      description: "Check whether user flag a given comment.\n"
      responses:
        "200":
          $ref: "./global/response.yaml#/IsSocialFlagByMeResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
  /api/v3/comments/{commentId}/unflag:
    delete:
      summary: "unflag a comment."
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      parameters:
        - name: "commentId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentApiResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/comments/list:
    get:
      summary: "get comments by IDs."
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      description: "get comments by IDs.\n"
      parameters:
        - name: "commentIds"
          in: "query"
          required: true
          schema:
            type: "array"
            minItems: 1
            maxItems: 10
            items:
              type: "string"
              maxLength: 50
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/comments/{commentId}/flags:
    delete:
      summary: "clear flags."
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      parameters:
        - name: "commentId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentApiResponse"
        "403":
          $ref: "./global/error.yaml#/PermissionDenidedError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/comments/{commentId}:
    delete:
      summary: "delete a comment."
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      parameters:
        - name: "commentId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "permanent"
          in: "query"
          schema:
            type: "boolean"
            description: "If permanent data will be hard deleted"
      responses:
        "200":
          description: "comment information"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      success:
                        type: "boolean"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v3/communities:
    get:
      summary: "query communities."
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "query communities.\n"
      parameters:
        - name: "keyword"
          in: "query"
          schema:
            type: "string"
            minLength: 0
            maxLength: 100
        - name: "tags"
          in: "query"
          schema:
            type: "array"
            maxItems: 10
            items:
              type: "string"
              minLength: 1
              maxLength: 1000
        - name: "filter"
          in: "query"
          schema:
            type: "string"
            enum:
              - "all"
              - "member"
              - "notMember"
            default: "all"
        - name: "categoryId"
          in: "query"
          schema:
            type: "string"
            minLength: 50
            maxLength: 50
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
              - "displayName"
            default: "lastCreated"
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
          description: "isDeleted:\n  * `null(default)` - Show both community is actived and community is inactived.\n  * `true` - Show community is inactived only.\n  * `false` - Show community is actived only.\n"
        - name: "hasFlag"
          in: "query"
          schema:
            type: "boolean"
            default: null
          description: "hasFlag:\n    * `null(default)` - Show all communities.\n    * `true` - Show only community has flagged post(or children post) or has flagged comment.\n    * `false` - Show only community has no flagged post(and children post) and has no flagged comment.\n"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
              token:
                type: "string"
                maxLength: 1000
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityPaginationApiResponse"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "create a community."
      tags:
        - "Community"
      security:
        - BearerAuth: []
      requestBody:
        description: "information of a community to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                displayName:
                  type: "string"
                  minLength: 1
                  maxLength: 1000
                isPublic:
                  type: "boolean"
                  default: true
                isOfficial:
                  type: "boolean"
                  default: false
                onlyAdminCanPost:
                  type: "boolean"
                  default: false
                description:
                  type: "string"
                  minLength: 1
                  maxLength: 5000
                tags:
                  type: "array"
                  minItems: 1
                  maxItems: 10
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 1000
                metadata:
                  type: "object"
                avatarFileId:
                  type: "string"
                  maxLength: 50
                  minLength: 1
                userIds:
                  type: "array"
                  minItems: 1
                  maxItems: 1000
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 900
                categoryIds:
                  type: "array"
                  minItems: 1
                  maxItems: 10
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 50
                isUniqueDisplayName:
                  type: "boolean"
                  default: false
                needApprovalOnPostCreation:
                  type: "boolean"
                  default: false
                allowCommentInStory:
                  type: "boolean"
                  default: true
                notificationMode:
                  type: string
                  enum:
                    - default
                    - silent
                    - subscribe
                  description: >
                    Notification Mode:
                      * `default` - Auto register push notification.
                      * `silent` - Do not send notification.
                      * `subscribe` - Send notification to subscribed users only.
              required:
                - "displayName"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenError:
                  $ref: "./global/error-example.yaml#/ForbiddenError"
                DuplicateEntryError:
                  $ref: "./global/error-example.yaml#/DuplicateEntryError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/{communityId}:
    get:
      summary: "get a community by ID."
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "Get a community by ID\n"
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
        - name: "type"
          in: "query"
          schema:
            type: "string"
            enum:
              - "public"
              - "internal"
            default: "public"
          description: "type of communityId"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "update a community."
      tags:
        - "Community"
      security:
        - BearerAuth: []
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
      requestBody:
        description: "community information.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                communityId:
                  type: "string"
                  minLength: 1
                  maxLength: 900
                displayName:
                  type: "string"
                  minLength: 1
                  maxLength: 1000
                isPublic:
                  type: "boolean"
                isOfficial:
                  type: "boolean"
                onlyAdminCanPost:
                  type: "boolean"
                description:
                  type: "string"
                  minLength: 0
                  maxLength: 5000
                tags:
                  type: "array"
                  minItems: 1
                  maxItems: 10
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 1000
                metadata:
                  type: "object"
                avatarFileId:
                  type: "string"
                  maxLength: 50
                  minLength: 1
                categoryIds:
                  type: "array"
                  minItems: 1
                  maxItems: 10
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 50
                isUniqueDisplayName:
                  type: "boolean"
                  default: false
                needApprovalOnPostCreation:
                  type: "boolean"
                  default: false
                allowCommentInStory:
                  type: "boolean"
                  default: true
                notificationMode:
                  type: string
                  enum:
                    - default
                    - silent
                    - subscribe
                  description: >
                    Notification Mode:
                      * `default` - Auto register push notification.
                      * `silent` - Do not send notification.
                      * `subscribe` - Send notification to subscribed users only.
              required:
                - "communityId"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenError:
                  $ref: "./global/error-example.yaml#/ForbiddenError"
                DuplicateEntryError:
                  $ref: "./global/error-example.yaml#/DuplicateEntryError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "delete a community."
      tags:
        - "Community"
      security:
        - BearerAuth: []
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
      responses:
        "200":
          $ref: "./global/response.yaml#/DeleteApiResponse"
        "403":
          $ref: "./global/error.yaml#/PermissionDenidedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/{communityId}/join:
    post:
      summary: "Join a community"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "Join community by ID\n"
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "403":
          $ref: "./global/error.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/{communityId}/leave:
    delete:
      summary: "Leave a community."
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "Leave community by ID\n"
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "401":
          $ref: "./global/error.yaml#/UnAuthorizedError"
        "403":
          $ref: "./global/error.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/{communityId}/users:
    get:
      summary: "query community users"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "query community users.\n"
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "memberships"
          in: "query"
          schema:
            type: "array"
            description: "Membership type to filter (If not filter will return both banned user and member)"
            minItems: 1
            maxItems: 2
            items:
              type: "string"
              enum:
                - "banned"
                - "member"
        - name: "roles"
          in: "query"
          description: "Role to filter"
          schema:
            type: "array"
            minItems: 1
            maxItems: 20
            items:
              type: "string"
              minLength: 1
              maxLength: 100
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            description: >
              The default value depends on the 'search' parameter.
                * If 'search' parameter is not set, the default value is 'lastCreated'.
                * If 'search' parameter is set, the default value is 'displayName'.
            enum:
              - "firstCreated"
              - "lastCreated"
              - "displayName"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                minLength: 1
                maxLength: 1000
        - name: "search"
          description: "Input text for searching display name and user id"
          in: "query"
          schema:
            type: "string"
            maxLength: 10000
        - name: "type"
          in: "query"
          schema:
            type: "string"
            enum:
              - "public"
              - "internal"
            default: "public"
          description: "type of communityId"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityPaginationApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "add community users"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "add community users\n"
      parameters:
        - in: "path"
          name: "communityId"
          required: true
          schema:
            type: "string"
          description: "Community public id"
      requestBody:
        description: "information of a community.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userIds:
                  type: "array"
                  minItems: 1
                  maxItems: 100
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 50
              required:
                - "userIds"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "remove community users"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "remove community users\n"
      parameters:
        - in: "path"
          name: "communityId"
          required: true
          schema:
            type: "string"
            minimum: 1
        - in: query
          name: userIds
          required: true
          schema:
            type: "array"
            minItems: 1
            maxItems: 100
            items:
              type: "string"
              minLength: 1
              maxLength: 50
          description: list of user id
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "403":
          $ref: "./global/error.yaml#/PermissionDenidedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/{communityId}/users/ban:
    put:
      summary: "ban community users"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "ban community users.\n"
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userIds:
                  type: "array"
                  minItems: 1
                  maxItems: 100
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 900
              required:
                - "userIds"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                ExemptFromBanError:
                  $ref: "./global/error-example.yaml#/ExemptFromBanError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/{communityId}/users/unban:
    put:
      summary: "unban community users"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "unban community users.\n"
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
      requestBody:
        description: "condition for querying\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userIds:
                  type: "array"
                  minItems: 1
                  maxItems: 100
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 900
              required:
                - "userIds"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsUnbannedError:
                  $ref: "./global/error-example.yaml#/UserIsUnbannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/{communityId}/users/roles:
    post:
      summary: "Add role to community users"
      tags:
        - "Community"
      security:
        - ApiKeyAuth: []
      description: "Add role to community users.\n"
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                role:
                  type: "string"
                  minLength: 1
                  maxLength: 900
                userIds:
                  type: "array"
                  minItems: 1
                  maxItems: 100
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 50
              required:
                - "userIds"
                - "role"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                GenericPermissionDenidedError:
                  $ref: "./global/error-example.yaml#/GenericPermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "Remove role from community users"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "Remove role from community users.\n"
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
        - in: query
          name: userIds
          required: true
          schema:
            type: "array"
            minItems: 1
            maxItems: 100
            items:
              type: "string"
              minLength: 1
              maxLength: 50
          description: list of user id
        - in: query
          name: role
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 900
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                GenericPermissionDenidedError:
                  $ref: "./global/error-example.yaml#/GenericPermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/{communityId}/permissions/me:
    get:
      summary: "Get self permission in community"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "query comments.\n"
      parameters:
        - in: "path"
          name: "communityId"
          required: true
          schema:
            type: "string"
            minimum: 1
          description: "Community public id"
      responses:
        "200":
          description: "Communities permission information for this user"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  isCreator:
                    type: "boolean"
                    example: false
                    description: "Is this person create this community?"
                  permissions:
                    type: "array"
                    items:
                      $ref: "./schema/role.yaml#/PermissionEnum"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/list:
    get:
      summary: "get list of community"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "Get list of community\n"
      parameters:
        - name: "communityIds"
          in: "query"
          required: true
          schema:
            type: "array"
            minItems: 1
            maxItems: 100
            items:
              type: "string"
              maxLength: 50
        - name: "type"
          in: "query"
          schema:
            type: "string"
            enum:
              - "public"
              - "internal"
            default: "public"
          description: "type of communityId"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/recommended:
    get:
      summary: "get list of recommended community"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "Get list of recommended community\n"
      parameters:
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 5
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/communities/top-trending:
    get:
      summary: "get list of top trend community"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "Get list of top trend community\n"
      parameters:
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 5
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunitiesApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/communities/{communityId}/users/roles:
    post:
      summary: "Add roles to community users"
      tags:
        - "Community"
      security:
        - BearerAuth: []
      description: "Add roles to community users.\n"
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                roles:
                  type: "array"
                  minItems: 1
                  maxItems: 100
                  items:
                    description: "Role id"
                    type: "string"
                    minLength: 1
                    maxLength: 100
                userIds:
                  type: "array"
                  minItems: 1
                  maxItems: 100
                  items:
                    type: "string"
                    minLength: 1
                    maxLength: 50
              required:
                - "userIds"
                - "roles"
      responses:
        "200":
          $ref: "./v4/community/response.yaml#/CommunitiesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                GenericPermissionDenidedError:
                  $ref: "./global/error-example.yaml#/GenericPermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "Remove roles from community users"
      tags:
        - "Community"
      security:
        - ApiKeyAuth: []
      description: "Remove roles from community users.\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
        - in: query
          name: roles
          required: true
          schema:
            type: "array"
            minItems: 1
            maxItems: 100
            items:
              type: "string"
              description: "Role id"
              minLength: 1
              maxLength: 100
          description: list of role id
        - in: query
          name: userIds
          required: true
          schema:
            type: "array"
            minItems: 1
            maxItems: 100
            items:
              type: "string"
              minLength: 1
              maxLength: 50
          description: list of user id
      responses:
        "200":
          $ref: "./v4/community/response.yaml#/CommunitiesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                GenericPermissionDenidedError:
                  $ref: "./global/error-example.yaml#/GenericPermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v3/community-categories:
    get:
      summary: "query community categories."
      tags:
        - "Community category"
      security:
        - BearerAuth: []
      description: "query community categories.\n"
      parameters:
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
              - "name"
            default: "name"
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
      responses:
        "200":
          $ref: "./v3/community-category/response.yaml#/CommunityCategoriesResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "create a community categories."
      tags:
        - "Community category"
      security:
        - BearerAuth: []
      requestBody:
        description: "information of a community category to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  maxLength: 1000
                metadata:
                  type: "object"
                avatarFileId:
                  type: "string"
                  maxLength: 50
              required:
                - "name"
      responses:
        "200":
          $ref: "./v3/community-category/response.yaml#/CommunityCategoriesResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/community-categories/{categoryId}:
    get:
      summary: "get a community category."
      tags:
        - "Community category"
      security:
        - BearerAuth: []
      description: "get a community category.\n"
      parameters:
        - name: "categoryId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 50
      responses:
        "200":
          $ref: "./v3/community-category/response.yaml#/CommunityCategoriesResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "update a community categories."
      tags:
        - "Community category"
      security:
        - BearerAuth: []
      parameters:
        - name: "categoryId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "community category information.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                categoryId:
                  type: "string"
                  maxLength: 50
                name:
                  type: "string"
                  maxLength: 1000
                metadata:
                  type: "object"
                avatarFileId:
                  type: "string"
                  maxLength: 50
              required:
                - "categoryId"
      responses:
        "200":
          $ref: "./v3/community-category/response.yaml#/CommunityCategoriesResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "delete a community category."
      tags:
        - "Community category"
      security:
        - BearerAuth: []
      parameters:
        - name: "categoryId"
          in: "path"
          required: true
          schema:
            type: "string"
        - in: query
          name: categoryId
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 50
          description: Category id
      responses:
        "200":
          description: "community category information"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      success:
                        type: "boolean"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/community-categories/list:
    get:
      summary: "get list of community category."
      tags:
        - "Community category"
      security:
        - BearerAuth: []
      description: "Get list of community category.\n"
      parameters:
        - name: "categoryIds"
          in: "query"
          schema:
            type: "array"
            maxItems: 100
            items:
              type: "string"
              maxLength: 50
      responses:
        "200":
          $ref: "./v3/community-category/response.yaml#/CommunityCategoriesResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v1/me/following-feeds:
    get:
      summary: Get following feeds
      description: Get posts from your wall, people you follow and communities you join
      tags:
        - "Feed"
      security:
        - BearerAuth: []
      parameters:
        - $ref: "./v1/following-feed/parameters.yaml#/SortBy"
        - name: limit
          in: query
          required: false
          description: >
            Limit the number of posts returned
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: token
          in: query
          required: false
          description: >
            Token for pagination
          schema:
            type: string
            maxLength: 100
      responses:
        "200":
          description: Following feed Information
          content:
            application/json:
              schema:
                $ref: "./v1/following-feed/response.yaml#/QueryFollowingFeedResponsePayload"
        "422":
          description: "Parameters validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: "Parameters validation error"
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: "Unexpected error"
  /api/v3/content-feeds:
    get:
      summary: "Get list of contents."
      tags:
        - "Feed"
      security:
        - BearerAuth: []
      description: "Get paginable list of contents.\n"
      parameters:
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
              - "lastUpdated"
              - "firstUpdated"
            default: "lastCreated"
        - name: "hasFlag"
          in: "query"
          schema:
            type: "boolean"
            default: null
          description: "hasFlag:\n  * `null(default)` - Show all contents.\n  * `true` - Show only flagged content or has flagged comment.\n  * `false` - Show only no flagged content and has no flagged comment.\n"
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
      responses:
        "200":
          $ref: "./v3/content-feed/response.yaml#/ContentFeedResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/community-feeds/{communityId}:
    get:
      summary: "Get list of posts."
      tags:
        - "Feed"
      security:
        - BearerAuth: []
      description: "Get paginable list of posts.\n"
      parameters:
        - name: "communityId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
              - "lastUpdated"
              - "firstUpdated"
            default: "lastCreated"
        - name: "hasFlag"
          in: "query"
          schema:
            type: "boolean"
            default: false
          description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
        - name: "dataTypes"
          in: "query"
          schema:
            type: "array"
            minItems: 1
            maxItems: 4
            items:
              type: "string"
              enum:
                - "video"
                - "image"
                - "file"
                - "liveStream"
            description: "post data type to filter"
      responses:
        "200":
          $ref: "./v3/community-feed/response.yaml#/CommunityFeedResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "401":
          $ref: "./global/error.yaml#/UnAuthorizedError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/global-feeds:
    get:
      summary: "Get global feed."
      tags:
        - "Feed"
      security:
        - BearerAuth: []
      description: "Get paginable list of active posts (not deleted) from users and community.\n"
      parameters:
        - name: "showOnlyMyFeed"
          in: "query"
          schema:
            type: "boolean"
        - name: "dataTypes"
          in: "query"
          schema:
            type: "array"
            minItems: 1
            maxItems: 4
            items:
              type: "string"
              enum:
                - "video"
                - "image"
                - "file"
                - "liveStream"
            description: "post data type to filter"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
      responses:
        "200":
          $ref: "./v3/global-feed/response.yaml#/GlobalFeedResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/user-feeds/{userId}:
    get:
      summary: "Get list of posts."
      tags:
        - "Feed"
      security:
        - BearerAuth: []
      description: "Get paginable list of posts.\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
              - "lastUpdated"
              - "firstUpdated"
            default: "lastCreated"
        - name: "hasFlag"
          in: "query"
          schema:
            type: "boolean"
            default: null
          description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
        - name: "dataTypes"
          in: "query"
          schema:
            type: "array"
            minItems: 1
            maxItems: 4
            items:
              type: "string"
              enum:
                - "video"
                - "image"
                - "file"
                - "liveStream"
            description: "post data type to filter"
      responses:
        "200":
          $ref: "./v3/user-feed/response.yaml#/UserFeedResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/user-feeds/{userId}/count:
    get:
      summary: "Get number of post."
      tags:
        - "Feed"
      security:
        - BearerAuth: []
      description: "Get number of post.\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
      responses:
        "200":
          $ref: "./v3/user-feed/response.yaml#/NumberOfPostResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/me/global-feeds:
    get:
      summary: "Get global feed."
      tags:
        - "Feed"
      security:
        - BearerAuth: []
      description: "Get paginable list of active posts (not deleted) from users and community.\n"
      parameters:
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            maximum: 100
            default: 10
        - name: "token"
          in: "query"
          schema:
            type: "string"
            minLength: 1
            maxLength: 100
        - name: "dataTypes"
          in: "query"
          schema:
            type: "array"
            minItems: 1
            maxItems: 4
            items:
              type: "string"
              enum:
                - "video"
                - "image"
                - "file"
                - "liveStream"
            description: "post data type to filter"
      responses:
        "200":
          $ref: "./v4/global-feed/response.yaml#/GlobalFeedResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v5/me/global-feeds:
    get:
      summary: "Get global feed."
      tags:
        - "Feed"
      security:
        - BearerAuth: []
      description: "Get posts from your wall, people you follow and communities you join sorted by custom rannking algorithm\n"
      parameters:
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            maximum: 100
            default: 10
        - name: "token"
          in: "query"
          schema:
            type: "string"
            minLength: 1
            maxLength: 1000
      responses:
        "200":
          $ref: "./v5/global-feed/response.yaml#/GlobalFeedResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v3/files:
    post:
      summary: "Upload file."
      tags:
        - "File"
      security:
        - BearerAuth: []

      description: "Upload file to cloud storage\n"
      requestBody:
        description: "Information of file to be created. It will be applied to every attachment\n"
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                file:
                  type: "array"
                  items:
                    type: "string"
                    format: "binary"
                fullImage:
                  type: "boolean"
                  nullable: true
                preferredFilename:
                  type: "string"
                  maxLength: 1024
      responses:
        "200":
          $ref: "./v3/file/response.yaml#/FileUploadResponse"
        "413":
          $ref: "./global/error.yaml#/PayloadTooLargeError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/files/{fileId}:
    get:
      summary: "Get file info"
      security:
        - BearerAuth: []
      tags:
        - "File"
      description: "Get file info of fileId (ex. type, attributes)\n"
      parameters:
        - in: "path"
          name: "fileId"
          required: true
          schema:
            type: "string"
            maxLength: 50
          description: "File id"
      responses:
        "200":
          $ref: "./v3/file/response.yaml#/FileResponse"
        "400":
          $ref: "./global/error.yaml#/NotFoundError"
    delete:
      summary: "Delete file"
      tags:
        - "File"
      security:
        - BearerAuth: []
      description: "Delete file (also remove from cloud). Only uploader and admin can remove.\n"
      parameters:
        - in: "path"
          name: "fileId"
          required: true
          schema:
            type: "string"
            maxLength: 50
          description: "File id to remove"
      responses:
        "200":
          $ref: "./v3/file/response.yaml#/FileDeleteResponse"
        "403":
          $ref: "./global/error.yaml#/GenericPermissionDenidedError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "422":
          $ref: "./global/error.yaml#/ValidationError"
  /api/v3/files/{fileId}/download:
    get:
      summary: "Get file"
      tags:
        - "File"
      description: "Get file info of fileId (type, attributes)\n"
      parameters:
        - name: "Authorization"
          in: "header"
          schema:
            type: "string"
        - name: "upstra-access-token"
          in: "cookie"
          schema:
            type: "string"
          description: "Alternative way to pass authorization token"
        - in: "query"
          name: "t"
          required: false
          schema:
            type: "string"
          description: "Access token (for showing image inside img tag on web)"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - in: "path"
          name: "fileId"
          required: true
          schema:
            type: "string"
            maxLength: 50
          description: "File id"
        - in: "query"
          name: "size"
          required: false
          schema:
            type: "string"
            enum:
              - "full"
              - "large"
              - "medium"
              - "small"
          description: "Size of image to download (no effect on file type 'file')"
      responses:
        "200":
          $ref: "./v3/file/response.yaml#/FileDeleteResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
  /api/v4/images:
    post:
      summary: "Upload image file."
      security:
        - BearerAuth: []
      tags:
        - "File"
      parameters:
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"

      description: "Upload image to cloud storage\n\nImage size limit: 1,073,741,824 byte\n"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                files:
                  type: "array"
                  items:
                    type: "string"
                    format: "binary"
                    description: "Image file data"
                preferredFilename:
                  type: "string"
                  maxLength: 1024
              required:
                - "files"
      responses:
        "200":
          $ref: "./v4/file/response.yaml#/FileImageUploadResponse"
        "413":
          $ref: "./global/error.yaml#/PayloadTooLargeError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/files:
    post:
      summary: "Upload file."
      security:
        - BearerAuth: []
      tags:
        - "File"
      parameters:
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"

      description: "Upload file to cloud storage\n\nFile size limit: 1,073,741,824 byte\n"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                files:
                  type: "array"
                  items:
                    type: "string"
                    format: "binary"
                    description: "file data"
                preferredFilename:
                  type: "string"
                  maxLength: 1024
              required:
                - "files"
      responses:
        "200":
          $ref: "./v4/file/response.yaml#/FileUploadResponse"
        "413":
          $ref: "./global/error.yaml#/PayloadTooLargeError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/videos:
    post:
      summary: "Upload video file."
      security:
        - BearerAuth: []
      tags:
        - "File"
      parameters:
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"

      description: "Upload video to cloud storage\n\nVideo size limit: 2,147,483,648 byte (2GB)\n"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                files:
                  type: "array"
                  items:
                    type: "string"
                    format: "binary"
                    description: "Video file data"
                feedType:
                  type: "string"
                preferredFilename:
                  type: "string"
                  maxLength: 1024
              required:
                - "files"
      responses:
        "200":
          $ref: "./v4/file/response.yaml#/FileVideoUploadResponse"
        "413":
          $ref: "./global/error.yaml#/PayloadTooLargeError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v4/me/following/{userId}:
    post:
      summary: "Follow user."
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Follow user information\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v4/follow/response.yaml#/FollowResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "Unfollow or Cancel follow request"
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Unfollow or Cancel follow request\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v4/follow/response.yaml#/FollowResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/me/followers/{userId}:
    post:
      summary: "Accept follow request."
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Accept follow request.\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v4/follow/response.yaml#/FollowResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "Decline follow request or delete followers."
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Delete follower.\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v4/follow/response.yaml#/FollowResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/me/followers:
    get:
      summary: "Get my follower list."
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Get follower information (pagination supported)\n"
      parameters:
        - name: "status"
          in: "query"
          schema:
            type: "string"
            enum:
              - "all"
              - "pending"
              - "accepted"
            default: "all"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            maximum: 100
            default: 10
        - name: "token"
          in: "query"
          schema:
            type: "string"
            minLength: 1
            maxLength: 100
      responses:
        "200":
          $ref: "./v4/follow/response.yaml#/FollowPaginationResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/users/{userId}/followers:
    get:
      summary: "Get other follower list."
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Get follower information (pagination supported)\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
        - name: "status"
          in: "query"
          schema:
            type: "string"
            enum:
              - "all"
              - "pending"
              - "accepted"
            default: "all"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            maximum: 100
            default: 10
        - name: "token"
          in: "query"
          schema:
            type: "string"
            minLength: 1
            maxLength: 100
      responses:
        "200":
          $ref: "./v4/follow/response.yaml#/FollowPaginationResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/me/following:
    get:
      summary: "Get my following list"
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Get following information (pagination supported)\n"
      parameters:
        - name: "status"
          in: "query"
          schema:
            type: "string"
            enum:
              - "all"
              - "pending"
              - "accepted"
            default: "all"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            maximum: 100
            default: 10
        - name: "token"
          in: "query"
          schema:
            type: "string"
            minLength: 1
            maxLength: 100
      responses:
        "200":
          $ref: "./v4/follow/response.yaml#/FollowPaginationResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/users/{userId}/following:
    get:
      summary: "Get other following list."
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Get following information (pagination supported)\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
        - name: "status"
          in: "query"
          schema:
            type: "string"
            enum:
              - "all"
              - "pending"
              - "accepted"
            default: "all"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
            maximum: 100
            default: 10
        - name: "token"
          in: "query"
          schema:
            type: "string"
            minLength: 1
            maxLength: 100
      responses:
        "200":
          $ref: "./v4/follow/response.yaml#/FollowPaginationResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/me/followInfo:
    get:
      summary: "Get my follow information."
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Get my follow information.\n"
      responses:
        "200":
          $ref: "./v4/follow/response.yaml#/FollowCountResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/users/{userId}/followInfo:
    get:
      summary: "Get other follow information."
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Get other follow information.\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
      responses:
        "200":
          $ref: "./v4/follow/response.yaml#/FollowInformationResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v5/users/{userId}/followInfo:
    get:
      summary: "Get other follow information."
      tags:
        - "Follow"
      security:
        - BearerAuth: []
      description: "Get other follow information.\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
      responses:
        "200":
          $ref: "./v5/follow/response.yaml#/FollowInformationResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"


  /api/v1/markers/channels:
    get:
      tags:
        - "Marker"
      summary: "Get marker for channels"
      security:
        - BearerAuth: []
      description: "Get marker for channels"
      parameters:
        - name: channelIds
          in: query
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/ChannelIds"
          description: list of channel id (internal)
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/GetMarkerChannel"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/message-feeds:
    get:
      tags:
        - "Marker"
      summary: "Get marker for message feeds"
      security:
        - BearerAuth: []
      description: "Get marker for message feeds"
      parameters:
        - name: messageFeedIds
          in: query
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/MessageFeedIds"
          description: list of message feed id (internal)
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/GetMarkerMessageFeed"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/message-feeds/{messageFeedId}/mark-delivering:
    put:
      tags:
        - "Marker"
      summary: "Mark message feeds as delivering"
      security:
        - BearerAuth: []
      description: "Mark message feeds as delivering"
      parameters:
        - name: messageFeedId
          in: path
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/MessageFeedId"
          description: message feed id (internal)
      requestBody:
        $ref: "./v1/marker/request.yaml#/MarkDelivering"
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/MarkDelivering"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/message-feeds/{messageFeedId}/mark-read:
    put:
      tags:
        - "Marker"
      summary: "Mark message feeds as read"
      security:
        - BearerAuth: []
      description: "Mark message feeds as read"
      parameters:
        - name: messageFeedId
          in: path
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/MessageFeedId"
          description: message feed id (internal)
      requestBody:
        $ref: "./v1/marker/request.yaml#/MarkRead"
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/MarkRead"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/message-feeds/{messageFeedId}/start-reading:
    post:
      tags:
        - "Marker"
      summary: "Start reading message feeds"
      security:
        - BearerAuth: []
      description: "Start reading message feeds"
      parameters:
        - name: messageFeedId
          in: path
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/MessageFeedId"
          description: message feed id (internal)
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/StartReading"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/message-feeds/{messageFeedId}/stop-readings:
    post:
      tags:
        - "Marker"
      summary: "Stop reading message feeds"
      security:
        - BearerAuth: []
      description: "Stop reading message feeds"
      parameters:
        - name: messageFeedId
          in: path
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/MessageFeedId"
          description: message feed id (internal)
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/StopReading"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/message-feeds/reading:
    post:
      tags:
        - "Marker"
      summary: "Mark message feeds as read"
      security:
        - BearerAuth: []
      description: "Mark message feeds as read"
      requestBody:
        $ref: "./v1/marker/request.yaml#/MessageFeedReading"
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/MessageFeedReading"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/messages:
    get:
      tags:
        - "Marker"
      summary: "Get marker for messages"
      security:
        - BearerAuth: []
      description: "Get marker for messages"
      parameters:
        - name: messageIds
          in: query
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/MessageIds"
          description: list of message id (internal)
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/GetMarkerMessage"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/messages/channels/{channelId}/mark-read:
    put:
      tags:
        - "Marker"
      summary: "Mark all messages in channel as read"
      security:
        - BearerAuth: []
      description: "Mark all messages in channel as read"
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/ChannelId"
          description: channel id (internal)
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/MarkAllChannel"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/messages/{messageId}/delivered-users:
    get:
      tags:
        - "Marker"
      summary: "Get list of users who delivered the message"
      security:
        - BearerAuth: []
      description: "Get list of users who delivered the message"
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/ChannelId"
          description: channel id (internal)
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/GetDeliveredUsers"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/messages/{messageId}/read-users:
    get:
      tags:
        - "Marker"
      summary: "Get list of users who read the message"
      security:
        - BearerAuth: []
      description: "Get list of users who read the message"
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/ChannelId"
          description: channel id (internal)
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/GetReadUsers"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/sync:
    post:
      tags:
        - "Marker"
      summary: "Marker sync"
      security:
        - BearerAuth: []
      description: "Marker sync for update unread count"
      requestBody:
        $ref: "./v1/marker/request.yaml#/MarkerSync"
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/MarkerSync"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/user-message-feed:
    get:
      tags:
        - "Marker"
      summary: "Query Latest 100 user feed marker by a list of entity Id (channel id)"
      security:
        - BearerAuth: []
      description: "Query Latest 100 user feed marker by a list of entity Id (channel id)"
      parameters:
        - name: channelIds
          in: query
          required: true
          schema:
            $ref: "./v1/marker/parameters.yaml#/ChannelIds"
          description: list of channel id (internal)
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/UserMessageFeedMarker"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v1/markers/userMarker:
    get:
      tags:
        - "Marker"
      summary: "Get marker for user"
      security:
        - BearerAuth: []
      description: "Get marker for user"
      responses:
        "200":
          $ref: "./v1/marker/response.yaml#/UserMarker"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  
  /v1/blacklist/records:
    put:
      summary: "Refresh black list"
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Refresh the black list\n"
      requestBody:
        description: "Regular expression to refresh.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                regexs:
                  type: "array"
                  items:
                    type: "string"
              required:
                - "regexs"
      responses:
        "200":
          description: OK
    post:
      summary: "Add rules to black list"
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Add rules to the black list\n"
      requestBody:
        description: "Regular expression to add.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                regexs:
                  type: "array"
                  items:
                    type: "string"
              required:
                - "regexs"
      responses:
        "200":
          description: OK
    delete:
      summary: "Delete rules from black list"
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Delete rules from the black list\n"
      parameters:
        - in: query
          name: ruleIds
          description: "Regular expression to delete.\n"
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          description: OK
  /api/v2/blacklist/records:
    get:
      summary: "get rules of blacklist."
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Get rules of blacklist.\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "regexs"
          in: "query"
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          $ref: "#/components/responses/BlacklistRulesResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      summary: "refresh rules of blacklist."
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Refresh rules of blacklist.\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Rules information to be refreshed.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                regexs:
                  type: "array"
                  items:
                    type: "string"
              required:
                - "regexs"
      responses:
        "200":
          description: "OK"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: "add rules to blacklist."
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Add rules to blacklist\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Rules information to be added.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                regexs:
                  type: "array"
                  items:
                    type: "string"
                isMatchExactWord:
                  type: "boolean"
              required:
                - "regexs"
      responses:
        "200":
          description: "OK"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      summary: "delete rules from blacklist"
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Delete rule from blacklist\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - in: query
          name: ruleIds
          description: "Rules information to be deleted.\n"
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          description: "OK"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /api/v2/blacklist/records/:ruleId:
    put:
      summary: "update rule of blacklist."
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Update rule of blacklist.\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Rules information to be updated.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                ruleId:
                  type: "string"
                isEnabled:
                  type: "boolean"
              required:
                - "ruleId"
                - "isEnabled"
      responses:
        "200":
          $ref: "#/components/responses/BlacklistRuleResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /api/v2/moderation-settings:
    get:
      summary: "get a moderation setting"
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      description: "Get a moderation setting.\n"
      responses:
        "200":
          $ref: "#/components/responses/ModerationSettingResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      summary: "update a moderation setting"
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Update a moderation setting\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "moderation setting information\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                maxRepetition:
                  type: "integer"
                  minimum: 0
                maxRepetitionTimeout:
                  type: "integer"
                  minimum: 0
                blacklistMuteTimeout:
                  type: "integer"
                  minimum: 0
                whitelistMuteTimeout:
                  type: "integer"
                  minimum: 0
                maxRepetitionMuteTimeout:
                  type: "integer"
                  minimum: 0
                enableImageModeration:
                  type: "boolean"
                imageModeration:
                  type: "object"
                  properties:
                    nudity:
                      type: "number"
                      minimum: 0
                    suggestive:
                      type: "number"
                      minimum: 0
                    violence:
                      type: "number"
                      minimum: 0
                    disturbing:
                      type: "number"
                      minimum: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  code:
                    type: "string"
                example:
                  status: "success"
                  code: 200
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /api/v2/whitelist/records:
    get:
      summary: "get rules of whitelist."
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Get rules of whitelist.\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "regexs"
          in: "query"
          required: true
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          $ref: "#/components/responses/WhitelistRulesResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "refresh rules of whitelist."
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Refresh rules of whitelist.\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Rules information to be refreshed.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                regexs:
                  type: "array"
                  items:
                    type: "string"
              required:
                - "regexs"
      responses:
        "200":
          description: "OK"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: "add rules to whitelist."
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Add rules to whitelist\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Rules information to be added.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                regexs:
                  type: "array"
                  items:
                    type: "string"
              required:
                - "regexs"
      responses:
        "200":
          description: "OK"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      summary: "delete rules from whitelist"
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Delete rule from whitelist\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - in: query
          name: ruleIds
          description: "Rules information to be deleted.\n"
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          description: "OK"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /api/v2/whitelist/records/:ruleId:
    put:
      summary: "update rule of whitelist."
      tags:
        - "Moderation"
      security:
        - ApiKeyAuth: []
      description: "Update rule of whitelist.\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Rules information to be updated.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                ruleId:
                  type: "string"
                isEnabled:
                  type: "boolean"
              required:
                - "ruleId"
                - "isEnabled"
      responses:
        "200":
          $ref: "#/components/responses/WhitelistRuleResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /api/v3/allowlists:
    get:
      summary: "Get list of allowed words"
      security:
        - BearerAuth: []
      tags:
        - "Moderation"
      parameters:
        - name: "regex"
          in: "query"
          schema:
            type: "string"
          description: "search keyword from start"
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
        - name: "options"
          in: "query"
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              after:
                type: "number"
              before:
                type: "number"
              limit:
                type: "number"
                description: "limit amount of result"
              token:
                type: "string"
                description: "pagination token"
      responses:
        "200":
          $ref: "./v3/moderation/response.yaml#/AllowedlistResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "Add rules of allowlist V3"
      tags:
        - "Moderation"
      security:
        - BearerAuth: []
      description: "Add rules of allowlist.\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        $ref: "./v3/moderation/request.yaml#/AddWhitelistRules"
      responses:
        "200":
          $ref: "./v3/moderation/response.yaml#/VerifyingResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/blocklists:
    get:
      summary: "Get list of banned words"
      security:
        - BearerAuth: []
      tags:
        - "Moderation"
      parameters:
        - name: "regex"
          in: "query"
          schema:
            type: "string"
          description: "search keyword from start"
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
        - name: "options"
          in: "query"
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              after:
                type: "number"
              before:
                type: "number"
              limit:
                type: "number"
                description: "limit amount of result"
              token:
                type: "string"
                description: "pagination token"
      responses:
        "200":
          $ref: "./v3/moderation/response.yaml#/BlocklistResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "Add rules of blocklist V3"
      tags:
        - "Moderation"
      security:
        - BearerAuth: []
      description: "Add rules of blocklist.\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        $ref: "./v3/moderation/request.yaml#/AddBlacklistRules"
      responses:
        "200":
          $ref: "./v3/moderation/response.yaml#/VerifyingResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/allowlists/verify:
    post:
      tags:
        - Moderation
      security:
        - BearerAuth: []
      summary: Verify allowlist
      description: Verify URLs with the allowlist rules.
      operationId: verifyAllowlist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  description: A list of URLs to be verified
                  type: array
                  items:
                    type: string
                    maxLength: 500
                  maxItems: 10
                  minItems: 1
      responses:
        "200":
          $ref: "./v3/moderation/response.yaml#/VerifyingResponse"
        "400":
          description: Some URLs are not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400000
                message: Some URLs are not valid
        "403":
          description: Some URLs are not in the allow list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400309
                message: Some URLs are not in the allow list
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v3/blocklists/verify:
    post:
      tags:
        - Moderation
      security:
        - BearerAuth: []
      summary: Verify blocklist
      description: Verify texts with the blocklist rules.
      operationId: verifyBlocklist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  description: A list of texts to be verified
                  type: array
                  items:
                    type: string
                    maxLength: 500
                  maxItems: 10
                  minItems: 1
      responses:
        "200":
          $ref: "./v3/moderation/response.yaml#/VerifyingResponse"
        "403":
          description: Some texts contain blocked words
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400308
                message: Some texts contain blocked words
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v5/message-feeds:
    post:
      tags:
        - "Message Feed"
      summary: "Add a new message feed"
      security:
        - BearerAuth: []
      description: "Add a new message feed"
      requestBody:
        $ref: "./v5/message-feed/request.yaml#/CreateMessageFeed"
      responses:
        "200":
          $ref: "./v5/message-feed/response.yaml#/MessageFeedPayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v5/message-feeds/{messageFeedId}:
    delete:
      tags:
        - "Message Feed"
      summary: "Delete a message feed"
      security:
        - BearerAuth: []
      description: "Delete an existing message feed except the default message feed"
      parameters:
        - name: messageFeedId
          in: path
          required: true
          description: Message feed ID
          schema:
            $ref: "./schema/message-feed.yaml#/MessageFeed_messageFeedId"
        - name: permanent
          in: query
          schema:
            $ref: "./schema/generic.yaml#/Generic_permanent"
      responses:
        "200":
          description: "Successful operation"
        "403":
          description: "Fobidden error"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
    put:
      tags:
        - "Message Feed"
      summary: "Update a message feed"
      description: "Update an existing message feed except the default message feed"
      security:
        - BearerAuth: []
      parameters:
        - name: messageFeedId
          in: path
          required: true
          description: Message feed ID
          schema:
            $ref: "./schema/message-feed.yaml#/MessageFeed_messageFeedId"
      requestBody:
        $ref: "./v5/message-feed/request.yaml#/UpdateMessageFeed"
      responses:
        "200":
          $ref: "./v5/message-feed/response.yaml#/MessageFeedPayload"
        "403":
          description: "Forbidden error"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
    get:
      tags:
        - "Message Feed"
      summary: "Find a message feed by ID"
      security:
        - BearerAuth: []
      description: "Return a single message feed"
      parameters:
        - name: messageFeedId
          in: path
          required: true
          description: Message feed ID
          schema:
            $ref: "./schema/message-feed.yaml#/MessageFeed_messageFeedId"
      responses:
        "200":
          $ref: "./v5/message-feed/response.yaml#/MessageFeedPayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v5/message-feeds/channel/{channelId}:
    get:
      tags:
        - "Message Feed"
      summary: "Finds message feeds by channelId and multiple conditions"
      description: "Multiple conditions can be provided by query string"
      security:
        - BearerAuth: []
      operationId: "findMessageFeedsByConditions"
      parameters:
        - name: "channelId"
          in: "path"
          required: true
          description: "channel ID of message feed that needs to be find"
          schema:
            $ref: "./schema/message-feed.yaml#/MessageFeed_channelId"
        - $ref: "./v5/message-feed/parameter.yaml#/IsDeleted"
        - $ref: "./v5/message-feed/parameter.yaml#/PagingOptions"
      responses:
        "200":
          $ref: "./v5/message-feed/response.yaml#/PaginatedMessageFeedPayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v5/message-feeds/list:
    get:
      tags:
        - "Message Feed"
      summary: "Find message feeds by list of ID's"
      description: "Multiple message feed id values can be provided with array format"
      parameters:
        - name: "messageFeedIds"
          in: "query"
          required: true
          description: "List of message feed ID that needs to find (max=10) [messageFeedIds[]=messageFeedId1&messageFeedIds[]=messageFeedId2]"
          schema:
            $ref: "./schema/message-feed.yaml#/MessageFeed_messageFeedIds"
      responses:
        "200":
          $ref: "./v5/message-feed/response.yaml#/MessageFeedPayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
  /api/v5/message-feeds/user/{creatorId}:
    get:
      tags:
        - "Message Feed"
      summary: "Finds message feeds by creatorId and multiple conditions"
      description: "Conditions can be provided in query string"
      operationId: "findMessageFeedsByCreatorId"
      parameters:
        - name: "creatorId"
          in: "path"
          required: true
          description: "ID of message feed creator"
          schema:
            description: Creator's ID
            type: string
            maxLength: 30
            example: 8aa313c8dbb00af911b07672
        - $ref: "./v5/message-feed/parameter.yaml#/IsDeleted"
        - $ref: "./v5/message-feed/parameter.yaml#/PagingOptions"
      responses:
        "200":
          $ref: "./v5/message-feed/response.yaml#/MessageFeedPayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"

  /api/v3/messages:
    get:
      summary: "query messages"
      tags:
        - "Message"
      security:
        - BearerAuth: []
      parameters:
        - name: "channelId"
          required: true
          in: "query"
          schema:
            type: "string"
            maxLength: 100
        - name: "type"
          in: "query"
          schema:
            type: "string"
            enum:
              - "text"
              - "image"
              - "file"
              - "custom"
              - "video"
              - "audio"
              - "imagemap"
        - name: "parentId"
          in: "query"
          schema:
            type: "string"
            maxLength: 150
        - name: "filterByParentId"
          in: "query"
          schema:
            type: "boolean"
            default: false
        - name: "hasFlag"
          in: "query"
          schema:
            type: "boolean"
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
          description: "isDeleted:\n  * `null(default)` - Show both message is actived and message is inactived.\n  * `true` - Show message is inactived only.\n  * `false` - Show message is actived only.\n"
        - name: "tags"
          in: "query"
          schema:
            type: "array"
            maxItems: 10
            items:
              type: "string"
              maxLength: 100
        - name: "excludeTags"
          in: "query"
          schema:
            type: "array"
            maxItems: 10
            items:
              type: "string"
              maxLength: 100
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              after:
                type: "integer"
                minimum: 1
              first:
                type: "integer"
                minimum: 1
                maximum: 100
              before:
                type: "integer"
                minimum: 1
              last:
                type: "integer"
                minimum: 1
                maximum: 100
              token:
                type: "string"
                maxLength: 1000
      responses:
        "200":
          $ref: "./v3/message/response.yaml#/MessagePaginationApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "create a message"
      tags:
        - "Message"
      security:
        - BearerAuth: []
      requestBody:
        description: "Information of message to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                channelId:
                  type: "string"
                  maxLength: 150
                messageId:
                  type: "string"
                  maxLength: 150
                type:
                  type: "string"
                  enum:
                    - "text"
                    - "image"
                    - "file"
                    - "custom"
                    - "video"
                    - "audio"
                    - "imagemap"
                  default: "text"
                data:
                  type: "object"
                  properties:
                    text:
                      type: "string"
                      maxLength: 20000
                fileId:
                  type: "string"
                  maxLength: 50
                parentId:
                  type: "string"
                  maxLength: 150
                metadata:
                  type: "object"
                tags:
                  type: "array"
                  maxItems: 10
                  items:
                    type: "string"
                    maxLength: 100
                mentionees:
                  type: "array"
                  description: "The object of the mentions type and user who get a notification for the message."
                  maxItems: 2
                  items:
                    $ref: "./schema/message.yaml#/MentioneesRequest"
              required:
                - "channelId"
      responses:
        "200":
          $ref: "./v3/message/response.yaml#/MessagesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenAvatarError:
                  $ref: "./global/error-example.yaml#/ForbiddenAvatarError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsMutedError:
                  $ref: "./global/error-example.yaml#/UserIsMutedError"
                ChannelIsMutedError:
                  $ref: "./global/error-example.yaml#/ChannelIsMutedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
                MaxRepetitionExceed:
                  $ref: "./global/error-example.yaml#/MaxRepetitionExceed"
                BanWordFoundError:
                  $ref: "./global/error-example.yaml#/BanWordFoundError"
                LinkNotAllowedError:
                  $ref: "./global/error-example.yaml#/LinkNotAllowedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/ValidationError"
  /api/v3/messages/list:
    get:
      summary: "get list of messages"
      tags:
        - "Message"
      security:
        - BearerAuth: []
      parameters:
        - name: "messageIds"
          in: "query"
          required: true
          schema:
            type: "array"
            maxItems: 10
            items:
              type: "string"
              maxLength: 150
      responses:
        "200":
          $ref: "./v3/message/response.yaml#/MessagesApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/messages/{messageId}:
    get:
      summary: "get a message"
      tags:
        - "Message"
      security:
        - BearerAuth: []
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 150
      responses:
        "200":
          $ref: "./v3/message/response.yaml#/MessagesApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "update a message"
      tags:
        - "Message"
      security:
        - BearerAuth: []
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 150
      requestBody:
        description: "Information of message to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                data:
                  type: "object"
                  properties:
                    text:
                      type: "string"
                      maxLength: 20000
                metadata:
                  type: "object"
                tags:
                  type: "array"
                  maxItems: 10
                  items:
                    type: "string"
                    maxLength: 100
                mentionees:
                  type: "array"
                  description: "The object of the mentions type and user who get a notification for the message."
                  maxItems: 2
                  items:
                    $ref: "./schema/message.yaml#/MentioneesRequest"
      responses:
        "200":
          $ref: "./v3/message/response.yaml#/MessagesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenAvatarError:
                  $ref: "./global/error-example.yaml#/ForbiddenAvatarError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                MaxRepetitionExceed:
                  $ref: "./global/error-example.yaml#/MaxRepetitionExceed"
                BanWordFoundError:
                  $ref: "./global/error-example.yaml#/BanWordFoundError"
                LinkNotAllowedError:
                  $ref: "./global/error-example.yaml#/LinkNotAllowedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/ValidationError"
    delete:
      summary: "delete a message"
      tags:
        - "Message"
      security:
        - BearerAuth: []
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 150
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      success:
                        type: "boolean"
        "403":
          $ref: "./global/error.yaml#/PermissionDenidedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/messages/{messageId}/flag:
    post:
      summary: "flag a message"
      tags:
        - "Message"
      security:
        - BearerAuth: []
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 150
      responses:
        "200":
          $ref: "./v3/message/response.yaml#/MessagesApiResponse"
        "403":
          description: Error Response
          content:
            application/json:
              examples:
                ForbiddenError:
                  $ref: "./global/error-example.yaml#/ForbiddenError"
                PermissionDenidedError:
                  $ref: "./global/error-example.yaml#/PermissionDenidedError"
                UserIsBannedError:
                  $ref: "./global/error-example.yaml#/UserIsBannedError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/messages/{messageId}/unflag:
    delete:
      summary: "unflag a message"
      tags:
        - "Message"
      security:
        - BearerAuth: []
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 150
      responses:
        "200":
          $ref: "./v3/message/response.yaml#/MessagesApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/messages/{messageId}/clearFlags:
    delete:
      summary: "clear flags"
      tags:
        - "Message"
      security:
        - BearerAuth: []
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 150
      responses:
        "200":
          $ref: "./v3/message/response.yaml#/MessagesApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/messages/{messageId}/isFlaggedByMe:
    get:
      summary: "is message flag by me"
      tags:
        - "Message"
      security:
        - BearerAuth: []
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 150
      responses:
        "200":
          $ref: "./global/response.yaml#/IsSocialFlagByMeResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v5/messages:
    post:
      tags:
        - "Message"
      summary: "Create a new message in message feed"
      description: "Create a new message"
      requestBody:
        $ref: "./v5/message/request.yaml#/CreateMessage"
      responses:
        "200":
          $ref: "./v5/message/response.yaml#/CreateMessagePayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
    get:
      tags:
        - "Message"
      summary: "Find message by message feed id and multiple conditions"
      description: "Multiple conditions can be provided in query string"
      parameters:
        - $ref: "./v5/message/parameter.yaml#/MessageFeedId"
        - $ref: "./v5/message/parameter.yaml#/ParentId"
        - $ref: "./v5/message/parameter.yaml#/IsDeleted"
        - $ref: "./v5/message/parameter.yaml#/IncludeTags"
        - $ref: "./v5/message/parameter.yaml#/ExcludeTags"
        - $ref: "./v5/message/parameter.yaml#/HasFlags"
        - $ref: "./v5/message/parameter.yaml#/DataType"
        - $ref: "./v5/message/parameter.yaml#/PagingOptions"
      responses:
        "200":
          $ref: "./v5/message/response.yaml#/PaginatedMessagePayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
  /api/v5/messages/{messageId}:
    delete:
      tags:
        - "Message"
      summary: "Delete a message"
      description: "Delete a message"
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of a message
          schema:
            $ref: "./schema/message.yaml#/MessageV5_messageId"
        - $ref: "./v5/message/parameter.yaml#/Permanent"
      responses:
        "200":
          description: "Successful operation"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
    get:
      tags:
        - "Message"
      summary: "Find message by ID"
      description: "Returns a single message"
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of a message
          schema:
            $ref: "./schema/message.yaml#/MessageV5_messageId"
      responses:
        "200":
          $ref: "./v5/message/response.yaml#/MessagePayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
    put:
      tags:
        - "Message"
      summary: "Update a message"
      description: "Update a message"
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of a message
          schema:
            $ref: "./schema/message.yaml#/MessageV5_messageId"
      requestBody:
        $ref: "./v5/message/request.yaml#/UpdateMessage"
      responses:
        "200":
          $ref: "./v5/message/response.yaml#/MessagePayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
  /api/v5/messages/{messageId}/flags/all:
    delete:
      tags:
        - "Message"
      summary: "Delete all flags in message"
      description: "Delete all flags in message"
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of a message
          schema:
            $ref: "./schema/message.yaml#/MessageV5_messageId"
      responses:
        "200":
          $ref: "./v5/message/response.yaml#/MessagePayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
  /api/v5/messages/{messageId}/flags:
    delete:
      tags:
        - "Message"
      summary: "Delete my flag in a message"
      description: "Delete my flag in a message"
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of a message
          schema:
            $ref: "./schema/message.yaml#/MessageV5_messageId"
      responses:
        "200":
          $ref: "./v5/message/response.yaml#/MessagePayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
    get:
      tags:
        - "Message"
      summary: "Find my flag in message by ID"
      description: "Return my flag in message"
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of a message
          schema:
            $ref: "./schema/message.yaml#/MessageV5_messageId"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  result:
                    $ref: "./schema/message.yaml#/MessageV5_hasFlags"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
    post:
      tags:
        - "Message"
      summary: "Create my flag in a message"
      description: "Flag a message"
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of a message
          schema:
            $ref: "./schema/message.yaml#/MessageV5_messageId"
      responses:
        "200":
          $ref: "./v5/message/response.yaml#/MessagePayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
  /api/v5/messages/list:
    get:
      tags:
        - "Message"
      summary: "Find messages by message id (max=10)"
      description: "Multiple message id values can be provided with array format"
      parameters:
        - $ref: "./v5/message/parameter.yaml#/MessageIds"
      responses:
        "200":
          $ref: "./v5/message/response.yaml#/MessagePayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
  /api/v5/messages/user/{creatorId}:
    get:
      tags:
        - "Message"
      summary: "Find messages by creatorId"
      description: "This API can be called by admin user only"
      parameters:
        - name: creatorId
          in: path
          required: true
          description: Creator ID to filter
          schema:
            $ref: "./schema/message.yaml#/MessageV5_creatorId"
        - name: channelId
          in: query
          required: false
          description: Channel ID to filter
          schema:
            $ref: "./schema/message.yaml#/MessageV5_channelId"
        - name: hasFlags
          in: query
          required: false
          description: Filter flagged message
          schema:
            $ref: "./schema/message.yaml#/MessageV5_hasFlags"
        - $ref: "./v5/message/parameter.yaml#/PagingOptionsAdmin"
      responses:
        "200":
          $ref: "./v5/message/response.yaml#/PaginatedMessagePayload"
        "404":
          description: "Not found error"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []

  /api/v3/network-settings:
    put:
      summary: "Update network setting configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Update network setting configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                networkId:
                  type: "string"
                tierHandler:
                  type: "string"
                  maxLength: 200
                socialEnabled:
                  type: "boolean"
                videoStreamingEnabled:
                  type: "boolean"
                chatEnabled:
                  type: "boolean"
                isWhitelistEnabled:
                  type: "boolean"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/NetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/network-settings/chat:
    put:
      summary: "Update chat network setting configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Update chat network setting configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                isAllowMentionedChannelEnabled:
                  type: "boolean"
                  default: false
                messagePreviewSetting:
                  type: object
                  description: "Message preview setting"
                  properties:
                    enabled:
                      type: boolean
                      default: false
                      description: "message preview feature enable or disable"
                    isIncludeDeleted:
                      type: boolean
                      default: false
                      description: "message preview can be a deleted message, if false return message preview without a deleted message"
                  required:
                    - enabled
                isAllowAdminViewConversationMessage:
                  type: "boolean"
                  default: true
                isAllowAdminManageConversationMessage:
                  type: "boolean"
                  default: true
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/ChatNetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    get:
      summary: "Get chat network setting configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Get chat network setting configuration.\n"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/ChatNetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/network-settings/feed-setting:
    get:
      summary: "Get feed setting check configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Using for get network feed setting check configuration.\n"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/FeedSettingNetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "Update feed setting check configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Update feed setting check configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              $ref: "./schema/network-setting.yaml#/FeedSettingNetworkSetting"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/FeedSettingNetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/network-settings/moderation:
    get:
      summary: "Get moderation configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Using for get network moderation configuration.\n"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/ModerationNetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "Update moderation configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Update moderation configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                isWhitelistEnabled:
                  type: "boolean"
                  description: "`true` - Enabled whitelist validation.\n`false` - Disabled whitelist validation.\n"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/ModerationNetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/network-settings/prehook:
    get:
      tags:
        - Network Setting
      summary: Get prehook configuration.
      description: Get prehook configuration.
      security:
        - BearerAuth: []
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/GetPrehookSettingApiResponse"
        "403":
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/PermissionDenidedError"
              example:
                status: error
                code: 400301
                message: Only administrator can do this
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/UnexpectedError"
              example:
                status: error
                code: 500000
                message: Unexpected error
    put:
      tags:
        - Network Setting
      summary: Update prehook configuration
      description: Update prehook configuration
      security:
        - BearerAuth: []
      requestBody:
        $ref: "./v3/network-setting/request.yaml#/UpdatePrehookSetting"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/UpdatePrehookSettingApiResponse"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/BadRequestError"
              example:
                status: error
                code: 400000
                message: This feature is not available on your network
        "403":
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/PermissionDenidedError"
              example:
                status: error
                code: 400301
                message: Only administrator can do this
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/UnexpectedError"
              example:
                status: error
                code: 500000
                message: Unexpected error
  /api/v3/network-settings/social:
    put:
      summary: "Update social configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Update social configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userPrivacySetting:
                  type: "string"
                  enum:
                    - "public"
                    - "private"
                isFollowWithRequestEnabled:
                  type: "boolean"
                  default: false
                isAllowEditPostWhenReviewingEnabled:
                  type: "boolean"
                showOnlyMyFeed:
                  type: "boolean"
                  default: false
                showMyPost:
                  type: "boolean"
                showEveryonePost:
                  type: "boolean"
                showCommunityPost:
                  type: "boolean"
                showFollowingPost:
                  type: "boolean"
                isAllowMentionedChannelEnabled:
                  type: "boolean"
                storyExpiryTimeMinutes:
                  type: "integer"
                  minimum: 60
                  maximum: 1440
                  default: 1440
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/SocialNetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    get:
      summary: "Get social configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Get social configuration.\n"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/SocialNetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/network-settings/users:
    get:
      tags:
        - Network Setting
      summary: Get users configuration.
      description: Get users configuration.
      security:
        - BearerAuth: []
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/UsersSettingApiResponse"
        "403":
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/PermissionDenidedError"
              example:
                status: error
                code: 400301
                message: Only administrator can do this
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/UnexpectedError"
              example:
                status: error
                code: 500000
                message: Unexpected error
    put:
      tags:
        - Network Setting
      summary: Update users configuration
      description: Update users configuration
      security:
        - BearerAuth: []
      requestBody:
        $ref: "./v3/network-setting/request.yaml#/UpdateUsersSetting"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/UsersSettingApiResponse"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/BadRequestError"
              example:
                status: error
                code: 400000
                message: This feature is not available on your network
        "403":
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/PermissionDenidedError"
              example:
                status: error
                code: 400301
                message: Only administrator can do this
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/UnexpectedError"
              example:
                status: error
                code: 500000
                message: Unexpected error
  /api/v3/network-settings/video-streaming:
    get:
      summary: "Get video streaming setting check configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Using for get network video streaming setting check configuration.\n"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/VideoStreamingNetworkSettingApiResponse"
        "422":
          $ref: "./global/error.yaml#/ValidationError"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "Update video streaming setting check configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Update video streaming setting check configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              $ref: "./schema/network-setting.yaml#/VideoStreamingSettingNetworkSetting"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/VideoStreamingNetworkSettingApiResponse"
        "422":
          $ref: "./global/error.yaml#/ValidationError"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/network-settings/webhook:
    put:
      summary: "Update webhook configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Update webhook configuration.\n"
      requestBody:
        description: "information for a network setting\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                webhookEnabled:
                  type: "boolean"
                  description: "`true` - User can register webhook for network and will receive a webhook.\n`false` - User won't be able to register webhook and won't receive a webhook.\n"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/WebhookNetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    get:
      summary: "Get webhook configuration."
      tags:
        - "Network Setting"
      security:
        - BearerAuth: []
      description: "Get webhook configuration.\n"
      responses:
        "200":
          $ref: "./v3/network-setting/response.yaml#/WebhookNetworkSettingApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /v1/notification:
    post:
      summary: "register a device to get push notification"
      tags:
        - "Notification"
      security:
        - ApiKeyAuth: []
      description: "Register a device to a notification service provider.\n"
      requestBody:
        description: "information of a device to be registered.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                deviceId:
                  type: "string"
                  maxLength: 150
                platform:
                  type: "string"
                  enum:
                    - "android"
                    - "ios"
                token:
                  type: "string"
                  maxLength: 1000
                userId:
                  type: "string"
                provider:
                  type: "string"
              required:
                - "deviceId"
                - "platform"
                - "token"
                - "userId"
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      summary: "unregister a device from a notification service provider"
      tags:
        - "Notification"
      security:
        - ApiKeyAuth: []
      description: "Unregister a device from a notification service provider.\n"
      parameters:
        - in: query
          name: userId
          schema:
            type: string
            minLength: 1
          description: user id
          deprecated: true
        - in: query
          name: deviceId
          schema:
            type: string
            minLength: 1
          description: device id
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "404":
          $ref: "#/components/responses/BadRequestError"
  /api/v3/notification/setting:
    get:
      summary: "Get push notification setting."
      tags:
        - "Notification"
      security:
        - BearerAuth: []
      description: "Get push notification setting.\n"
      parameters:
        - name: "level"
          required: true
          in: "query"
          schema:
            type: "string"
            enum:
              - "user"
              - "channel"
              - "community"
        - name: "channelId"
          in: "query"
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
        - name: "communityId"
          in: "query"
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
      responses:
        "200":
          $ref: "./v3/notification/response.yaml#/NotificationSettingApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "Save push notification setting."
      tags:
        - "Notification"
      security:
        - BearerAuth: []
      description: "Save push notification setting.\n"
      requestBody:
        description: "Notification setting information to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                level:
                  type: "string"
                  enum:
                    - "user"
                    - "channel"
                    - "community"
                  description: "level:\n  * `user` - need to specific modules via notifiableEvents.\n  * `channel` - need to specific channelId.\n  * `community` - need to specific communityId and community event via notifiableEvents.\n"
                isPushNotifiable:
                  type: "boolean"
                channelId:
                  type: "string"
                  minLength: 1
                  maxLength: 900
                communityId:
                  type: "string"
                  minLength: 1
                  maxLength: 900
                notifiableEvents:
                  type: "array"
                  minItems: 1
                  maxItems: 7
                  items:
                    type: "object"
                    properties:
                      name:
                        type: "string"
                        enum:
                          - "channel.created"
                          - "channel.joined"
                          - "conversation-channel.joined"
                          - "text-mention-message.created"
                          - "message.created"
                          - "conversation-message.created"
                          - "conversation-text-message.created"
                          - "conversation-image-message.created"
                          - "conversation-file-message.created"
                          - "post.created"
                          - "post.approved"
                          - "post.need-reviewing"
                          - "text-mention-post.created"
                          - "text-mention-user-feed-post.created"
                          - "video-streaming-post.created"
                          - "post.reacted"
                          - "comment.created"
                          - "text-mention-comment.created"
                          - "text-mention-user-feed-comment.created"
                          - "comment.replied"
                          - "text-mention-comment.replied"
                          - "text-mention-user-feed-comment.replied"
                          - "comment.reacted"
                          - "follow.created"
                          - "follow.requested"
                          - "follow.accepted"
                          - "community.roleAdded"
                          - "community.updated"
                      moduleName:
                        type: "string"
                        enum:
                          - "chat"
                          - "video-streaming"
                          - "social"
                      isPushNotifiable:
                        type: "boolean"
                      titleTemplate:
                        type: "string"
                        maxLength: 1000
                      bodyTemplate:
                        type: "string"
                        maxLength: 5000
                      listenFromRoleIds:
                        type: "array"
                        maxItems: 10
                        items:
                          type: "string"
                          minLength: 1
                          maxLength: 900
                        description: "specific roles for get notify by event creator who has roles only"
                      ignoreFromRoleIds:
                        type: "array"
                        maxItems: 10
                        items:
                          type: "string"
                          minLength: 1
                          maxLength: 900
                        description: "specific roles for ignore notify by event creator who has roles only"
              required:
                - "level"
      responses:
        "200":
          $ref: "./global/response.yaml#/SaveApiResponse"
        "403":
          $ref: "./global/error.yaml#/PermissionDenidedError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v3/polls:
    post:
      summary: "create a poll"
      tags:
        - "Poll"
      security:
        - BearerAuth: []
      description: "Create a poll\n"
      requestBody:
        description: "Information of a poll to be created.\n### Required\n- at least 2 options\n- dataType currently support only `text`\n- closedIn unit must be `milliseconds`\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                text:
                  type: "string"
                question:
                  type: "string"
                  description: "question."
                answers:
                  type: "array"
                  minimum: 2
                  maxItems: 10
                  items:
                    type: "object"
                    properties:
                      dataType:
                        description: "Datatype of answer (current only string)."
                        type: "string"
                        enum:
                          - "text"
                      data:
                        type: "string"
                answerType:
                  description: "single or multiple."
                  type: "string"
                  enum:
                    - single
                    - multiple
                    - null
                  default: null
                closedIn:
                  type: "number"
                  description: "Countdown time to close vote (milliseconds)"
              required:
                - "data"
      responses:
        "200":
          $ref: "./v3/poll/response.yaml#/PollResponse"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/polls/{pollId}:
    put:
      summary: "update status poll"
      tags:
        - "Poll"
      security:
        - BearerAuth: []
      description: "update a poll\n"
      parameters:
        - name: "pollId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Information of a poll to be updated.\n### Required\n- currently support only `closed`\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                text:
                  type: "string"
                status:
                  description: "poll status"
                  type: "string"
                  default: "closed"
              required:
                - "data"
      responses:
        "200":
          $ref: "./v3/poll/response.yaml#/PollResponse"
        "403":
          $ref: "./global/error.yaml#/PollForbiddenError"
        "404":
          $ref: "./global/error.yaml#/PollNotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    get:
      summary: "get poll"
      tags:
        - "Poll"
      security:
        - BearerAuth: []
      description: "List users who vote the poll with specific answer\n"
      parameters:
        - name: "pollId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v3/poll/response.yaml#/PollResponse"
        "404":
          $ref: "./global/error.yaml#/PollNotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "delete poll"
      tags:
        - "Poll"
      security:
        - BearerAuth: []
      description: "delete a poll\n"
      parameters:
        - name: "pollId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "poll deleted"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      success:
                        type: "boolean"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "404":
          $ref: "./global/error.yaml#/PollNotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/polls/{pollId}/votes:
    post:
      summary: "vote poll"
      tags:
        - "Poll"
      security:
        - BearerAuth: []
      description: "Client vote poll\n"
      parameters:
        - name: "pollId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Information of a poll to be voted.\n### Required\n- answerIds for vote the poll\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                answerIds:
                  description: "poll id"
                  type: "array"
                  items:
                    type: "string"
              required:
                - "data"
      responses:
        "200":
          $ref: "./v3/poll/response.yaml#/PollResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "404":
          $ref: "./global/error.yaml#/PollNotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/polls/{pollId}/answers/{answerId}:
    get:
      summary: "List users who vote the poll with specific answer"
      tags:
        - "Poll"
      security:
        - BearerAuth: []
      description: "List users who vote the poll with specific answer\n"
      parameters:
        - name: "pollId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
        - name: "answerId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "lastCreated"
              - "firstCreated"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
              before:
                type: "string"
                maxLength: 24
              after:
                type: "string"
      responses:
        "200":
          $ref: "./v3/poll/response.yaml#/PollPaginationResponse"
        "404":
          $ref: "./global/error.yaml#/PollNotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v3/posts:
    get:
      summary: "query posts"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Query posts\n"
      parameters:
        - name: "targetId"
          in: "query"
          schema:
            type: "string"
            maxLength: 900
        - name: "targetType"
          required: true
          in: "query"
          schema:
            type: "string"
            enum:
              - "community"
              - "user"
              - "content"
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
              - "lastUpdated"
              - "firstUpdated"
            default: "lastCreated"
        - name: "dataType"
          in: "query"
          schema:
            type: "string"
            maxLength: 900
          example: "upstra.customtype"
          description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
          deprecated: true
        - name: "hasFlag"
          in: "query"
          schema:
            type: "boolean"
            default: null
          description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.  \n"
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
        - name: "dataTypes"
          in: "query"
          description: >
            Child post data type to filter. Only applied if the option `matchingOnlyParentPost` is `false`.
            The value in array could be oneOf:
              * `video`
              * `image`
              * `file`
              * `liveStream`
              * custom post type
                * must be a string in namespace like format (ex. `upstra.customtype`, `com.eko.birthday`)
          schema:
            type: "array"
            maxItems: 10
            items:
              oneOf:
                - type: "string"
                  enum:
                    - "video"
                    - "image"
                    - "file"
                    - "liveStream"
                  description: "Child post data type to filter. Only applied if the option `matchingOnlyParentPost` is `false`"
                - type: "string"
                  example: "upstra.customtype"
                  description: 'custom post type - must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
        - name: "tags"
          in: "query"
          schema:
            type: "array"
            minItems: 0
            maxItems: 5
            items:
              type: "string"
              maxLength: 24
        - name: "matchingOnlyParentPost"
          in: "query"
          schema:
            type: "boolean"
            default: true
          description: "An option whether to filter only parent post or not. If `true` will return only parent posts, else will return both parent and child posts"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostPaginationApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "create a post"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Create a post\n"
      requestBody:
        description: "information of a post to be created.\n\nWhen `dataType` is set `data` payload can be anything but it will not support normal data capability (ex. images and files) and `data` payload size will be limit to `100kb`\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                text:
                  type: "string"
                  deprecated: true
                data:
                  type: "object"
                  description: "require text or images or files (can't add images with files)"
                  properties:
                    text:
                      type: "string"
                    images:
                      type: "array"
                      items:
                        type: "string"
                    files:
                      type: "array"
                      items:
                        type: "string"
                  required:
                    - "text"
                dataType:
                  type: "string"
                  example: "upstra.customtype"
                  description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'
                targetType:
                  type: "string"
                  enum:
                    - "user"
                    - "community"
                    - "content"
                  default: "user"
                targetId:
                  type: "string"
                  example: "<userId>"
                metadata:
                  type: "object"
                postId:
                  type: "string"
                tags:
                  type: "array"
                  minItems: 0
                  maxItems: 5
                  items:
                    type: "string"
                    maximum: 24
                    description: "tags"
                createdAt:
                  type: "string"
                  description: "The date/time when a post is created."
                  format: "date-time"
                  example: "2022-07-07T04:24:20.444Z"
              required:
                - "data"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/posts/{postId}:
    get:
      summary: "get a post by ID"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Get a post by ID\n"
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "update a post"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Update a post\n"
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
      requestBody:
        description: "information of a post to be updated.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                text:
                  type: "string"
                  deprecated: true
                data:
                  type: "object"
                  properties:
                    text:
                      type: "string"
                      maximum: 50000
                      description: "For updating text in the post"
                    fileId:
                      type: "string"
                      maximum: 100
                      description: "Put file id to update file,image inside file, image post (video is not supported yet)"
                    streamId:
                      type: "string"
                      maximum: 100
                      description: "Put stream id to update live streaming post with new streaming"
                    thumbnailFileId:
                      type: "string"
                      maximum: 100
                      description: "Put image file id to update video file thumbnail in video post"
                metadata:
                  type: "object"
                tags:
                  type: "array"
                  minItems: 0
                  maxItems: 5
                  items:
                    type: "string"
                    maximum: 24
                    description: "tags"
              required:
                - "postId"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "delete a post"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Delete a post\n"
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
      responses:
        "200":
          description: "post information"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      success:
                        type: "boolean"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/posts/{postId}/approve:
    post:
      summary: "Approve reviewing post"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Get a post by ID\n"
      parameters:
        - in: "path"
          name: "postId"
          required: true
          schema:
            type: "string"
            minimum: 1
          description: "Post public id"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/posts/{postId}/decline:
    post:
      summary: "Decline reviewing post"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Get a post by ID\n"
      parameters:
        - in: "path"
          name: "postId"
          required: true
          schema:
            type: "string"
            minimum: 1
          description: "Post public id"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/posts/{postId}/flag:
    post:
      summary: "flag a post."
      tags:
        - "Post"
      security:
        - BearerAuth: []
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostResponse"
        "403":
          $ref: "./global/error.yaml#/NumberOfFlagExceedError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/posts/{postId}/isflagbyme:
    get:
      summary: "Check whether user flag a given post."
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Check whether user flag a given post.\n"
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
      responses:
        "200":
          $ref: "./global/response.yaml#/IsSocialFlagByMeResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
  /api/v3/posts/{postId}/unflag:
    delete:
      summary: "unflag a post."
      tags:
        - "Post"
      security:
        - BearerAuth: []
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/posts/list:
    get:
      summary: "get list of post"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Get list of post\n"
      parameters:
        - name: "postIds"
          in: "query"
          schema:
            type: "array"
            maxItems: 100
            items:
              type: "string"
              maxLength: 50
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/posts/{postId}/flags:
    delete:
      summary: "clear flags"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
            maxLength: 900
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostResponse"
        "403":
          $ref: "./global/error.yaml#/PermissionDenidedError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/posts:
    post:
      summary: "create a post"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Create a post\n"
      requestBody:
        description: "information of a post to be created.\n\nrequire text or at least 1 attachments\n\n### Custom post\n- When `dataType` is set as the custom name (dot separated string format, see the `dataType` field section), `data` payload can be anything but it will not support normal data capability (ex. `text` data will not be created)\nand `data` payload size will be limit to `100kb`\n- `attachments` will be ignored, users need to keep them in `data` field and handle the file info by themselves\n\n### Image, File, Video post\n- Put `type` with file id in `attachments`\n- Image and File data can be picked from `fileId` in `data` object in child post\n- Video fileId for each resolution will be in `videoFileId` in `data` object in child post\n\n### Live streaming post\n- When put `dataType` as `liveStream` and `streamId` in `data`, post will be created as live streaming post\n- `attachments` will be ignored\n- Video streaming info will be in `videoStreamings` object in response\n\n### Poll post\n- When put `dataType` as `poll` and `pollId` in `data`, post will be created as poll post\n- `attachments` will be ignored\n- Poll info will be in `polls` object in response\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                data:
                  type: "object"
                  properties:
                    text:
                      type: "string"
                      description: "data for text in post parent"
                      example: "example text"
                    streamId:
                      type: "string"
                      description: "video streaming id for create live streaming post"
                      example: "81559bcc3a5bb3b6bbd69a83b89d337e"
                    pollId:
                      type: "string"
                      description: "poll id for create poll post"
                      example: "53a9fd8b5aaa1af6c5a1bbd245ce4a9b1627373735551"
                attachments:
                  type: "array"
                  items:
                    type: "object"
                    description: "attachment info"
                    properties:
                      fileId:
                        type: "string"
                        example: "57b916d38eaf8010caddfb7759a2d06c"
                        description: "file id for attachment"
                      type:
                        type: "string"
                        description: "attachment type"
                        enum:
                          - "image"
                          - "file"
                          - "video"
                dataType:
                  type: "string"
                  example: "upstra.customtype"
                  description: 'Must be in dot separated string format or system defined format (ex. "upstra.customtype", "com.eko.birthday", "liveStream")'
                targetType:
                  type: "string"
                  enum:
                    - "user"
                    - "community"
                    - "content"
                  default: "user"
                  description: "where to create post to"
                targetId:
                  type: "string"
                  example: "public_user_id"
                  description: "Resource public id depends on target type (ex. target type is community, target id will be community public id)"
                metadata:
                  type: "object"
                  example:
                    anything: "you want"
                postId:
                  type: "string"
                  example: "postidiwant"
                  description: "for specify public post id on post creation"
                tags:
                  type: "array"
                  minItems: 0
                  maxItems: 5
                  items:
                    type: "string"
                    description: "tags"
                    maximum: 24
                mentionees:
                  type: "array"
                  description: "The object of the mentions type and user who get a notification from the post."
                  items:
                    type: "object"
                    properties:
                      type:
                        type: "string"
                        example: "user"
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - "user"
                      userIds:
                        type: "array"
                        example:
                          - "userId1"
                          - "userId2"
                        description: "Array of UserId. if the mention type is a channel, doesn't send userIds"
                        items:
                          type: "string"
                createdAt:
                  type: "string"
                  description: "The date/time when a post is created."
                  format: "date-time"
                  example: "2022-07-07T04:24:20.444Z"
              required:
                - "data"
      responses:
        "200":
          $ref: "./v4/post/response.yaml#/PostResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    get:
      summary: "query a post"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Query posts\n"
      parameters:
        - name: "targetId"
          in: "query"
          required: true
          schema:
            type: "string"
            maxLength: 900
        - name: "targetType"
          in: "query"
          schema:
            type: "string"
            enum:
              - "community"
              - "user"
              - "content"
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "lastCreated"
              - "firstCreated"
              - "lastUpdated"
              - "firstUpdated"
            default: "lastCreated"
        - name: "hasFlag"
          in: "query"
          schema:
            type: "boolean"
            default: null
          description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
              before:
                type: "string"
                maxLength: 24
              after:
                type: "string"
                maxLength: 24
              updatedAt:
                type: "string"
                maxLength: 100
          description: "use updatedAt when sort by first/lastUpdated"
        - name: "feedType"
          in: "query"
          schema:
            type: "array"
            minItems: 1
            maxItems: 4
            items:
              type: "string"
              enum:
                - "reviewing"
                - "published"
            example: ["published"]
        - name: "dataTypes"
          in: "query"
          schema:
            type: "array"
            minItems: 1
            maxItems: 4
            items:
              type: "string"
              maxLength: 100
              enum:
                - "video"
                - "image"
                - "file"
                - "liveStream"
                - "poll"
          description: "Child post data type to filter. Only applied if the option `matchingOnlyParentPost` is `false`"
        - name: "tags"
          in: "query"
          schema:
            type: "array"
            minItems: 0
            maxItems: 5
            items:
              type: "string"
              maximum: 24
          description: "tags"
        - name: "matchingOnlyParentPost"
          in: "query"
          schema:
            type: "boolean"
            default: true
          description: "An option to filter only parent post. If `true` will return only parent post, else will return both parent and child posts"
      responses:
        "200":
          $ref: "./v4/post/response.yaml#/PostPaginationApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/posts/{postId}:
    put:
      summary: "update a post"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Update a post\n"
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "information of a post to be updated.\n### Image, File, Video post update - Put `type` with file id in `attachments` - Image and File data can be picked from `fileId` in `data` object in child post - Video fileId for each resolution will be in `videoFileId` in `data` object in child post\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                text:
                  type: "string"
                  deprecated: true
                data:
                  type: "object"
                  properties:
                    text:
                      type: "string"
                      maximum: 50000
                      description: "For updating text in the post"
                    fileId:
                      type: "string"
                      maximum: 100
                      description: "Put file id to update file,image inside file, image post (video is not supported yet)"
                    streamId:
                      type: "string"
                      maximum: 100
                      description: "Put stream id to update live streaming post with new streaming"
                    thumbnailFileId:
                      type: "string"
                      maximum: 100
                      description: "Put image file id to update video file thumbnail in video post"
                metadata:
                  type: "object"
                tags:
                  type: "array"
                  minItems: 0
                  maxItems: 5
                  items:
                    type: "string"
                    maximum: 24
                    description: "tags"
                mentionees:
                  type: "array"
                  description: "The object of the mentions type and user who get a notification from the post."
                  items:
                    type: "object"
                    properties:
                      type:
                        type: "string"
                        example: "user"
                        description: "type: * `user` - need to specific userIds and notification mentions individual user\n"
                        enum:
                          - "user"
                      userIds:
                        type: "array"
                        example:
                          - "userId1"
                          - "userId2"
                        description: "Array of UserId. if the mention type is a channel, doesn't send userIds"
                        items:
                          type: "string"
                attachments:
                  type: "array"
                  items:
                    type: "object"
                    description: "attachment info"
                    properties:
                      fileId:
                        type: "string"
                        example: "57b916d38eaf8010caddfb7759a2d06c"
                        description: "file id for attachment"
                      type:
                        type: "string"
                        description: "attachment type"
                        enum:
                          - "image"
                          - "file"
                          - "video"
      responses:
        "200":
          $ref: "./v4/post/response.yaml#/PostResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "delete a post"
      tags:
        - "Post"
      security:
        - BearerAuth: []
      description: "Delete a post\n"
      parameters:
        - name: "postId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "permanent"
          in: "query"
          schema:
            type: "boolean"
            default: false
            description: "If permanent data will be hard deleted"
      responses:
        "200":
          description: "post information"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      success:
                        type: "boolean"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v1/presence/settings:
    get:
      summary: Get presence feature setting on both network and user level
      description: Get presence feature setting on both network and user level
      tags:
        - "Presence"
      responses:
        "200":
          $ref: "./v1/presence/response.yaml#/GetPresenceSettingResponse"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
      security:
        - BearerAuth: []
  /api/v1/presence/settings/user:
    put:
      summary: Update presence feature setting on user level
      description: Update presence feature setting on user level.
      tags:
        - "Presence"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
              required:
                - enabled
      responses:
        "200":
          $ref: "./v1/presence/response.yaml#/UpdatePresenceUserSettingResponse"
        "403":
          description: Forbidden error due to feature is not enabled.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/ForbiddenError"
              example:
                status: error
                code: 400300
                message: The feature is not enabled!
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
      security:
        - BearerAuth: []
  /api/v1/presence/users/list:
    get:
      summary: Get presence state of provided user list
      description: >
        Get presence state of provided user list
          - Max userIds list of 220 items
          - Each id max length up to 300
      tags:
        - Presence

      parameters:
        - name: userIds
          in: query
          required: true
          schema:
            $ref: "./v1/presence/parameter.yaml#/UserIds_Params"
      responses:
        "200":
          $ref: "./v1/presence/response.yaml#/GetUserPresenceListResponse"
        "403":
          description: Forbidden error due to feature is not enabled.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/ForbiddenError"
              example:
                status: error
                code: 400300
                message: The feature is not enabled!
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v1/presence/network/users:
    get:
      summary: Get online users in a network
      description: >
        Get online users in a network
         - Automatically sortedBy heartbeat time)
         - Return max 1000 users
      tags:
        - Presence
      parameters:
        - name: orderBy
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          $ref: "./v1/presence/response.yaml#/GetOnlineUsersResponse"
        "403":
          description: Forbidden error due to feature is not enabled.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/ForbiddenError"
              example:
                status: error
                code: 400300
                message: The feature is not enabled!
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
      security:
        - BearerAuth: []
  /api/v1/presence/network/users/count:
    get:
      summary: Get number of online users in a network
      description: Get number of online users in a network
      tags:
        - Presence
      responses:
        "200":
          $ref: "./v1/presence/response.yaml#/GetOnlineUsersCountReponse"
        "403":
          description: Forbidden error due to feature is not enabled.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/ForbiddenError"
              example:
                status: error
                code: 400300
                message: The feature is not enabled!
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
      security:
        - BearerAuth: []
  /api/v1/presence/heartbeat:
    post:
      summary: Send a presence heartbeat
      description: Send a presence heartbeat
      tags:
        - Presence
      responses:
        "202":
          $ref: "./v1/presence/response.yaml#/SendHeartbeatResponse"
        "403":
          description: Forbidden error due to feature is not enabled.
          content:
            application/json:
              schema:
                $ref: "./global/error.yaml#/ForbiddenError"
              example:
                status: error
                code: 400300
                message: The feature is not enabled!
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
      security:
        - BearerAuth: []

  /api/v2/reactions/messages/most:
    get:
      summary: "Get message ids by the most of reactions."
      tags:
        - "Reaction"
      security:
        - BearerAuth: []
      description: "Get message ids by the most of reactions.\n"
      parameters:
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            minimum: 1
        - name: "reactionName"
          in: "query"
          schema:
            type: "string"
      responses:
        "200":
          description: "Message information."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    messageId:
                      type: "string"
                    reactionsCount:
                      type: "integer"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v2/reactions:
    get:
      summary: "get list of reactions."
      tags:
        - "Reaction"
      security:
        - BearerAuth: []
      description: "Get paginable list of reactions.\n"
      parameters:
        - name: "referenceId"
          in: "query"
          required: true
          schema:
            type: "string"
            maxLength: 900
        - name: "referenceType"
          in: "query"
          required: true
          schema:
            type: "string"
            enum:
              - "message"
              - "post"
              - "comment"
              - "story"
        - name: "reactionName"
          in: "query"
          schema:
            type: "string"
            maxLength: 100
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 0
              token:
                type: "string"
                maxLength: 1000
              skip:
                type: "integer"
                minimum: 0
      responses:
        "200":
          $ref: "./v2/reaction/response.yaml#/ReactionResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "add reaction to any document."
      tags:
        - "Reaction"
      security:
        - BearerAuth: []
      description: "Add reaction to a document referenced by ID and type.\n"
      requestBody:
        description: "reference ID and type with reaction name\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                referenceId:
                  type: "string"
                  maxLength: 900
                referenceType:
                  type: "string"
                  enum:
                    - "message"
                    - "post"
                    - "comment"
                    - "story"
                reactionName:
                  type: "string"
                  maxLength: 100
                referenceVersion:
                  description: "The API version of the document (Ex. If using with message v5, the referenceVersion will be 5)"
                  type: "integer"
              required:
                - "referenceId"
                - "referenceType"
                - "reactionName"
      responses:
        "200":
          description: "Returns a reaction id is added"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  addedId:
                    type: "string"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "remove reaction from any document."
      tags:
        - "Reaction"
      security:
        - BearerAuth: []
      description: "Remove reaction from a document referenced by ID and type.\n"
      parameters:
        - in: query
          name: referenceId
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 900
          description: Reference id
        - in: query
          name: referenceType
          required: true
          schema:
            type: string
            enum:
              - "message"
              - "post"
              - "comment"
              - "story"
            minLength: 1
            maxLength: 900
          description: Reference type
        - in: query
          name: reactionName
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 100
          description: Reaction name
        - in: query
          name: referenceVersion
          schema:
            type: integer
          description: "The API version of the document (Ex. If using with message v5, the referenceVersion will be 5)"
      responses:
        "200":
          description: "Returns a reaction id is removed"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  removedId:
                    type: "string"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/reactions:
    get:
      summary: "get list of reactions."
      tags:
        - "Reaction"
      security:
        - BearerAuth: []
      description: "Get paginable list of reactions.\n"
      parameters:
        - name: "referenceId"
          in: "query"
          required: true
          schema:
            type: "string"
            maxLength: 900
        - name: "referenceType"
          in: "query"
          required: true
          schema:
            type: "string"
            enum:
              - "message"
              - "post"
              - "comment"
              - "story"
        - name: "referenceVersion"
          in: "query"
          schema:
            type: "integer"
        - name: "reactionName"
          in: "query"
          schema:
            type: "string"
            maxLength: 100
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 0
              token:
                type: "string"
                maxLength: 200
      responses:
        "200":
          $ref: "./v3/reaction/response.yaml#/ReactionResponse"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v2/roles:
    get:
      summary: "get all roles"
      tags:
        - "Role"
      security:
        - ApiKeyAuth: []
      description: "Get all roles\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "filter"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "#/components/responses/RolesResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      summary: "add permissions."
      tags:
        - "Role"
      security:
        - ApiKeyAuth: []
      description: "Add permissions\n"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
        - name: "Content-Type"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Permission information to be added\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                publicIds:
                  type: "array"
                  items:
                    type: "string"
                permissions:
                  type: "array"
                  items:
                    type: "string"
              required:
                - "publicIds"
                - "permissions"
      responses:
        "200":
          description: "OK"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /api/v3/roles:
    get:
      summary: "Get roles (pagination support)"
      tags:
        - "Role"
      security:
        - BearerAuth: []
      description: "Get roles (pagination support)\n"
      parameters:
        - name: "keyword"
          in: "query"
          required: true
          schema:
            type: "string"
            minLength: 0
            maxLength: 100
          description: "search keyword"
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "lastCreated"
              - "firstCreated"
              - "displayName"
            default: "lastCreated"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
      responses:
        "200":
          $ref: "./v3/role/response.yaml#/RoleResponse"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    post:
      summary: "Create role"
      tags:
        - "Role"
      security:
        - BearerAuth: []
      description: "Create a role\n"
      requestBody:
        description: "information of a role to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                roleId:
                  type: "string"
                  description: "role id"
                  minLength: 1
                  maxLength: 100
                displayName:
                  type: "string"
                  description: "display name of role"
                  minLength: 0
                  maxLength: 100
                permissions:
                  type: "array"
                  items:
                    type: "string"
                  description: "The list of permission for this role. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions"
              required:
                - "roleId"
                - "permissions"
      responses:
        "200":
          $ref: "./v3/role/response.yaml#/RoleResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "403":
          $ref: "./global/error.yaml#/GenericPermissionDenidedError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/roles/{roleId}:
    get:
      summary: "Get role"
      tags:
        - "Role"
      security:
        - BearerAuth: []
      description: "Get a role\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v3/role/response.yaml#/RoleResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "Update role"
      tags:
        - "Role"
      security:
        - BearerAuth: []
      description: "Update a role\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "information of a role to be created.\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                roleId:
                  type: "string"
                  description: "role id to update"
                  minLength: 1
                  maxLength: 100
                displayName:
                  type: "string"
                  description: "display name of role to update"
                  minLength: 0
                  maxLength: 100
                permissions:
                  type: "array"
                  items:
                    type: "string"
                  description: "The list of permission to update. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions"
              required:
                - "roleId"
                - "permissions"
      responses:
        "200":
          $ref: "./v3/role/response.yaml#/RoleResponse"
        "403":
          $ref: "./global/error.yaml#/GenericPermissionDenidedError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "Delete role"
      tags:
        - "Role"
      security:
        - BearerAuth: []
      description: "Delete a role\n"
      parameters:
        - name: "roleId"
          in: "path"
          required: true
          schema:
            type: "string"
        - in: query
          name: roleId
          schema:
            type: string
            minLength: 1
            maxLength: 100
          description: role id to delete
      responses:
        "200":
          $ref: "./v3/role/response.yaml#/RoleResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "403":
          $ref: "./global/error.yaml#/GenericPermissionDenidedError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v3/sessions:
    post:
      summary: "Register a session"
      deprecated: true
      tags:
        - "Session"
      parameters:
        - name: "x-api-key"
          in: "header"
          required: true
          schema:
            type: "string"
      description: "Register a session in order to receive access token to perform sdk operations.\n"
      requestBody:
        description: "Information about user and devices that he/she use to connect to. If displayName is provide, that user display is updated as well.\n\nIf userId doesn't exists, new user will be created.\n\nauthToken need to pass when network option is set to secure\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
                  minLength: 1
                  maxLength: 50
                deviceId:
                  type: "string"
                  minLength: 1
                  maxLength: 150
                deviceInfo:
                  type: "object"
                  properties:
                    kind:
                      type: "string"
                      enum:
                        - "ios"
                        - "android"
                        - "web"
                        - "node"
                    model:
                      type: "string"
                      maxLength: 100
                    sdkVersion:
                      type: "string"
                      maxLength: 30
                displayName:
                  type: "string"
                  maxLength: 100
                authToken:
                  type: "string"
                  description: "Authentication token from /api/v3/authentication/token"
                  minLength: 1
                  maxLength: 100
              required:
                - "userId"
                - "deviceId"
      responses:
        "200":
          $ref: "./v3/session/response.yaml#/SessionResponse"
        "401":
          $ref: "./global/error.yaml#/UserIsSystemBanned"
        "403":
          $ref: "./global/error.yaml#/UserIsGlobalBanned"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    get:
      summary: "Verify access token"
      tags:
        - "Session"
      description: "Verify access token. The caller must add accessToken in header."
      responses:
        "200":
          description: "Access token is valid"
        "401":
          description: "Access token is invalid or expired"
        "403":
          description: "User is global banned"
        "404":
          description: "Not found"
        "422":
          description: "Parameters validation error"
      security:
        - BearerAuth: []
  /api/v4/sessions:
    post:
      summary: "Register a session"
      tags:
        - "Session"
      parameters:
        - name: "x-api-key"
          in: "header"
          required: true
          schema:
            type: "string"
      description: "Register a session in order receive access token to perform sdk operations.\n"
      requestBody:
        description: "Information about user and devices that he/she use to connect to. If displayName is provide, that user display is updated as well.\n\nIf userId doesn't exists, new user will be created.\n\nauthToken need to pass when network option is set to secure\n\naccessToken expiry 30 days\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
                  minLength: 1
                  maxLength: 50
                deviceId:
                  type: "string"
                  minLength: 1
                  maxLength: 150
                deviceInfo:
                  type: "object"
                  properties:
                    kind:
                      type: "string"
                      enum:
                        - "ios"
                        - "android"
                        - "web"
                        - "node"
                    model:
                      type: "string"
                      maxLength: 100
                    sdkVersion:
                      type: "string"
                      maxLength: 30
                displayName:
                  type: "string"
                  maxLength: 100
                authToken:
                  type: "string"
                  description: "Authentication token from /api/v3/authentication/token"
                  minLength: 1
                  maxLength: 100
              required:
                - "userId"
                - "deviceId"
      responses:
        "200":
          $ref: "./v4/session/response.yaml#/SessionResponse"
        "401":
          $ref: "./global/error.yaml#/UserIsSystemBanned"
        "403":
          $ref: "./global/error.yaml#/UserIsGlobalBanned"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: Revoke access token
      tags:
        - "Session"
      security:
        - BearerAuth: []
      description: Revoke an access token. If the userId is provided, this will revoke all access tokens of that user. Only admin can revoke all access tokens of a user.
      parameters:
        - in: query
          name: userId
          schema:
            type: string
            minLength: 1
            maxLength: 50
          description: User id for revocation
        - in: query
          name: isPublic
          schema:
            type: boolean
            default: true
          description: A flag indicating whether the userId is a public id or not
      responses:
        "200":
          description: "Revoke access token success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  success:
                    type: "boolean"
                    default: true
        "404":
          $ref: "./global/error.yaml#/UserIdNotFoundError"
        "403":
          $ref: "./global/error.yaml#/UserIsGlobalBanned"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/sessions/users/{userId}:
    delete:
      summary: Revoke all user's access tokens by admin
      tags:
        - "Session"
      security:
        - BearerAuth: []
      description: Revoke all user's access tokens by admin
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: string
            minLength: 1
            maxLength: 50
          description: User id for revocation
        - in: query
          name: isPublic
          schema:
            type: boolean
            default: true
          description: A flag indicating whether the userId is a public id or not
      responses:
        "200":
          description: "Revoke access token success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  success:
                    type: "boolean"
                    default: true
        "404":
          $ref: "./global/error.yaml#/UserIdNotFoundError"
        "403":
          $ref: "./global/error.yaml#/UserIsGlobalBanned"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v4/stories:
    post:
      summary: Create a story
      description: Create a story
      tags:
        - Story
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./v4/story/request.yaml#/CreateStoryRequestPayload"
      responses:
        "200":
          description: Create Result
          content:
            application/json:
              schema:
                $ref: "./v4/story/response.yaml#/CreateStoryResponsePayload"

        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                "User reaches daily quota":
                  value:
                    status: error
                    code: 400000
                    message: You have reached your daily story creation quota. You can delete an existing story or wait for a story to expire before creating a new one
                "Target reaches quota":
                  value:
                    status: error
                    code: 400000
                    message: This community has reached its daily story creation quota. Please try again later.
                "Text is required in story type text":
                  value:
                    status: error
                    code: 400000
                    message: Text is required in data object.
                "File ID is required in story type media":
                  value:
                    status: error
                    code: 400000
                    message: File is required in data object.
                "URL is required in hyperlink item.":
                  value:
                    status: error
                    code: 400000
                    message: url is required in hyperlink item.
                "Invalid url format in hyperlink item (no TLD or else)":
                  value:
                    status: error
                    code: 400000
                    message: Invalid url format in hyperlink item.
                "Target not found.":
                  value:
                    status: error
                    code: 400000
                    message: Community not found.
                "Target is deleted.":
                  value:
                    status: error
                    code: 400000
                    message: The community has been deleted.
        "403":
          description: No permission to create story.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                "Have no permission in community to create a story":
                  value:
                    status: error
                    code: 400300
                    message: You are not allowed to do this
                "URL provided in an item is not in the whitelist":
                  value:
                    status: error
                    code: 400309
                    message: Link is not allowed
        "422":
          description: Parameters Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Parameters Validation Error!
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error
    get:
      summary: Query stories by target
      description: Query stories by target
      tags:
        - Story
      parameters:
        - name: targetId
          in: query
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/TargetId"
        - name: targetType
          in: query
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/TargetType"
        - name: dataType
          in: query
          schema:
            $ref: "./v4/story/parameters.yaml#/DataType"
        - name: isExpired
          in: query
          schema:
            $ref: "./v4/story/parameters.yaml#/IsExpired"
        - name: options
          in: query
          schema:
            $ref: "./v4/story/parameters.yaml#/QueryOptions"
      responses:
        "200":
          description: Story Information
          content:
            application/json:
              schema:
                $ref: "./v4/story/response.yaml#/StoryWithTargetPaginatedResponsePayload"
        "403":
          description: Forbidden Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400301
                message: User xxx is not community xxx member
        "404":
          description: Target not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400400
                message: CommunityId xxx not found
        "422":
          description: Parameters Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Parameters Validation Error!
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error
  /api/v4/stories/count:
    get:
      summary: Count stories by target
      description: Count stories by target which includes both acive and expired stories. Only admin can use this API.
      tags:
        - Story
      security:
        - BearerAuth: []
      parameters:
        - name: targetId
          in: query
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/TargetId"
        - name: targetType
          in: query
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/TargetType"
      responses:
        "200":
          description: Story Count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 10
        "404":
          description: Target not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400400
                message: CommunityId xxx not found
        "422":
          description: Parameters Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Parameters Validation Error!
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error
  /api/v4/stories/seen:
    get:
      summary: Query story targets by multiple targets
      description: Query story targets by multiple targets
      tags:
        - Story
      parameters:
        - name: targets
          description: >
            Target object. The target object is an array of objects that contain targetId and targetType.
            Max up to 10 items
              * targetId: ID of a target.
              * targetType: Type of a target (user, community).
          in: query
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/Targets"
      responses:
        "200":
          description: Story targets Information
          content:
            application/json:
              schema:
                $ref: "./v4/story/response.yaml#/StoryTargetsResponsePayload"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                "Target not found.":
                  value:
                    status: error
                    code: 400000
                    message: Community not found.
                "Target is deleted.":
                  value:
                    status: error
                    code: 400000
                    message: The community has been deleted.
        "422":
          description: Parameters Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Parameters Validation Error!
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error
  /api/v4/stories-by-targets:
    get:
      summary: Query stories by multiple targets
      description: Query stories by multiple targets
      tags:
        - Story
      parameters:
        - name: targets
          description: >
            Target object. The target object is an array of objects that contain targetId and targetType.
            Max up to 10 items
              * targetId: ID of a target.
              * targetType: Type of a target (user, community).
          in: query
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/Targets"
        - name: options
          in: query
          schema:
            $ref: "./v4/story/parameters.yaml#/QueryOptions"
      responses:
        "200":
          description: Story Information, sorted by the target order in the request then the sort option
          content:
            application/json:
              schema:
                $ref: "./v4/story/response.yaml#/StoryWithTargetResponsePayload"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                "Target not found.":
                  value:
                    status: error
                    code: 400000
                    message: Community not found.
                "Target is deleted.":
                  value:
                    status: error
                    code: 400000
                    message: The community has been deleted.
        "422":
          description: Parameters Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Parameters Validation Error!
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error
  /api/v4/stories/{storyId}:
    get:
      description: Get a story
      summary: Get a story
      tags:
        - Story
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/StoryId"
      responses:
        "200":
          description: Story Information
          content:
            application/json:
              schema:
                $ref: "./v4/story/response.yaml#/StoryResponsePayload"
        "403":
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400300
                message: User xxx is not community xxx member
        "404":
          description: Story not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400400
                message: Story not found
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error

    delete:
      description: Delete a story
      summary: Delete a story
      tags:
        - Story
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/StoryId"
        - name: permanent
          in: query
          required: false
          description: >
            If true, the story will be deleted permanently (hard deleted).
            If false, the story will be soft deleted.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Delete Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "403":
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400300
                message: You are not allowed to do this
        "404":
          description: Story not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400400
                message: Story not found
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error
  /api/v4/stories/{storyId}/flags:
    post:
      description: Flag a story
      summary: Flag a story
      tags:
        - Story
      security:
        - BearerAuth: []
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/StoryId"
      responses:
        "200":
          description: Story Information
          content:
            application/json:
              schema:
                $ref: "./v4/story/response.yaml#/StoryResponsePayload"
        "403":
          description: Forbidden error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                "Story creators cannot flag their own story.":
                  value:
                    status: error
                    code: 400301
                    message: Story creators cannot flag their own story.
                "Number of flags already exceed.":
                  value:
                    status: error
                    code: 400301
                    message: Number of flags already exceed.
        "404":
          description: Story not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400400
                message: Story not found
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error
    delete:
      description: Unflag a story
      summary: Unflag a story
      tags:
        - Story
      security:
        - BearerAuth: []
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/StoryId"
      responses:
        "200":
          description: Story Information
          content:
            application/json:
              schema:
                $ref: "./v4/story/response.yaml#/StoryResponsePayload"
        "403":
          description: Forbidden error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                "Story creators cannot unflag their own story.":
                  value:
                    status: error
                    code: 400301
                    message: Story creators cannot unflag their own story.
                "You never send a flag to this story.":
                  value:
                    status: error
                    code: 400301
                    message: You never send a flag to this story.
        "404":
          description: Story not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400400
                message: Story not found
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error
  /api/v4/stories/{storyId}/flags/all:
    delete:
      description: Clear all flags in a story. Only admin can use this API.
      summary: Clear all flags in a story.
      tags:
        - Story
      security:
        - BearerAuth: []
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            $ref: "./v4/story/parameters.yaml#/StoryId"
      responses:
        "200":
          description: Story Information
          content:
            application/json:
              schema:
                $ref: "./v4/story/response.yaml#/StoryResponsePayload"
        "403":
          description: Forbidden error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                "Only admin can clear flags":
                  value:
                    status: error
                    code: 400301
                    message: You are not allowed to do this.
        "404":
          description: Story not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 400400
                message: Story not found
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error
  /api/v5/me/global-story-targets:
    get:
      summary: Get global story targets
      description: Get global story targets. Return a list of story targets
      tags:
        - Story
      parameters:
        - name: seenState
          in: query
          description: the seen state option used for filter the seen/unseen story targets
          schema:
            $ref: "./v4/story/parameters.yaml#/SeenState"
        - name: limit
          in: query
          description: the amount of story targets per query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: token
          in: query
          required: false
          schema:
            type: string
            maxLength: 900
      responses:
        "200":
          description: Global Story Information
          content:
            application/json:
              schema:
                $ref: "./v4/story/response.yaml#/GlobalStoryTargetsResponsePayload"
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: error
                code: 500000
                message: Unexpected error

  /api/v2/users/ban:
    post:
      summary: "ban a user."
      tags:
        - "User"
      security:
        - ApiKeyAuth: []
      description: "Ban a user\n"
      requestBody:
        description: "User information to be baned\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
              required:
                - "userId"
      responses:
        "200":
          description: "OK"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v2/users/unban:
    post:
      summary: "unban a user."
      tags:
        - "User"
      security:
        - BearerAuth: []
      description: "Unban a user\n"
      requestBody:
        description: "User information to be unbaned\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
              required:
                - "userId"
      responses:
        "200":
          description: "OK"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v2/users/{userId}/flags:
    delete:
      summary: "clear flag a user."
      tags:
        - "User"
      security:
        - BearerAuth: []
      description: "Clear flag a user\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          $ref: "./v2/user/response.yaml#/UserApiResponse"
        "429":
          $ref: "./global/error.yaml#/RateLimitError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/users:
    get:
      summary: "Get users information."
      tags:
        - "User"
      security:
        - BearerAuth: []
      description: "Get users information (pagination supported)\n"
      parameters:
        - name: "keyword"
          in: "query"
          schema:
            type: "string"
            maxLength: 100
        - name: "filter"
          in: "query"
          schema:
            type: "string"
            enum:
              - "all"
              - "flagged"
            default: "all"
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
              - "displayName"
            default: "displayName"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
                minimum: 1
                maximum: 100
                default: 10
              token:
                type: "string"
                maxLength: 1000
      responses:
        "200":
          $ref: "./v3/user/response.yaml#/UserPaginationResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "Update user information."
      tags:
        - "User"
      security:
        - BearerAuth: []
      description: "Update user information such as displayName, roles, avatar and metadata\n"
      requestBody:
        description: "User information to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
                  maxLength: 50
                displayName:
                  type: "string"
                  maxLength: 100
                roles:
                  type: "array"
                  description: Only administrator can update system roles (moderator and admin)
                  maxItems: 10
                  items:
                    type: "string"
                    maxLength: 100
                metadata:
                  type: "object"
                  description: >
                    User metadata (max: 5,000 bytes)
                avatarFileId:
                  type: "string"
                  maxLength: 50
                avatarCustomUrl:
                  type: "string"
                  maxLength: 1000
                description:
                  type: "string"
                  maxLength: 500
      responses:
        "200":
          $ref: "./v3/user/response.yaml#/UserResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/users/list:
    get:
      summary: "Get users information by public id."
      tags:
        - "User"
      security:
        - BearerAuth: []
      description: "Get users information by public id.\n"
      parameters:
        - name: "userIds"
          in: "query"
          schema:
            type: "array"
            maxItems: 100
            items:
              type: "string"
              maxLength: 900
      responses:
        "200":
          $ref: "./v3/user/response.yaml#/UserResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/users/{userId}:
    get:
      summary: "Get one user information."
      tags:
        - "User"
      security:
        - BearerAuth: []
      description: "Get one user information.\n"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
        - name: "type"
          in: "query"
          schema:
            type: "string"
            enum:
              - "public"
              - "internal"
            default: "public"
      responses:
        "200":
          $ref: "./v3/user/response.yaml#/UserResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "403":
          $ref: "./global/error.yaml#/ForbiddenError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
          
  /api/v3/users/{userId}/isFlagByMe:
    get:
      summary: "Check whether user flag a given user."
      description: "Check whether user flag a given user.\n"
      tags:
        - "User"
      security:
        - BearerAuth: []
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            minLength: 1
            maxLength: 900
      responses:
        "200":
          description: "Is flag by me response."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  isFlagByMe:
                    type: "boolean"
        "404":
          $ref: "./global/error.yaml#/UserNotFoundError"
  /api/v4/users/{userId}:
    delete:
      summary: "Delete user"
      security:
        - BearerAuth: []
      tags:
        - "User"
      parameters:
        - in: "path"
          name: "userId"
          required: true
          schema:
            type: "string"
            minimum: 1
            maximum: 50
          description: "User public id"
        - in: query
          name: deleteAll
          schema:
            type: "boolean"
            default: false
          description: "true - it will hard delete this user created channels, messages, comments, posts, polls, reactions after user is deleted."
        - in: query
          name: markMessageDeleted
          schema:
            type: "boolean"
            default: false
          description: "true - it will hard delete this user messages after user is deleted."
        - in: query
          name: hardDeletePost
          schema:
            type: "boolean"
            default: false
          description: "true - it will hard delete this user posts after user is deleted."
        - in: query
          name: hardDeleteComment
          schema:
            type: "boolean"
            default: false
          description: "true - it will hard delete this user comments after user is deleted."
      description: "Delete user from system. User display name will be replaced with \"Deleted user\".\n\nContent that is created from the user will be able to be wiped depend on the options.\n\n**This API allow only admin user to call**\n"
      responses:
        "200":
          $ref: "./v4/user/response.yaml#/UserDeleteResponse"
        "400":
          $ref: "./global/error.yaml#/UserIsAlreadyDeletedError"
        "404":
          $ref: "./global/error.yaml#/UserNotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/me/flags/{userId}:
    post:
      summary: "Report user (flag user)"
      security:
        - BearerAuth: []
      tags:
        - "User"
      parameters:
        - in: "path"
          name: "userId"
          required: true
          schema:
            type: "string"
            minimum: 1
            maximum: 50
          description: "User public id"
      description: "Report user by user id.\n"
      responses:
        "200":
          $ref: "./v4/user/response.yaml#/FlagUserResponse"
        "404":
          $ref: "./global/error.yaml#/UserNotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "Unreported user (unflag user)"
      security:
        - BearerAuth: []
      tags:
        - "User"
      parameters:
        - in: "path"
          name: "userId"
          required: true
          schema:
            type: "string"
            minimum: 1
            maximum: 50
          description: "User public id"
      description: "Unreported user by user id.\n"
      responses:
        "200":
          $ref: "./v4/user/response.yaml#/UnflagUserResponse"
        "404":
          $ref: "./global/error.yaml#/UserNotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/me/user-blocks:
    get:
      summary: Get list of blocked users
      description: "Get list of blocked users\n"
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: token
          in: query
          schema:
            type: string
      responses:
        "200":
          $ref: "./v4/user/response.yaml#/GetBlockedUserListResponse"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v4/me/user-blocks/{userId}:
    post:
      summary: Block a user.
      tags:
        - User
      description: "Blocking a user\n"
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "./v4/user/response.yaml#/BlockUserResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "404":
          $ref: "./global/error.yaml#/UserNotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: Unblock a user
      tags:
        - User
      description: "Unblocking a user\n"
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "./v4/user/response.yaml#/UnblockUserResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "404":
          $ref: "./global/error.yaml#/UserNotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /api/v3/user-event/video-streaming:
    post:
      summary: "create user event for video streaming"
      tags:
        - "Video streaming"
      security:
        - BearerAuth: []
      requestBody:
        $ref: "./v3/user-event/request.yaml#/VideoStreamingUserEventRequestBody"
      responses:
        "200":
          $ref: "./v3/user-event/response.yaml#/VideoStreamingUserEventApiResponse"
        "500":
          $ref: "./global/error.yaml#/CustomValidationError"
  /api/v3/video-streaming:
    post:
      summary: "create video streaming"
      tags:
        - "Video streaming"
      security:
        - BearerAuth: []
      requestBody:
        description: "Information of video streaming to be created\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                title:
                  type: "string"
                  maxLength: 1000
                description:
                  type: "string"
                  maxLength: 5000
                thumbnailFileId:
                  type: "string"
                  maxLength: 50
                metadata:
                  type: "object"
                isSecure:
                  type: "boolean"
                  default: false
                resolution:
                  type: "string"
                  enum:
                    - "SD"
                    - "HD"
                    - "FHD"
                  default: "SD"
              required:
                - "title"
      responses:
        "200":
          $ref: "./v3/video-streaming/response.yaml#/VideoStreamingsApiResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    get:
      summary: "get list of video streaming"
      tags:
        - "Video streaming"
      security:
        - BearerAuth: []
      parameters:
        - name: "isLive"
          in: "query"
          schema:
            type: "boolean"
            default: false
        - name: "statuses"
          in: "query"
          schema:
            type: "array"
            maxItems: 10
            items:
              type: "string"
              enum:
                - "idle"
                - "live"
                - "ended"
                - "recorded"
          description: "Status of livestreaming  \n  * idle - streaming is just created  \n  * live - streamer is streaming now or streamer is reconnecting  \n  * ended - streamer stop streaming or streamer disconnect and not connect back in time period  \n  * recorded - live stream recordings available \n"
        - name: "userPublicIds"
          in: "query"
          schema:
            type: "array"
            maxItems: 100
            items:
              type: "string"
              maxLength: 50
        - name: "sortBy"
          in: "query"
          schema:
            type: "string"
            enum:
              - "firstCreated"
              - "lastCreated"
        - name: "isDeleted"
          in: "query"
          schema:
            type: "boolean"
            default: null
          description: "isDeleted:\n  * `null(default)` - Show both video streaming is activated and video streaming is inactivated.\n  * `true` - Show video streaming is inactivated only.\n  * `false` - Show video streaming is activated only.\n"
        - name: "options"
          in: "query"
          style: "deepObject"
          schema:
            type: "object"
            properties:
              limit:
                type: "integer"
              skip:
                type: "integer"
              token:
                type: "string"
                maxLength: 1000
      responses:
        "200":
          $ref: "./v3/video-streaming/response.yaml#/VideoStreamingPaginationApiResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/video-streaming/{streamId}:
    get:
      summary: "get single video-streaming item"
      tags:
        - "Video streaming"
      security:
        - BearerAuth: []
      parameters:
        - in: "path"
          name: "streamId"
          required: true
          schema:
            type: "string"
            maxLength: 50
          description: "Stream id to update"
      responses:
        "200":
          $ref: "./v3/video-streaming/response.yaml#/VideoStreamingsApiResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    put:
      summary: "update video streaming"
      tags:
        - "Video streaming"
      security:
        - BearerAuth: []
      parameters:
        - in: "path"
          name: "streamId"
          required: true
          schema:
            type: "string"
            maxLength: 50
          description: "Stream id to update"
      requestBody:
        description: "Information of video streaming to be updated\n"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                title:
                  type: "string"
                  maxLength: 1000
                description:
                  type: "string"
                  maxLength: 5000
                thumbnailFileId:
                  type: "string"
                  maxLength: 50
                metadata:
                  type: "object"
                resolution:
                  type: "string"
                  enum:
                    - "SD"
                    - "HD"
                    - "FHD"
                  default: "SD"
              required:
                - "title"
      responses:
        "200":
          $ref: "./v3/video-streaming/response.yaml#/VideoStreamingsApiResponse"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
    delete:
      summary: "delete video streaming"
      tags:
        - "Video streaming"
      security:
        - BearerAuth: []
      description: "Delete a video streaming\n"
      parameters:
        - in: "path"
          name: "streamId"
          required: true
          schema:
            type: "string"
            maxLength: 50
          description: "Stream id to update"
      responses:
        "200":
          description: "video streaming information"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      success:
                        type: "boolean"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"
  /api/v3/video-streaming/{streamId}/streaming-url:
    delete:
      summary: "dispose video streaming url"
      tags:
        - "Video streaming"
      security:
        - ApiKeyAuth: []
      description: "This API will update streaming status to `ended` and dispose apsara streaming url\n"
      parameters:
        - in: "path"
          name: "streamId"
          required: true
          schema:
            type: "string"
            maxLength: 50
          description: "Stream id to update"
      responses:
        "200":
          $ref: "./v3/video-streaming/response.yaml#/VideoStreamingsApiResponse"
        "400":
          $ref: "./global/error.yaml#/BadRequestError"
        "404":
          $ref: "./global/error.yaml#/NotFoundError"
        "500":
          $ref: "./global/error.yaml#/UnexpectedError"

  /webhook/channel.didAddUsers:
    get:
      tags:
        - "Webhook event"
      description: "Send user added event information whenever new member got added to a channel."
      responses:
        "200":
          description: "channel is channel information. userIds is a list of added userId. adderId is user who add other user to channel users is a list of user information."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "channel.didAddUsers"
                  data:
                    type: "object"
                    properties:
                      channel:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Channel"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
                      userIds:
                        type: "array"
                        items:
                          type: "string"
                      adderId:
                        type: "string"
  /webhook/channel.didBan:
    get:
      tags:
        - "Webhook event"
      description: "Send channel banned event whenever a channel got banned."
      responses:
        "200":
          description: "channel is channel information. userIds is a list of userIds who being banned. actorId is userId who ban other user. users is a list of userInfo"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "channel.didBan"
                  data:
                    type: "object"
                    properties:
                      channel:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Channel"
                      users:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/User"
                      actorId:
                        type: "string"
                      userIds:
                        type: "array"
                        items:
                          type: "string"
  /webhook/channel.didClose:
    get:
      tags:
        - "Webhook event"
      description: "Send channel close event information whenever a channel close."
      responses:
        "200":
          description: "channel is channel information."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "channel.didClose"
                  data:
                    type: "object"
                    properties:
                      channel:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Channel"
  /webhook/channel.didCreate:
    get:
      tags:
        - "Webhook event"
      description: "Send new created channel whenever a channel got create"
      responses:
        "200":
          description: "channel is channel information. userIds is a list of userId who is added to channel. users is a list of user information."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "channel.didCreate"
                  data:
                    type: "object"
                    properties:
                      channel:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Channel"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
                      userIds:
                        type: "array"
                        items:
                          type: "string"
  /webhook/channel.didJoin:
    get:
      tags:
        - "Webhook event"
      description: "Send join event information whenever a channel got joined"
      responses:
        "200":
          description: "channel is channel information. userIds is a list of joined userId. users is a list of user information."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "channel.didJoin"
                  data:
                    type: "object"
                    properties:
                      channel:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Channel"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
                      userIds:
                        type: "array"
                        items:
                          type: "string"
  /webhook/channel.didLeave:
    get:
      tags:
        - "Webhook event"
      description: "Send channel leave event information whenever someone leave a channel."
      responses:
        "200":
          description: "channel is channel information. userIds is a list of userId who leave channel. users is a list of userInfo"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "channel.didLeave"
                  data:
                    type: "object"
                    properties:
                      channel:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Channel"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
                      userIds:
                        type: "array"
                        items:
                          type: "string"
  /webhook/channel.didRemoveUsers:
    get:
      tags:
        - "Webhook event"
      description: "Send user removed event information whenever member got remove from channel."
      responses:
        "200":
          description: "channel is channel information. userIds is a list of removed userId. removerId is userId who remove other users from channel. users is a list of user information."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "channel.didRemoveUsers"
                  data:
                    type: "object"
                    properties:
                      channel:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Channel"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
                      userIds:
                        type: "array"
                        items:
                          type: "string"
                      removerId:
                        type: "string"
  /webhook/channel.didUpdate:
    get:
      tags:
        - "Webhook event"
      description: "Send channel updated event information whenever a channel got updated."
      responses:
        "200":
          description: "channel is channel information. userId is a userId who update channel. users is a list of userInfo"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "channel.didUpdate"
                  data:
                    type: "object"
                    properties:
                      channel:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Channel"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
                      userId:
                        type: "string"
  /webhook/channel.didUpdateMeta:
    get:
      tags:
        - "Webhook event"
      description: "Send channel's meta data updated event information whenever a channel's meta data got updated."
      responses:
        "200":
          description: "channel is channel information. userId is a userId who update channel's meta data. users is a list of userInfo"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "channel.didUpdateMeta"
                  data:
                    type: "object"
                    properties:
                      channel:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Channel"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
                      userId:
                        type: "string"
  /webhook/follow.didAcceptRequest:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user accepts a follow request from another user.\n"
      responses:
        "200":
          description: "Follow Object"
          $ref: "./v4/follow/response.yaml#/FollowWebhookResponse"
  /webhook/follow.didCancelRequest:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user cancels a request to follow another user.\n"
      responses:
        "200":
          description: "Follow Object"
          $ref: "./v4/follow/response.yaml#/FollowWebhookResponse"
  /webhook/follow.didCreate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user follows another user.\n"
      responses:
        "200":
          description: "Follow Object"
          $ref: "./v4/follow/response.yaml#/FollowWebhookResponse"
  /webhook/follow.didDeclineRequest:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user declines a follow request from another user.\n"
      responses:
        "200":
          description: "Follow Object"
          $ref: "./v4/follow/response.yaml#/FollowWebhookResponse"
  /webhook/follow.didDeleteFollower:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user deletes a user from their follower's list.\n"
      responses:
        "200":
          description: "Follow Object"
          $ref: "./v4/follow/response.yaml#/FollowWebhookResponse"
  /webhook/follow.didRequest:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user sends a request to follow another user.\n"
      responses:
        "200":
          description: "Follow Object"
          $ref: "./v4/follow/response.yaml#/FollowWebhookResponse"
  /webhook/follow.didUnfollow:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user unfollows another user.\n"
      responses:
        "200":
          description: "Follow Object"
          $ref: "./v4/follow/response.yaml#/FollowWebhookResponse"
  /webhook/message.didAddReaction:
    get:
      tags:
        - "Webhook event"
      description: "Send updated message whenever add reaction to this message."
      responses:
        "200":
          $ref: "./v3/message/response.yaml#/MessageAddReactionWithReactorWebhookResponse"
  /webhook/message.didClearflag:
    get:
      tags:
        - "Webhook event"
      description: "Send updated message whenever all message flags are cleared."
      responses:
        "200":
          description: "messages is messages information. users is list of all user information relate to this messages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "message.didClearflag"
                  data:
                    type: "object"
                    properties:
                      messages:
                        type: "array"
                        items:
                          $ref: "./schema/message.yaml#/Message"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
  /webhook/message.didCreate:
    get:
      tags:
        - "Webhook event"
      description: "Send new created message whenever a message got created in a channel"
      responses:
        "200":
          description: "messages is messages information. users is list of all user information relate to this messages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "message.didCreate"
                  data:
                    type: "object"
                    properties:
                      messages:
                        type: "array"
                        items:
                          $ref: "./schema/message.yaml#/Message"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
  /webhook/message.didDelete:
    get:
      tags:
        - "Webhook event"
      description: "Send deleted message whenever a message got deleted in a channel"
      responses:
        "200":
          description: "messages is messages information. users is list of all user information relate to this messages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "message.didDelete"
                  data:
                    type: "object"
                    properties:
                      messages:
                        type: "array"
                        items:
                          $ref: "./schema/message.yaml#/Message"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
  /webhook/message.didFlag:
    get:
      tags:
        - "Webhook event"
      description: "Send updated message whenever a message got flag"
      responses:
        "200":
          description: "messages is messages information. users is list of all user information relate to this messages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "message.didFlag"
                  data:
                    type: "object"
                    properties:
                      messages:
                        type: "array"
                        items:
                          $ref: "./schema/message.yaml#/Message"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
  /webhook/message.didRemoveReaction:
    get:
      tags:
        - "Webhook event"
      description: "Send updated message whenever remove reaction to this message."
      responses:
        "200":
          $ref: "./v3/message/response.yaml#/MessageRemoveReactionWithReactorWebhookResponse"
  /webhook/message.didUnflag:
    get:
      tags:
        - "Webhook event"
      description: "Send updated message whenever a message flag is removed."
      responses:
        "200":
          description: "messages is messages information. users is list of all user information relate to this messages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "message.didUnflag"
                  data:
                    type: "object"
                    properties:
                      messages:
                        type: "array"
                        items:
                          $ref: "./schema/message.yaml#/Message"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
  /webhook/message.didUpdate:
    get:
      tags:
        - "Webhook event"
      description: "Send updated message whenever a message got updated in a channel"
      responses:
        "200":
          description: "messages is messages information. users is list of all user information relate to this messages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "message.didUpdate"
                  data:
                    type: "object"
                    properties:
                      messages:
                        type: "array"
                        items:
                          $ref: "./schema/message.yaml#/Message"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
  /webhook/moderation.didBan:
    get:
      tags:
        - "Webhook event"
      description: "Send banned event whenever a system detect message that contain in the blacklist"
      responses:
        "200":
          description: "channel is channel information. userId is a userId who send the message. users is a list of userInfo"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "moderation.didBan"
                  data:
                    type: "object"
                    properties:
                      channel:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Channel"
                      users:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/User"
                      userId:
                        type: "string"
  /webhook/poll.didCreate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when poll is created\n"
      responses:
        "200":
          $ref: "./v3/poll/response.yaml#/PollWebhookResponse"
  /webhook/poll.didUpdate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when poll is updated\n"
      responses:
        "200":
          $ref: "./v3/poll/response.yaml#/PollWebhookResponse"
  /webhook/poll.didVote:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when vote is created in poll\n"
      responses:
        "200":
          $ref: "./v3/poll/response.yaml#/PollWebhookResponse"
  /webhook/push-notification/channel.created:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when channel is created/joined\n"
      responses:
        "200":
          description: "channel created/joined"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/channel/response.yaml#/ChannelCustomNotificationResponse"
  /webhook/push-notification/channel.joined:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when channel is created/joined\n"
      responses:
        "200":
          description: "channel created/joined"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/channel/response.yaml#/ChannelCustomNotificationResponse"
  /webhook/push-notification/comment.created:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is created\n"
      responses:
        "200":
          description: "comment created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/comment/response.yaml#/CommentCustomNotificationResponse"
  /webhook/push-notification/comment.reacted:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is created\n"
      responses:
        "200":
          description: "comment created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/comment/response.yaml#/CommentCustomNotificationResponse"
  /webhook/push-notification/comment.replied:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is created\n"
      responses:
        "200":
          description: "comment created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/comment/response.yaml#/CommentCustomNotificationResponse"
  /webhook/push-notification/follow.accepted:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when follow is created/requested/accepted\n"
      responses:
        "200":
          description: "follow created/requested/accepted"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v4/follow/response.yaml#/FollowCustomNotificationResponse"
  /webhook/push-notification/follow.created:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when follow is created/requested/accepted\n"
      responses:
        "200":
          description: "follow created/requested/accepted"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v4/follow/response.yaml#/FollowCustomNotificationResponse"
  /webhook/push-notification/follow.requested:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when follow is created/requested/accepted\n"
      responses:
        "200":
          description: "follow created/requested/accepted"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v4/follow/response.yaml#/FollowCustomNotificationResponse"
  /webhook/push-notification/message.created:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when message is created\n"
      responses:
        "200":
          description: "message created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/message/response.yaml#/MessageCustomNotificationResponse"
  /webhook/push-notification/post.approved:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is created\n"
      responses:
        "200":
          description: "post created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/post/response.yaml#/PostCustomNotificationResponse"
  /webhook/push-notification/post.created:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is created\n"
      responses:
        "200":
          description: "post created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/post/response.yaml#/PostCustomNotificationResponse"
  /webhook/push-notification/post.need-reviewing:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is created\n"
      responses:
        "200":
          description: "post created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/post/response.yaml#/PostCustomNotificationResponse"
  /webhook/push-notification/post.reacted:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is created\n"
      responses:
        "200":
          description: "post created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/post/response.yaml#/PostCustomNotificationResponse"
  /webhook/push-notification/video-streaming.started:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when video-streaming is started\n"
      responses:
        "200":
          description: "video-streaming is started"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: true
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/video-streaming/response.yaml#/VideoStreamingCustomNotificationResponse"
  /webhook/push-notification/mention-comment.created:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is created\n"
      responses:
        "200":
          description: "comment created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/comment/response.yaml#/CommentCustomNotificationResponse"
  /webhook/push-notification/mention-comment.replied:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is created\n"
      responses:
        "200":
          description: "comment created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/comment/response.yaml#/CommentCustomNotificationResponse"
  /webhook/push-notification/mention-post.created:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is created\n"
      responses:
        "200":
          description: "post created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/post/response.yaml#/PostCustomNotificationResponse"
  /webhook/push-notification/mention-user-feed-comment.created:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is created\n"
      responses:
        "200":
          description: "comment created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/comment/response.yaml#/CommentCustomNotificationResponse"
  /webhook/push-notification/mention-user-feed-comment.replied:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is created\n"
      responses:
        "200":
          description: "comment created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/comment/response.yaml#/CommentCustomNotificationResponse"
  /webhook/push-notification/mention-user-feed-post.created:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is created\n"
      responses:
        "200":
          description: "post created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventType:
                    type: "string"
                    enum:
                      - "push-notification.created"
                  id:
                    type: "string"
                  networkId:
                    type: "string"
                  path:
                    type: "string"
                  senderId:
                    type: "string"
                  sentTime:
                    type: "string"
                    format: "date-time"
                  version:
                    type: "string"
                  data:
                    type: "object"
                    properties:
                      eventName:
                        type: "string"
                      isBroadcast:
                        type: "boolean"
                        default: false
                      targetIds:
                        type: "array"
                        items:
                          type: "string"
                      notify:
                        type: "boolean"
                        description: "should notify to user targetIds"
                      title:
                        type: "string"
                      body:
                        type: "string"
                    allOf:
                      - $ref: "./v3/post/response.yaml#/PostCustomNotificationResponse"
  /webhook/user.didClearFlag:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when the user flags are cleared\n"
      responses:
        "200":
          description: "User flag cleared event information. users is a list of userInfo. files is a list of file information"
          $ref: "./v1/user/response.yaml#/UserWebhookResponse"
  /webhook/user.didCreate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user is created\n"
      responses:
        "200":
          description: "User created event information. users is a list of userInfo. files is a list of file information"
          $ref: "./v1/user/response.yaml#/UserWebhookResponse"
  /webhook/user.didFlag:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user is flagged\n"
      responses:
        "200":
          description: "User flag event information. users is a list of userInfo. files is a list of file information"
          $ref: "./v1/user/response.yaml#/UserWebhookResponse"
  /webhook/user.didUnflag:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user is unflagged\n"
      responses:
        "200":
          description: "User unflag event information. users is a list of userInfo. files is a list of file information"
          $ref: "./v1/user/response.yaml#/UserWebhookResponse"
  /webhook/user.didUpdate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when a user information is updated\n"
      responses:
        "200":
          description: "User updated event information. users is a list of userInfo. files is a list of file information"
          $ref: "./v1/user/response.yaml#/UserWebhookResponse"
  /webhook/v3.comment.didAddReaction:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when reaction of comment is added.\n"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentWithReactorWebhookResponse"
  /webhook/v3.comment.didCreate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is created\n"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentWebhookResponse"
  /webhook/v3.comment.didDelete:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is deleted\n"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentWebhookResponse"
  /webhook/v3.comment.didFlag:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is flagged.\n"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentWithFlagWebhookResponse"
  /webhook/v3.comment.didRemoveReaction:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when reaction of comment is removed.\n"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentWithReactorWebhookResponse"
  /webhook/v3.comment.didReply:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is replied.\n"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentWebhookResponse"
  /webhook/v3.comment.didUnflag:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is unflagged.\n"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentWithFlagWebhookResponse"
  /webhook/v3.comment.didUpdate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when comment is updated\n"
      responses:
        "200":
          $ref: "./v3/comment/response.yaml#/CommentWebhookResponse"
  /webhook/v3.community.didAddUsers:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when add users into community\n"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityWebhookResponse"
  /webhook/v3.community.didBan:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when community user is banned\n"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityWebhookResponse"
  /webhook/v3.community.didCreate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when community is created\n"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityWebhookResponse"
  /webhook/v3.community.didDelete:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when community is deleted\n"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityWebhookResponse"
  /webhook/v3.community.didJoin:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when user joined a community.\n"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityWebhookResponse"
  /webhook/v3.community.didLeave:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when user left a community\n"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityWebhookResponse"
  /webhook/v3.community.didRemoveUsers:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when remove users from community\n"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityWebhookResponse"
  /webhook/v3.community.didRoleChange:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when role of user is changed in community\n"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityWebhookResponse"
  /webhook/v3.community.didUnban:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when community user is unbanned\n"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityWebhookResponse"
  /webhook/v3.community.didUpdate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when community is updated\n"
      responses:
        "200":
          $ref: "./v3/community/response.yaml#/CommunityWebhookResponse"
  /webhook/v3.post.didAddReaction:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when reaction of post is added.\n"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostWithReactorWebhookResponse"
  /webhook/v3.post.didApprove:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is approved\n"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostWebhookResponse"
  /webhook/v3.post.didCreate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is created\n"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostWebhookResponse"
  /webhook/v3.post.didDecline:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is declined\n"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostWebhookResponse"
  /webhook/v3.post.didDelete:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is deleted\n"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostWebhookResponse"
  /webhook/v3.post.didFlag:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is flagged.\n"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostWithFlagWebhookResponse"
  /webhook/v3.post.didRemoveReaction:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when reaction of post is removed.\n"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostWithReactorWebhookResponse"
  /webhook/v3.post.didUnflag:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is unflagged.\n"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostWithFlagWebhookResponse"
  /webhook/v3.post.didUpdate:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when post is updated\n"
      responses:
        "200":
          $ref: "./v3/post/response.yaml#/PostWebhookResponse"
  /webhook/video-streaming.didRecord:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when video streaming recordings is ready.\n"
      responses:
        "200":
          $ref: "./v3/video-streaming/response.yaml#/VideoStreamingsWebhookResponse"
  /webhook/video-streaming.didStart:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when video streaming start.\n"
      responses:
        "200":
          $ref: "./v3/video-streaming/response.yaml#/VideoStreamingsWebhookResponse"
  /webhook/video-streaming.didStop:
    get:
      tags:
        - "Webhook event"
      security:
        - BearerAuth: []
      description: "This is called when video streaming stop.\n"
      responses:
        "200":
          $ref: "./v3/video-streaming/response.yaml#/VideoStreamingsWebhookResponse"
  /webhook/v5.message.didCreate:
    get:
      tags:
        - "Webhook event"
      description: "Send created message whenever a message got created in a channel"
      responses:
        "200":
          description: "messages is messages information. users is list of all user information relate to this messages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "message.didCreate"
                  data:
                    type: "object"
                    properties:
                      files:
                        type: "array"
                        items:
                          $ref: "./schema/file.yaml#/File"
                      messageFeeds:
                        type: "array"
                        items:
                          $ref: "./schema/message.yaml#/Message"
                      messages:
                        type: "array"
                        items:
                          $ref: "./schema/message-feed.yaml#/MessageFeed"
                      reactions:
                        type: "array"
                        items:
                          $ref: "./schema/reaction.yaml#/Reaction"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
  /webhook/v5.message.didDelete:
    get:
      tags:
        - "Webhook event"
      description: "Send deleted message whenever a message got deleted in a channel"
      responses:
        "200":
          description: "messages is messages information. users is list of all user information relate to this messages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "message.didDelete"
                  data:
                    type: "object"
                    properties:
                      files:
                        type: "array"
                        items:
                          $ref: "./schema/file.yaml#/File"
                      messageFeeds:
                        type: "array"
                        items:
                          $ref: "./schema/message.yaml#/Message"
                      messages:
                        type: "array"
                        items:
                          $ref: "./schema/message-feed.yaml#/MessageFeed"
                      reactions:
                        type: "array"
                        items:
                          $ref: "./schema/reaction.yaml#/Reaction"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
  /webhook/v5.message.didUpdate:
    get:
      tags:
        - "Webhook event"
      description: "Send updated message whenever a message got updated in a channel"
      responses:
        "200":
          description: "messages is messages information. users is list of all user information relate to this messages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  event:
                    type: "string"
                    enum:
                      - "message.didCreate"
                  data:
                    type: "object"
                    properties:
                      files:
                        type: "array"
                        items:
                          $ref: "./schema/file.yaml#/File"
                      messageFeeds:
                        type: "array"
                        items:
                          $ref: "./schema/message.yaml#/Message"
                      messages:
                        type: "array"
                        items:
                          $ref: "./schema/message-feed.yaml#/MessageFeed"
                      reactions:
                        type: "array"
                        items:
                          $ref: "./schema/reaction.yaml#/Reaction"
                      users:
                        type: "array"
                        items:
                          $ref: "./schema/user.yaml#/User"
  
  /realtime/channel.banned:
    get:
      summary: "user is banned from the channel"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v3/realtime/channel/response.yaml#/Response"
  /realtime/channel.created:
    get:
      summary: "channel created"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v3/realtime/channel/response.yaml#/Response"
  /realtime/channel.deleted:
    get:
      summary: "channel deleted"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v3/realtime/channel/response.yaml#/Response"
  /realtime/channel.joined:
    get:
      summary: "user joined the channel"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v3/realtime/channel/response.yaml#/Response"
  /realtime/channel.left:
    get:
      summary: "user left the channel"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v3/realtime/channel/response.yaml#/Response"
  /realtime/channel.membersAdded:
    get:
      summary: "users were added to the channel"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v3/realtime/channel/response.yaml#/Response"
  /realtime/channel.membersRemoved:
    get:
      summary: "users were removed from the channel"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v3/realtime/channel/response.yaml#/Response"
  /realtime/channel.unbanned:
    get:
      summary: "user is unbanned from the channel"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v3/realtime/channel/response.yaml#/Response"
  /realtime/channel.updated:
    get:
      summary: "channel updated"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v3/realtime/channel/response.yaml#/Response"
  /realtime/comment.addReaction:
    get:
      summary: "comment add reaction"
      description: "Event has occurred when a reaction is added to comment\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/comment/response.yaml#/ResponseWithReactor"
  /realtime/comment.created:
    get:
      summary: "comment created"
      description: "Event has occurred when comment was created\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/comment/response.yaml#/Response"
  /realtime/comment.deleted:
    get:
      summary: "comment deleted"
      description: "Event has occurred when comment was deleted\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/comment/response.yaml#/Response"
  /realtime/comment.flagged:
    get:
      summary: "comment flagged"
      description: "Event has occurred when comment was flagged\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/comment/response.yaml#/ResponseWithFlag"
  /realtime/comment.flagsCleared:
    get:
      summary: "comment flag cleared"
      description: "Event has occurred when comment flag was cleared\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/comment/response.yaml#/ResponseWithFlag"
  /realtime/comment.removeReaction:
    get:
      summary: "comment remove reaction"
      description: "Event has occurred when a reaction is removed from comment\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/comment/response.yaml#/ResponseWithReactor"
  /realtime/comment.unflagged:
    get:
      summary: "comment unflagged"
      description: "Event has occurred when comment was unflagged\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/comment/response.yaml#/ResponseWithFlag"
  /realtime/comment.updated:
    get:
      summary: "comment updated"
      description: "Event has occurred when comment was updated\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/comment/response.yaml#/Response"
  /realtime/community.created:
    get:
      summary: "community created"
      description: "Event has occurred when community was created\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/community/response.yaml#/Response"
  /realtime/community.deleted:
    get:
      summary: "community deleted"
      description: "Event has occurred when community was deleted\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/community/response.yaml#/Response"
  /realtime/community.joined:
    get:
      summary: "community joined"
      description: "Event has occurred when joined community\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/community/response.yaml#/Response"
  /realtime/community.left:
    get:
      summary: "community left"
      description: "Event has occurred when left community\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/community/response.yaml#/Response"
  /realtime/community.updated:
    get:
      summary: "community updated"
      description: "Event has occurred when community was updated\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/community/response.yaml#/Response"
  /realtime/community.userAdded:
    get:
      summary: "community user added"
      description: "Event has occurred when user was added to community\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/community/response.yaml#/Response"
  /realtime/community.userBanned:
    get:
      summary: "community user banned"
      description: "Event has occurred when user was banned from community\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/community/response.yaml#/Response"
  /realtime/community.userChanged:
    get:
      summary: "community user changed"
      description: "Event has occurred when the number of user was changed in community\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/community/response.yaml#/Response"
  /realtime/community.userRemoved:
    get:
      summary: "community user removed"
      description: "Event has occurred when user was removed from community\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/community/response.yaml#/Response"
  /realtime/community.userUnbanned:
    get:
      summary: "community user unbanned"
      description: "Event has occurred when user was unbanned from community\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/community/response.yaml#/Response"
  /realtime/follow.accepted:
    get:
      summary: "follow accepted"
      description: "Event has occurred when follow was accepted\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/follow/response.yaml#/Response"
  /realtime/follow.created:
    get:
      summary: "follow created"
      description: "Event has occurred when follow was created\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/follow/response.yaml#/Response"
  /realtime/follow.followerDeleted:
    get:
      summary: "delete follower"
      description: "Event has occurred when follower was deleted\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/follow/response.yaml#/Response"
  /realtime/follow.requestCanceled:
    get:
      summary: "follow request canceled"
      description: "Event has occurred when follow request was canceled\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/follow/response.yaml#/Response"
  /realtime/follow.requestDeclined:
    get:
      summary: "decline follow request"
      description: "Event has occurred when follow request was declined\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/follow/response.yaml#/Response"
  /realtime/follow.requested:
    get:
      summary: "follow requested"
      description: "Event has occurred when follow was requested\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/follow/response.yaml#/Response"
  /realtime/follow.unfollowed:
    get:
      summary: "unfollowed"
      description: "Event has occurred when unfollow was created\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/follow/response.yaml#/Response"
  /realtime/marker.marked-message:
    get:
      summary: "marked message in marker"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/marker/response.yaml#/MarkedMessageResponse"
  /realtime/marker.marker.user-sync:
    get:
      summary: "user sync in marker"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/marker/response.yaml#/UserSyncResponse"
  /realtime/marker.userFeed-updated:
    get:
      summary: "user feed updated in marker"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/marker/response.yaml#/UserFeedUpdatedResponse"
  /realtime/marker.feed-updated:
    get:
      summary: "feed updated in marker"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/marker/response.yaml#/FeedUpdatedResponse"
  /realtime/message-feed.created:
    get:
      summary: "message feed created"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message-feed/response.yaml#/Response"
  /realtime/message-feed.deleted:
    get:
      summary: "message feed deleted"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message-feed/response.yaml#/Response"
  /realtime/message-feed.updated:
    get:
      summary: "message feed updated"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message-feed/response.yaml#/Response"
  /realtime/message.addReaction:
    get:
      summary: "message reaction added"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message/response.yaml#/ResponseWithReaction"
  /realtime/message.created:
    get:
      summary: "message created"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message/response.yaml#/CreatedResponse"
  /realtime/message.deleted:
    get:
      summary: "message deleted"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message/response.yaml#/Response"
  /realtime/message.flagCleared:
    get:
      summary: "message flag cleared"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message/response.yaml#/Response"
  /realtime/message.flagged:
    get:
      summary: "message flagged"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message/response.yaml#/Response"
  /realtime/message.reactionAdded:
    get:
      summary: "message reaction added"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message/response.yaml#/ResponseWithReaction"
  /realtime/message.reactionRemoved:
    get:
      summary: "message reaction removed"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message/response.yaml#/ResponseWithReaction"
  /realtime/message.unflagged:
    get:
      summary: "message unflagged"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message/response.yaml#/Response"
  /realtime/message.updated:
    get:
      summary: "message updated"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v5/realtime/message/response.yaml#/Response"
  /realtime/post.addReaction:
    get:
      summary: "post add reaction"
      description: "Event has occurred when a reaction is added to post\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/post/response.yaml#/ResponseWithReactor"
  /realtime/post.approved:
    get:
      summary: "post approved"
      description: "Event has occurred when post was approved\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/post/response.yaml#/ResponseWithFlag"
  /realtime/post.created:
    get:
      summary: "post created"
      description: "Event has occurred when post was created\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/post/response.yaml#/Response"
  /realtime/post.declined:
    get:
      summary: "post declined"
      description: "Event has occurred when post was declined\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/post/response.yaml#/ResponseWithFlag"
  /realtime/post.deleted:
    get:
      summary: "post deleted"
      description: "Event has occurred post was deleted\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/post/response.yaml#/Response"
  /realtime/post.flagged:
    get:
      summary: "post flagged"
      description: "Event has occurred when post was flagged\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/post/response.yaml#/ResponseWithFlag"
  /realtime/post.flagsCleared:
    get:
      summary: "post flag cleared"
      description: "Event has occurred when post flag was cleared\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/post/response.yaml#/ResponseWithFlag"
  /realtime/post.removeReaction:
    get:
      summary: "post remove reaction"
      description: "Event has occurred when a reaction is removed from post\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/post/response.yaml#/ResponseWithReactor"
  /realtime/post.unflagged:
    get:
      summary: "post unflagged"
      description: "Event has occurred when post was unflagged\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/post/response.yaml#/ResponseWithFlag"
  /realtime/post.updated:
    get:
      summary: "post updated"
      description: "Event has occurred when post was updated\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/post/response.yaml#/Response"
  /realtime/story.created:
    get:
      summary: "story created"
      description: "Event has occurred when story was created\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/story/response.yaml#/Response"
  /realtime/story.deleted:
    get:
      summary: "story deleted"
      description: "Event has occurred when story was deleted\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/story/response.yaml#/Response"
  /realtime/story.reactionAdded:
    get:
      summary: "story reaction added"
      description: "Event has occurred when a reaction is added to story\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/story/response.yaml#/ResponseWithReactor"
  /realtime/story.reactionRemoved:
    get:
      summary: "story reaction removed"
      description: "Event has occurred when a reaction is removed to story\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/story/response.yaml#/ResponseWithReactor"
  /realtime/user.deleted:
    get:
      summary: "user deleted"
      description: "Event has occurred when user was deleted\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/user/response.yaml#/Response"
  /realtime/user.didGlobalBan:
    get:
      summary: "user global banned"
      description: "Event has occurred when user was global banned\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/user/response.yaml#/Response"
  /realtime/user.flagCleared:
    get:
      summary: "user flag cleared"
      description: "Event has occurred when the user flag was cleared\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/user/response.yaml#/Response"
  /realtime/user.flagged:
    get:
      summary: "user flagged"
      description: "Event has occurred when user was flagged\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/user/response.yaml#/Response"
  /realtime/user.unflagged:
    get:
      summary: "user unflagged"
      description: "Event has occurred when user was unflagged\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/user/response.yaml#/Response"
  /realtime/user.updated:
    get:
      summary: "user updated"
      description: "Event has occurred when user was updated\n"
      tags:
        - "Realtime event"
      responses:
        "200":
          $ref: "./v4/realtime/user/response.yaml#/Response"

components:
  schemas:
    User:
      $ref: "./schema/user.yaml#/User"
    ChannelType:
      $ref: "./schema/channel.yaml#/ChannelType"
    ChannelMembership:
      $ref: "./schema/channel.yaml#/ChannelMembership"
    Channel:
      type: "object"
      properties:
        channelId:
          type: "string"
          description: "ID of a channel."
        isDistinct:
          type: "boolean"
        metadata:
          type: "object"
          description: "Additional properties to support custom fields."
        type:
          $ref: "#/components/schemas/ChannelType"
          description: "Type of a channel (standard, conversation, broadcast). This property is not be used for now."
        tags:
          type: "array"
          description: "List of tags. They will be used for searching."
          items:
            type: "string"
        isMuted:
          type: "boolean"
          description: "Is this channel muted? (Computed by using muteTimeout)."
        isRateLimited:
          type: "boolean"
          description: "Is this channel limited sending rate? (Computed by using muteTimeout)."
        muteTimeout:
          type: "string"
          description: "The date/time to suppress muteness."
          format: "date-time"
        rateLimit:
          type: "integer"
          description: "Number of messages within rate limit."
        rateLimitWindow:
          type: "integer"
          description: "Waiting time interval before reset rateLimit to 0."
        rateLimitTimeout:
          type: "string"
          description: "The date/time to suppress limitation of sending rate."
          format: "date-time"
        displayName:
          type: "string"
          description: "Channel name for displaying."
        messageAutoDeleteEnabled:
          type: "boolean"
          description: "Is message in this channel will be deleted when the user flagged until flag limit?"
        autoDeleteMessageByFlagLimit:
          type: "number"
          description: "Number of flags that will force a message to be deleted automatically."
        memberCount:
          type: "integer"
          description: "Number of members in channel."
        messageCount:
          type: "integer"
          description: "Number of messages in channel."
        lastActivity:
          type: "string"
          description: "The date/time when a user last did something related to the channel such as add/remove members ."
          format: "date-time"
        createdAt:
          type: "string"
          description: "The date/time when a channel is created."
          format: "date-time"
        updatedAt:
          type: "string"
          description: "The date/time when a channel is updated."
          format: "date-time"
        avatar:
          $ref: "./schema/file.yaml#/File"
      required:
        - "channelId"
        - "createdAt"
        - "updatedAt"
    ChannelUser:
      type: "object"
      properties:
        channelId:
          type: "string"
        userId:
          type: "string"
        roles:
          type: "array"
          items:
            type: "string"
        readToSegment:
          type: "integer"
        membership:
          $ref: "#/components/schemas/ChannelMembership"
        isBanned:
          type: "boolean"
        isMuted:
          type: "boolean"
        muteTimeout:
          type: "string"
          format: "date-time"
        lastActivity:
          type: "string"
          format: "date-time"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
      required:
        - "userId"
        - "channelId"
        - "createdAt"
        - "updatedAt"
    Comment:
      $ref: "./schema/comment.yaml#/Comment"
    Community:
      $ref: "./schema/community.yaml#/Community"
    CommunityUser:
      $ref: "./schema/community.yaml#/CommunityUser"
    CommunityCategory:
      $ref: "./schema/community.yaml#/CommunityCategory"
    Message:
      $ref: "./schema/message.yaml#/Message"
    Reaction:
      $ref: "./schema/reaction.yaml#/Reaction"
    ShortUser:
      $ref: "./schema/user.yaml#/ShortUser"
    Network:
      type: "object"
      properties:
        _id:
          type: "string"
          description: "ID of a network."
        name:
          type: "string"
          description: "network name"
        defaultMessageAutoDeleteEnabled:
          type: "boolean"
          description: "Is message in this channel will be deleted when the user flagged until flag limit?"
        defaultAutoDeleteMessageByFlagLimit:
          type: "number"
          minimum: 1
          example: 1
          description: "Number of flags that will force a message to be deleted automatically."
        createdAt:
          type: "string"
          description: "The date/time when a network is created."
          format: "date-time"
        updatedAt:
          type: "string"
          description: "The date/time when a network is created."
          format: "date-time"
      required:
        - "referenceId"
        - "referenceType"
    BlacklistRule:
      type: "object"
      properties:
        ruleId:
          type: "string"
        regex:
          type: "string"
          description: "Rule of blacklist."
        isMatchExactWord:
          type: "boolean"
        isEnabled:
          type: "boolean"
          description: "A flag to enabled a rule."
        isDeleted:
          type: "boolean"
          description: "A flag to deleted a rule."
        createdAt:
          type: "string"
          description: "The date/time when a rule is created."
          format: "date-time"
        updatedAt:
          type: "string"
          description: "The date/time when a rule is updated or deleted."
          format: "date-time"
      required:
        - "regex"
    WhitelistRule:
      type: "object"
      properties:
        ruleId:
          type: "string"
        regex:
          type: "string"
          description: "Rule of whitelist."
        isEnabled:
          type: "boolean"
          description: "A flag to enabled a rule."
        isDeleted:
          type: "boolean"
          description: "A flag to deleted a rule."
        createdAt:
          type: "string"
          description: "The date/time when a rule is created."
          format: "date-time"
        updatedAt:
          type: "string"
          description: "The date/time when a rule is updated or deleted."
          format: "date-time"
      required:
        - "regex"
    Role:
      type: "object"
      properties:
        permissions:
          type: "array"
          items:
            type: "string"
        publicId:
          type: "string"
      required:
        - "publicId"
    ModerationSetting:
      type: "object"
      properties:
        maxRepetition:
          type: "integer"
        maxRepetitionTimeout:
          type: "integer"
        blacklistMuteTimeout:
          type: "integer"
        whitelistMuteTimeout:
          type: "integer"
        maxRepetitionMuteTimeout:
          type: "integer"
        enableImageModeration:
          type: "boolean"
        imageModeration:
          type: "object"
          properties:
            nudity:
              type: "number"
            suggestive:
              type: "number"
            violence:
              type: "number"
            disturbing:
              type: "number"
        createdAt:
          type: "string"
          description: "The date/time when a rule is created."
          format: "date-time"
        updatedAt:
          type: "string"
          description: "The date/time when a rule is updated or deleted."
          format: "date-time"
    Error:
      type: "object"
      properties:
        status:
          type: "string"
        code:
          type: "string"
        message:
          type: "string"
    File:
      $ref: "./schema/file.yaml#/File"
    Follow:
      $ref: "./schema/follow.yaml#/Follow"
    FollowCount:
      $ref: "./schema/follow.yaml#/FollowCount"
  securitySchemes:
    ApiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "X-API-Key"
    BearerAuth:
      type: "http"
      scheme: "bearer"
  responses:
    SuccessResponse:
      description: "Success response."
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                type: "object"
    IsFlagByMeResponse:
      description: "Is flag by me response."
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                type: "object"
                properties:
                  isFlagByMe:
                    type: "boolean"
    IsPushNotifiableResponse:
      description: "Is push notifiable response."
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                type: "object"
                properties:
                  isPushNotifiable:
                    type: "boolean"
    ChannelResultsResponse:
      description: "Channels Information"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                type: "object"
                properties:
                  results:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        channel:
                          $ref: "#/components/schemas/Channel"
                        channelUser:
                          $ref: "#/components/schemas/ChannelUser"
    ChannelResultResponse:
      description: "Channel Information"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                type: "object"
                properties:
                  results:
                    type: "object"
                    properties:
                      channel:
                        $ref: "#/components/schemas/Channel"
                      channelUser:
                        $ref: "#/components/schemas/ChannelUser"
    ChannelResponse:
      description: "Channel response."
      content:
        application/json:
          schema:
            type: "object"
            properties:
              isDistinct:
                type: "boolean"
              type:
                $ref: "#/components/schemas/ChannelType"
                description: "Type of a channel (standard, conversation, broadcast). This property is not be used for now."
              metadata:
                type: "object"
                description: "Additional properties to support custom fields."
              tags:
                type: "array"
                description: "List of tags. They will be used for searching."
                items:
                  type: "string"
              isMuted:
                type: "boolean"
                description: "Is this channel muted? (Computed by using muteTimeout)."
              lastActivity:
                type: "string"
                description: "The date/time when a user last did something related to the channel such as add/remove members ."
                format: "date-time"
              createdAt:
                type: "string"
                description: "The date/time when a channel is created."
                format: "date-time"
              updatedAt:
                type: "string"
                description: "The date/time when a channel is updated."
                format: "date-time"
              isRateLimited:
                type: "boolean"
                description: "Is this channel limited sending rate? (Computed by using muteTimeout)."
              rateLimitWindow:
                type: "integer"
                description: "Waiting time interval before reset rateLimit to 0."
              channelId:
                type: "string"
                description: "ID of a channel."
              muteTimeout:
                type: "string"
                description: "The date/time to suppress muteness."
                format: "date-time"
              rateLimit:
                type: "integer"
                description: "Number of messages within rate limit."
              rateLimitTimeout:
                type: "string"
                description: "The date/time to suppress limitation of sending rate."
                format: "date-time"
              displayName:
                type: "string"
                description: "Channel name for displaying."
              messageAutoDeleteEnabled:
                type: "boolean"
                description: "Is message in this channel will be deleted when the user flagged until flag limit?"
              autoDeleteMessageByFlagLimit:
                type: "number"
                description: "Number of flags that will force a message to be deleted automatically."
              memberCount:
                type: "integer"
                description: "Number of members in channel."
              messageCount:
                type: "integer"
                description: "Number of messages in channel."
              avatar:
                $ref: "./schema/file.yaml#/File"
    ChannelUserResponse:
      description: "Channel User response."
      content:
        application/json:
          schema:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/components/schemas/ChannelUser"
    UsersResponse:
      description: "Users Information"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                type: "object"
                properties:
                  results:
                    type: "array"
                    items:
                      $ref: "./schema/user.yaml#/User"
    UserResponse:
      description: "User Information"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                $ref: "./schema/user.yaml#/User"
    NetworkResponse:
      description: "Network information."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Network"
    BlacklistRulesResponse:
      description: "rules of blacklist Information"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                type: "object"
                properties:
                  results:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/BlacklistRule"
    BlacklistRuleResponse:
      description: "rule of blacklist Information"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                $ref: "#/components/schemas/BlacklistRule"
    WhitelistRulesResponse:
      description: "rules of whitelist Information"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                type: "object"
                properties:
                  results:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/BlacklistRule"
    WhitelistRuleResponse:
      description: "rule of whitelist Information"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                $ref: "#/components/schemas/BlacklistRule"
    RolesResponse:
      description: "Roles information."
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                type: "object"
                properties:
                  moderatonSettings:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/ModerationSetting"
                  roles:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Role"
    UserByAdminsResponse:
      description: "Users information."
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                type: "object"
                properties:
                  users:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        info:
                          type: "object"
                          properties:
                            publicId:
                              type: "string"
                            roleIds:
                              type: "array"
                              items:
                                type: "string"
                            roles:
                              type: "array"
                              items:
                                type: "string"
                            displayName:
                              type: "string"
                            isGlobalBan:
                              type: "boolean"
                            metadata:
                              type: "object"
                            flagCount:
                              type: "integer"
                  roles:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Role"
    ModerationSettingResponse:
      description: "Moderation Setting Information"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "string"
              data:
                $ref: "#/components/schemas/ModerationSetting"
    UnexpectedError:
      description: "Unexpected error."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 500
            message: "Unexpected error"
    NotFoundError:
      description: "Resource Not Found error."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 404
            message: "Resource Not Found."
    BadRequestError:
      description: "Bad Request error."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 400
            message: "Bad Request."
    ChannelNotFoundError:
      description: "Channel Not Found error."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 404
            message: "Channel Not Found."
    PermissionDenidedError:
      description: "Permission denied."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 403
            message: "User is not a member of a channel"
    UserIsBannedError:
      description: "User is banned from a channel / community."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 403
            message: "User is banned from a channel / community."
    RateLimitError:
      description: "Error due to a client create the same request with the same parameters exceed the number of time that server limit to."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 429
            message: "RateLimit Exceed."
    UserNotFoundError:
      description: "User Not Found error."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 404
            message: "User Not Found."
    NumberOfFlagExceedError:
      description: "Error when too many user is already flagged message."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 403
            message: "Number of flag already exceed."
    ForbiddenAvatarError:
      description: "Put file type not image into avatar"
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 403
            message: "Avatar must be an image."
    UserNotJoinError:
      description: "User is not join community."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 401
            message: "User ${userId} is not join this community ${communityId}"
    UserIsUnbannedError:
      description: "User is unbanned from a channel / community."
      content:
        application/json:
          schema:
            $ref: "./global/error.yaml#/Error"
          example:
            status: "error"
            code: 400316
            message: "User is unbanned from a channel / community."
