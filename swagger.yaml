openapi: '3.0.0'
info:
  title: 'Amity Social Cloud SDK'
  description: "<h2>Using Amity APIs</h2>\n\nOur API documentation explains all API endpoints used in Amity Social Cloud. All APIs, with the exception of some\nauthentication APIs, require an access token for authentication and authorization. APIs can be used either in Admin\nor User context. When used in user context, you will only be able to fetch data related to that user only.\nFor Administrators who are using our API documentation in making server-to-server API calls, you need an Admin\nAccess token to connect to the Amity server. Refer to <a href=\"https://docs.amity.co/console/settings#admin-api-access-token\" target=\"_blank\">this documentation</a>\nfor the instructions on how to generate an admin access token.\n\nAll backend endpoints that support Amity SDK are included here. To easily differentiate the type of each endpoint,\nwe added a prefix in each endpoint's path.\n\n1. Socket Endpoint: /sockets/...\n2. Socket Event: /callbacks/...\n3. REST API Endpoint: /v1/, /v2/, /v3/, or /v4/...\n4. Webhook Event: /webhook/...\n\n<h2>Select Region Endpoint</h2>\n\nBefore making server-to-server API calls, be sure to select the correct API endpoint for your region in\nthe <strong>Servers</strong> dropdown below.\n"
  version: '4.51.0'
servers:
  - url: 'https://api.us.amity.co'
    description: 'API Endpoint for US Region'
  - url: 'https://api.eu.amity.co'
    description: 'API Endpoint for EU Region'
  - url: 'https://api.sg.amity.co'
    description: 'API Endpoint for SG Region'
paths:
  /api/v3/authentication/token:
    $ref: './v3/authentication/api.yaml#/AuthenticationToken'
  /api/v4/authentication/token:
    $ref: './v4/authentication/api.yaml#/AuthenticationToken'
  /api/v3/sessions:
    $ref: './v3/session/api.yaml#/Sessions'
  /api/v4/sessions:
    $ref: './v4/session/api.yaml#/Sessions'
  /v1/device:
    $ref: './v1/device/api.yaml#/Device'
  /v1/accessToken:
    $ref: './v1/device/api.yaml#/AccessToken'
  /v1/blacklist/records:
    put:
      summary: 'Refresh black list'
      tags:
        - 'Moderation'
      security:
        - ApiKeyAuth: []
      description: "Refresh the black list\n"
      requestBody:
        description: "Regular expression to refresh.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
    post:
      summary: 'Add rules to black list'
      tags:
        - 'Moderation'
      security:
        - ApiKeyAuth: []
      description: "Add rules to the black list\n"
      requestBody:
        description: "Regular expression to add.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
    delete:
      summary: 'Delete rules from black list'
      tags:
        - 'Moderation'
      security:
        - ApiKeyAuth: []
      description: "Delete rules from the black list\n"
      requestBody:
        description: "Regular expression to delete.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                ruleIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
  /admin/v1/token:
    $ref: './v1/admin/api.yaml#/AdminToken'
  /admin/v1/blacklist/records:
    $ref: './v1/moderation/api.yaml#/AdminBlacklistRecords'
  /api/v2/blacklist/records:
    get:
      summary: 'get rules of blacklist.'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Get rules of blacklist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'regexs'
          in: 'query'
          schema:
            type: 'array'
            items:
              type: 'string'
      responses:
        '200':
          $ref: '#/components/responses/BlacklistRulesResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: 'refresh rules of blacklist.'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Refresh rules of blacklist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be refreshed.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: 'add rules to blacklist.'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Add rules to blacklist\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be added.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
                isMatchExactWord:
                  type: 'boolean'
              required:
                - 'regexs'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: 'delete rules from blacklist'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Delete rule from blacklist\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be deleted.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                ruleIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'ruleIds'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v2/blacklist/records/:ruleId:
    put:
      summary: 'update rule of blacklist.'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Update rule of blacklist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be updated.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                ruleId:
                  type: 'string'
                isEnabled:
                  type: 'boolean'
              required:
                - 'ruleId'
                - 'isEnabled'
      responses:
        '200':
          $ref: '#/components/responses/BlacklistRuleResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v2/messages:
    $ref: './v2/message/api.yaml#/Messages'
  /api/v2/message:
    $ref: './v2/message/api.yaml#/Message'
  /api/v2/message/{messageId}:
    $ref: './v2/message/api.yaml#/Message'
  /api/v2/messages/images:
    $ref: './v2/message/api.yaml#/MessagesImages'
  /api/v2/messages/{messageId}/images:
    $ref: './v2/message/api.yaml#/MessagesMessageIdImages'
  /api/v2/messages/files:
    $ref: './v2/message/api.yaml#/MessagesFiles'
  /api/v2/messages/{messageId}/files:
    $ref: './v2/message/api.yaml#/MessagesMessageIdFiles'
  /api/v2/moderation-settings:
    get:
      summary: 'get a moderation setting'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
      consumes:
        - 'application/json'
      description: "Get a moderation setting.\n"
      responses:
        '200':
          $ref: '#/components/responses/ModerationSettingResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: 'update a moderation setting'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Update a moderation setting\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "moderation setting information\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                maxRepetition:
                  type: 'integer'
                  minimum: 0
                maxRepetitionTimeout:
                  type: 'integer'
                  minimum: 0
                blacklistMuteTimeout:
                  type: 'integer'
                  minimum: 0
                whitelistMuteTimeout:
                  type: 'integer'
                  minimum: 0
                maxRepetitionMuteTimeout:
                  type: 'integer'
                  minimum: 0
                enableImageModeration:
                  type: 'boolean'
                imageModeration:
                  type: 'object'
                  properties:
                    nudity:
                      type: 'number'
                      minimum: 0
                    suggestive:
                      type: 'number'
                      minimum: 0
                    violence:
                      type: 'number'
                      minimum: 0
                    disturbing:
                      type: 'number'
                      minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: 'string'
                  code:
                    type: 'string'
                example:
                  status: 'success'
                  code: 200000
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v2/reactions/messages/most:
    $ref: './v2/reaction/api.yaml#/ReactionsMessagesMost'
  /api/v2/roles:
    get:
      summary: 'get all roles'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Get all roles\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'filter'
          in: 'query'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: '#/components/responses/RolesResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: 'add permissions.'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Add permissions\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Permission information to be added\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                publicIds:
                  type: 'array'
                  items:
                    type: 'string'
                permissions:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'publicIds'
                - 'permissions'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v2/whitelist/records:
    get:
      summary: 'get rules of whitelist.'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Get rules of whitelist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'regexs'
          in: 'query'
          required: true
          schema:
            type: 'array'
            items:
              type: 'string'
      responses:
        '200':
          $ref: '#/components/responses/WhitelistRulesResponse'
        '404':
          $ref: './global/error.yaml#/NotFoundError'
        '500':
          $ref: './global/error.yaml#/UnexpectedError'
    put:
      summary: 'refresh rules of whitelist.'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Refresh rules of whitelist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be refreshed.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: 'add rules to whitelist.'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Add rules to whitelist\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be added.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                regexs:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'regexs'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: 'delete rules from whitelist'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Delete rule from whitelist\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be deleted.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                ruleIds:
                  type: 'array'
                  items:
                    type: 'string'
              required:
                - 'ruleIds'
      responses:
        '200':
          description: 'OK'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v2/whitelist/records/:ruleId:
    put:
      summary: 'update rule of whitelist.'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Update rule of whitelist.\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "Rules information to be updated.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                ruleId:
                  type: 'string'
                isEnabled:
                  type: 'boolean'
              required:
                - 'ruleId'
                - 'isEnabled'
      responses:
        '200':
          $ref: '#/components/responses/WhitelistRuleResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v3/roles:
    $ref: './v3/role/api.yaml#/Roles'
  /api/v3/roles/{roleId}:
    $ref: './v3/role/api.yaml#/RolesRoleId'
  /admin/v1/reports/user-last-activity:
    $ref: './v1/admin/api.yaml#/AdminReportsUserLastActivity'
  /api/v2/users:
    $ref: './v2/user/api.yaml#/Users'
  /api/v2/users/ban:
    $ref: './v2/user/api.yaml#/UsersBan'
  /api/v2/users/unban:
    $ref: './v2/user/api.yaml#/UsersUnban'
  /api/v2/users/{userId}/flags:
    $ref: './v2/user/api.yaml#/UsersUserIdFlags'
  /sockets/user.query:
    $ref: './v1/user/socket.yaml#/Userquery'
  /sockets/user.get:
    $ref: './v1/user/socket.yaml#/Userget'
  /sockets/user.flag:
    $ref: './v1/user/socket.yaml#/Userflag'
  /sockets/user.unflag:
    $ref: './v1/user/socket.yaml#/Userunflag'
  /sockets/user.isFlagByMe:
    $ref: './v1/user/socket.yaml#/UserisFlagByMe'
  /sockets/user.update:
    $ref: './v1/user/socket.yaml#/Userupdate'
  /callbacks/user.didUpdate:
    $ref: './v1/user/event.yaml#/CallbacksUserdidUpdate'
  /callbacks/v3.user.didUpdate:
    $ref: './v3/user/event.yaml#/CallbacksVuserdidUpdate'
  /api/v3/users:
    $ref: './v3/user/api.yaml#/Users'
  /api/v3/users/list:
    $ref: './v3/user/api.yaml#/UsersList'
  /api/v3/users/{userId}:
    $ref: './v3/user/api.yaml#/UsersUserId'
  /api/v3/users/{userId}/isFlagByMe:
    $ref: './v3/user/api.yaml#/UsersUserIdIsFlagByMe'
  /sockets/v3/user.query:
    $ref: './v3/user/socket.yaml#/Userquery'
  /sockets/v3/user.getList:
    $ref: './v3/user/socket.yaml#/UsergetList'
  /sockets/v3/user.get:
    $ref: './v3/user/socket.yaml#/Userget'
  /sockets/v3/user.update:
    $ref: './v3/user/socket.yaml#/Userupdate'
  /api/v2/channels:
    $ref: './v2/channel/api.yaml#/Channels'
  /api/v2/channel:
    $ref: './v2/channel/api.yaml#/Channel'
  /api/v2/channel/{channelId}/displayName:
    $ref: './v2/channel/api.yaml#/ChannelChannelIdDisplayName'
  /api/v2/channel/{channelId}/users/ban:
    $ref: './v2/channel/api.yaml#/ChannelChannelIdUsersBan'
  /api/v2/channel/{channelId}/users/unban:
    $ref: './v2/channel/api.yaml#/ChannelChannelIdUsersUnban'
  /api/v2/channels/{channelId}/close:
    $ref: './v2/channel/api.yaml#/ChannelsChannelIdClose'
  /api/v2/channel/{channelId}/avatar:
    $ref: './v2/channel/api.yaml#/ChannelChannelIdAvatar'
  /api/v2/channel/{channelId}/mute:
    $ref: './v2/channel/api.yaml#/ChannelChannelIdMute'
  /api/v2/channel/{channelId}/users/mute:
    $ref: './v2/channel/api.yaml#/ChannelChannelIdUsersMute'
  /api/v3/channels:
    $ref: './v3/channel/api.yaml#/Channels'
  /api/v3/channels/{channelId}:
    $ref: './v3/channel/api.yaml#/ChannelsChannelId'
  /api/v3/channels/{channelId}/join:
    $ref: './v3/channel/api.yaml#/ChannelsChannelIdJoin'
  /api/v3/channels/{channelId}/leave:
    $ref: './v3/channel/api.yaml#/ChannelsChannelIdLeave'
  /api/v3/channels/{channelId}/users:
    $ref: './v3/channel/api.yaml#/ChannelsChannelIdUsers'
  /api/v3/channels/{channelId}/users/ban:
    $ref: './v3/channel/api.yaml#/ChannelsChannelIdUsersBan'
  /api/v3/channels/{channelId}/users/unban:
    $ref: './v3/channel/api.yaml#/ChannelsChannelIdUsersUnban'
  /api/v3/channels/{channelId}/users/roles:
    $ref: './v3/channel/api.yaml#/ChannelsChannelIdUsersRoles'
  /api/v3/channels/conversation:
    $ref: './v3/channel/api.yaml#/ChannelsConversation'
  /api/v3/channels/list:
    $ref: './v3/channel/api.yaml#/ChannelsList'
  /api/v3/channels/{channelId}/seen:
    $ref: './v3/channel/api.yaml#/ChannelsChannelIdSeen'
  /api/v4/channels/{channelId}/users:
    $ref: './v4/channel/api.yaml#/ChannelsChannelIdUsers'
  /sockets/channel.create:
    $ref: './v1/channel/socket.yaml#/Channelcreate'
  /sockets/channel.createConversation:
    $ref: './v1/channel/socket.yaml#/ChannelcreateConversation'
  /sockets/channel.query:
    $ref: './v1/channel/socket.yaml#/Channelquery'
  /sockets/channel.queryUsers:
    $ref: './v1/channel/socket.yaml#/ChannelqueryUsers'
  /sockets/channel.setAvatar:
    $ref: './v1/channel/socket.yaml#/ChannelsetAvatar'
  /sockets/channel.banUsers:
    $ref: './v1/channel/socket.yaml#/ChannelbanUsers'
  /sockets/channel.unbanUsers:
    $ref: './v1/channel/socket.yaml#/ChannelunbanUsers'
  /sockets/channel.addRole:
    $ref: './v1/channel/socket.yaml#/ChanneladdRole'
  /sockets/channel.removeRole:
    $ref: './v1/channel/socket.yaml#/ChannelremoveRole'
  /sockets/channel.markSeen:
    $ref: './v1/channel/socket.yaml#/ChannelmarkSeen'
  /sockets/channel.startReading:
    $ref: './v1/channel/socket.yaml#/ChannelstartReading'
  /sockets/channel.stopReading:
    $ref: './v1/channel/socket.yaml#/ChannelstopReading'
  /sockets/channel.startReadings:
    $ref: './v1/channel/socket.yaml#/ChannelstartReadings'
  /sockets/channel.stopReadings:
    $ref: './v1/channel/socket.yaml#/ChannelstopReadings'
  /sockets/v3/channel.create:
    $ref: './v3/channel/socket.yaml#/Channelcreate'
  /sockets/v3/channel.createConversation:
    $ref: './v3/channel/socket.yaml#/ChannelcreateConversation'
  /sockets/v3/channel.delete:
    $ref: './v3/channel/socket.yaml#/Channeldelete'
  /sockets/v3/channel.get:
    $ref: './v3/channel/socket.yaml#/Channelget'
  /sockets/v3/channel.query:
    $ref: './v3/channel/socket.yaml#/Channelquery'
  /sockets/v3/channel.update:
    $ref: './v3/channel/socket.yaml#/Channelupdate'
  /sockets/v3/channel.getList:
    $ref: './v3/channel/socket.yaml#/ChannelgetList'
  /sockets/v3/channel.join:
    $ref: './v3/channel/socket.yaml#/Channeljoin'
  /sockets/v3/channel.leave:
    $ref: './v3/channel/socket.yaml#/Channelleave'
  /sockets/v3/channel.addUsers:
    $ref: './v3/channel/socket.yaml#/ChanneladdUsers'
  /sockets/v3/channel.removeUsers:
    $ref: './v3/channel/socket.yaml#/ChannelremoveUsers'
  /sockets/v3/channel.banUsers:
    $ref: './v3/channel/socket.yaml#/ChannelbanUsers'
  /sockets/v3/channel.unbanUsers:
    $ref: './v3/channel/socket.yaml#/ChannelunbanUsers'
  /sockets/v3/channel.queryUsers:
    $ref: './v3/channel/socket.yaml#/ChannelqueryUsers'
  /sockets/v3/channel.assignRoleToUsers:
    $ref: './v3/channel/socket.yaml#/ChannelassignRoleToUsers'
  /sockets/v3/channel.removeRoleFromUsers:
    $ref: './v3/channel/socket.yaml#/ChannelremoveRoleFromUsers'
  /sockets/v4/channel.queryUsers:
    $ref: './v4/channel/socket.yaml#/ChannelqueryUsers'
  /callbacks/channel.didUpdate:
    $ref: './v1/channel/event.yaml#/CallbacksChanneldidUpdate'
  /callbacks/channel.didAddUsers:
    $ref: './v1/channel/event.yaml#/CallbacksChanneldidAddUsers'
  /callbacks/channel.didRemoveUsers:
    $ref: './v1/channel/event.yaml#/CallbacksChanneldidRemoveUsers'
  /callbacks/channel.didBan:
    $ref: './v1/channel/event.yaml#/CallbacksChanneldidBan'
  /callbacks/channel.didUnban:
    $ref: './v1/channel/event.yaml#/CallbacksChanneldidUnban'
  /callbacks/channel.didCreate:
    $ref: './v1/channel/event.yaml#/CallbacksChanneldidCreate'
  /callbacks/channel.didJoin:
    $ref: './v1/channel/event.yaml#/CallbacksChanneldidJoin'
  /callbacks/channel.didLeave:
    $ref: './v1/channel/event.yaml#/CallbacksChanneldidLeave'
  /callbacks/channel.didMarkSeen:
    $ref: './v1/channel/event.yaml#/CallbacksChanneldidMarkSeen'
  /callbacks/channelUser.didUpdate:
    $ref: './v1/channel/event.yaml#/CallbacksChannelUserdidUpdate'
  /callbacks/v3.channel.didUpdate:
    $ref: './v3/channel/event.yaml#/CallbacksVchanneldidUpdate'
  /callbacks/v3.channel.didDelete:
    $ref: './v3/channel/event.yaml#/CallbacksVchanneldidDelete'
  /callbacks/v3.channel.didAddUsers:
    $ref: './v3/channel/event.yaml#/CallbacksVchanneldidAddUsers'
  /callbacks/v3.channel.didRemoveUsers:
    $ref: './v3/channel/event.yaml#/CallbacksVchanneldidRemoveUsers'
  /callbacks/v3.channel.didBan:
    $ref: './v3/channel/event.yaml#/CallbacksVchanneldidBan'
  /callbacks/v3.channel.didUnban:
    $ref: './v3/channel/event.yaml#/CallbacksVchanneldidUnban'
  /callbacks/v3.channel.didCreate:
    $ref: './v3/channel/event.yaml#/CallbacksVchanneldidCreate'
  /callbacks/v3.channel.didJoin:
    $ref: './v3/channel/event.yaml#/CallbacksVchanneldidJoin'
  /callbacks/v3.channel.didLeave:
    $ref: './v3/channel/event.yaml#/CallbacksVchanneldidLeave'
  /callbacks/v3.channel.didMarkSeen:
    $ref: './v3/channel/event.yaml#/CallbacksVchanneldidMarkSeen'
  /callbacks/v3.channelUser.didUpdate:
    $ref: './v3/channel/event.yaml#/CallbacksVchannelUserdidUpdate'
  /api/v1/messages/images:
    $ref: './v1/message/api.yaml#/MessagesImages'
  /api/v1/messages/{messageId}/images:
    $ref: './v1/message/api.yaml#/MessagesMessageIdImages'
  /api/v1/messages/files:
    $ref: './v1/message/api.yaml#/MessagesFiles'
  /api/v1/messages/{messageId}/files:
    $ref: './v1/message/api.yaml#/MessagesMessageIdFiles'
  /api/v3/messages:
    $ref: './v3/message/api.yaml#/Messages'
  /api/v3/messages/list:
    $ref: './v3/message/api.yaml#/MessagesList'
  /api/v3/messages/{messageId}:
    $ref: './v3/message/api.yaml#/MessagesMessageId'
  /api/v3/messages/:messageId/flag:
    $ref: './v3/message/api.yaml#/MessagesmessageIdFlag'
  /api/v3/messages/:messageId/unflag:
    $ref: './v3/message/api.yaml#/MessagesmessageIdUnflag'
  /api/v3/messages/:messageId/clearFlags:
    $ref: './v3/message/api.yaml#/MessagesmessageIdClearFlags'
  /api/v3/messages/{messageId}/isFlaggedByMe:
    $ref: './v3/message/api.yaml#/MessagesMessageIdIsFlaggedByMe'
  /sockets/message.create:
    $ref: './v1/message/socket.yaml#/Messagecreate'
  /sockets/message.update:
    $ref: './v1/message/socket.yaml#/Messageupdate'
  /sockets/message.updateData:
    $ref: './v1/message/socket.yaml#/MessageupdateData'
  /sockets/message.updateTag:
    $ref: './v1/message/socket.yaml#/MessageupdateTag'
  /sockets/message.flag:
    $ref: './v1/message/socket.yaml#/Messageflag'
  /sockets/message.get:
    $ref: './v1/message/socket.yaml#/Messageget'
  /sockets/message.unflag:
    $ref: './v1/message/socket.yaml#/Messageunflag'
  /sockets/message.query:
    $ref: './v1/message/socket.yaml#/Messagequery'
  /sockets/message.isFlagByMe:
    $ref: './v1/message/socket.yaml#/MessageisFlagByMe'
  /sockets/v3/message.query:
    $ref: './v3/message/socket.yaml#/Messagequery'
  /sockets/v3/message.create:
    $ref: './v3/message/socket.yaml#/Messagecreate'
  /sockets/v3/message.getList:
    $ref: './v3/message/socket.yaml#/MessagegetList'
  /sockets/v3/message.get:
    $ref: './v3/message/socket.yaml#/Messageget'
  /sockets/v3/message.update:
    $ref: './v3/message/socket.yaml#/Messageupdate'
  /sockets/v3/message.delete:
    $ref: './v3/message/socket.yaml#/Messagedelete'
  /sockets/v3/message.flag:
    $ref: './v3/message/socket.yaml#/Messageflag'
  /sockets/v3/message.unflag:
    $ref: './v3/message/socket.yaml#/Messageunflag'
  /sockets/v3/message.clearFlags:
    $ref: './v3/message/socket.yaml#/MessageclearFlags'
  /sockets/v3/message.isFlaggedByMe:
    $ref: './v3/message/socket.yaml#/MessageisFlaggedByMe'
  /callbacks/message.didCreate:
    $ref: './v1/message/callback.yaml#/CallbacksMessagedidCreate'
  /callbacks/message.didUpdate:
    $ref: './v1/message/callback.yaml#/CallbacksMessagedidUpdate'
  /callbacks/message.didDelete:
    $ref: './v1/message/callback.yaml#/CallbacksMessagedidDelete'
  /callbacks/v3.message.didCreate:
    $ref: './v3/message/event.yaml#/CallbacksVmessagedidCreate'
  /callbacks/v3.message.didUpdate:
    $ref: './v3/message/event.yaml#/CallbacksVmessagedidUpdate'
  /callbacks/v3.message.didDelete:
    $ref: './v3/message/event.yaml#/CallbacksVmessagedidDelete'
  /v1/notification:
    post:
      summary: 'register a device to get push notification'
      tags:
        - 'Notification'
      security:
        - ApiKeyAuth: []
      description: "Register a device to a notification service provider.\n"
      requestBody:
        description: "information of a device to be registered.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                deviceId:
                  type: 'string'
                  maxLength: 150
                platform:
                  type: 'string'
                  enum:
                    - 'android'
                    - 'ios'
                token:
                  type: 'string'
                  maxLength: 1000
                userId:
                  type: 'string'
                provider:
                  type: 'string'
              required:
                - 'deviceId'
                - 'platform'
                - 'token'
                - 'userId'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: 'unregister a device from a notification service provider'
      tags:
        - 'Notification'
      security:
        - ApiKeyAuth: []
      description: "Unregister a device from a notification service provider.\n"
      requestBody:
        description: "information of a device to be registered.\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                deviceId:
                  type: 'string'
                userId:
                  type: 'string'
              required:
                - 'deviceId'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /admin/v1/notification/setting:
    $ref: './v1/notification/api.yaml#/AdminNotificationSetting'
  /api/v3/notification/setting:
    $ref: './v3/notification/api.yaml#/NotificationSetting'
  /sockets/notification.getSetting:
    $ref: './v1/notification/socket.yaml#/NotificationgetSetting'
  /sockets/notification.saveSetting:
    $ref: './v1/notification/socket.yaml#/NotificationsaveSetting'
  /api/v2/reactions:
    $ref: './v2/reaction/api.yaml#/Reactions'
  /api/v3/reactions:
    $ref: './v3/reaction/api.yaml#/Reactions'
  /sockets/v3/reaction.query:
    $ref: './v3/reaction/socket.yaml#/Reactionquery'
  /sockets/reaction.add:
    $ref: './v1/reaction/socket.yaml#/Reactionadd'
  /sockets/reaction.query:
    $ref: './v1/reaction/socket.yaml#/Reactionquery'
  /sockets/reaction.remove:
    $ref: './v1/reaction/socket.yaml#/Reactionremove'
  /admin/v1/network/{networkId}:
    get:
      summary: 'Get a network'
      tags:
        - 'Network'
      security:
        - ApiKeyAuth: []
      description: "Get a network.\n"
      parameters:
        - name: 'Content-Type'
          in: 'header'
          value: 'application/json'
          required: true
          schema:
            type: 'string'
        - name: 'networkId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          $ref: '#/components/responses/NetworkResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: 'Save network'
      tags:
        - 'Network'
      security:
        - ApiKeyAuth: []
      description: "save network information\n"
      parameters:
        - name: 'Content-Type'
          in: 'header'
          value: 'application/json'
          required: true
          schema:
            type: 'string'
        - name: 'networkId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "data for save network\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                defaultMessageAutoDeleteEnabled:
                  type: 'boolean'
                  description: 'Is message in this channel will be deleted when the user flagged until flag limit?'
                defaultAutoDeleteMessageByFlagLimit:
                  type: 'number'
                  minimum: 1
                  example: 1
                  description: 'Number of flags that will force a message to be deleted automatically.'
                useSecureAuthentication:
                  type: 'boolean'
                  description: 'Is this network require secure authentication implementation.'
              required:
                - 'networkId'
                - 'defaultMessageAutoDeleteEnabled'
                - 'defaultAutoDeleteMessageByFlagLimit'
      responses:
        '200':
          $ref: '#/components/responses/NetworkResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v3/networks/server-key:
    $ref: './v3/network/api.yaml#/NetworksServerKey'
  /api/v3/networks:
    $ref: './v3/network/api.yaml#/Networks'
  /api/v3/networks/me:
    $ref: './v3/network/api.yaml#/NetworksMe'
  /api/v3/posts:
    $ref: './v3/post/api.yaml#/Posts'
  /api/v3/posts/{postId}:
    $ref: './v3/post/api.yaml#/PostsPostId'
  /api/v3/posts/{postId}/approve:
    $ref: './v3/post/api.yaml#/PostsPostIdApprove'
  /api/v3/posts/{postId}/decline:
    $ref: './v3/post/api.yaml#/PostsPostIdDecline'
  /api/v3/posts/{postId}/flag:
    $ref: './v3/post/api.yaml#/PostsPostIdFlag'
  /api/v3/posts/{postId}/isflagbyme:
    $ref: './v3/post/api.yaml#/PostsPostIdIsflagbyme'
  /api/v3/posts/:postId/unflag:
    $ref: './v3/post/api.yaml#/PostspostIdUnflag'
  /api/v3/posts/list:
    $ref: './v3/post/api.yaml#/PostsList'
  /api/v3/posts/:postId/flags:
    $ref: './v3/post/api.yaml#/PostspostIdFlags'
  /sockets/v3/post.create:
    $ref: './v3/post/socket.yaml#/Postcreate'
  /sockets/v3/post.update:
    $ref: './v3/post/socket.yaml#/Postupdate'
  /sockets/v3/post.delete:
    $ref: './v3/post/socket.yaml#/Postdelete'
  /sockets/v3/post.get:
    $ref: './v3/post/socket.yaml#/Postget'
  /sockets/v3/post.flag:
    $ref: './v3/post/socket.yaml#/Postflag'
  /sockets/v3/post.unflag:
    $ref: './v3/post/socket.yaml#/Postunflag'
  /sockets/v3/post.isflagbyme:
    $ref: './v3/post/socket.yaml#/Postisflagbyme'
  /sockets/v3/post.getList:
    $ref: './v3/post/socket.yaml#/PostgetList'
  /sockets/v3/post.clearFlags:
    $ref: './v3/post/socket.yaml#/PostclearFlags'
  /sockets/v3/post.query:
    $ref: './v3/post/socket.yaml#/Postquery'
  /sockets/v3/post.approve:
    $ref: './v3/post/socket.yaml#/Postapprove'
  /sockets/v3/post.decline:
    $ref: './v3/post/socket.yaml#/Postdecline'
  /api/v4/posts:
    $ref: './v4/post/api.yaml#/Posts'
  /api/v4/posts/:postId:
    $ref: './v4/post/api.yaml#/PostspostId'
  /sockets/v4/post.query:
    $ref: './v4/post/socket.yaml#/Postquery'
  /sockets/v4/post.create:
    $ref: './v4/post/socket.yaml#/Postcreate'
  /sockets/v4/post.update:
    $ref: './v4/post/socket.yaml#/Postupdate'
  /sockets/v4/post.delete:
    $ref: './v4/post/socket.yaml#/Postdelete'
  /api/v3/polls:
    $ref: './v3/poll/api.yaml#/Polls'
  /api/v3/polls/{pollId}:
    $ref: './v3/poll/api.yaml#/PollsPollId'
  /api/v3/polls/{pollId}/votes:
    $ref: './v3/poll/api.yaml#/PollsPollIdVotes'
  /api/v3/polls/{pollId}/answers/{answerId}:
    $ref: './v3/poll/api.yaml#/PollsPollIdAnswersAnswerId'
  /sockets/v3/poll.create:
    $ref: './v3/poll/socket.yaml#/Pollcreate'
  /sockets/v3/poll.update:
    $ref: './v3/poll/socket.yaml#/Pollupdate'
  /sockets/v3/poll.delete:
    $ref: './v3/poll/socket.yaml#/Polldelete'
  /sockets/v3/poll.vote:
    $ref: './v3/poll/socket.yaml#/Pollvote'
  /sockets/v3/poll.get:
    $ref: './v3/poll/socket.yaml#/Pollget'
  /sockets/v3/poll.getList:
    $ref: './v3/poll/socket.yaml#/PollgetList'
  /api/v3/user-feeds/{userId}:
    $ref: './v3/user-feed/api.yaml#/UserFeedsUserId'
  /api/v3/user-feeds/{userId}/count:
    $ref: './v3/user-feed/api.yaml#/UserFeedsUserIdCount'
  /sockets/v3/user-feed.query:
    $ref: './v3/user-feed/socket.yaml#/UserFeedquery'
  /sockets/v3/user-feed.count:
    $ref: './v3/user-feed/socket.yaml#/UserFeedcount'
  /api/v3/community-feeds/{communityId}:
    $ref: './v3/community-feed/api.yaml#/CommunityFeedsCommunityId'
  /sockets/v3/community-feed.query:
    $ref: './v3/community-feed/socket.yaml#/CommunityFeedquery'
  /api/v3/global-feeds:
    $ref: './v3/global-feed/api.yaml#/GlobalFeeds'
  /sockets/v3/global-feed.query:
    $ref: './v3/global-feed/socket.yaml#/GlobalFeedquery'
  /api/v3/comments:
    $ref: './v3/comment/api.yaml#/Comments'
  /api/v3/comments/{commentId}:
    $ref: './v3/comment/api.yaml#/CommentsCommentId'
  /api/v3/comments/{commentId}/flag:
    $ref: './v3/comment/api.yaml#/CommentsCommentIdFlag'
  /api/v3/comments/{commentId}/isflagbyme:
    $ref: './v3/comment/api.yaml#/CommentsCommentIdIsflagbyme'
  /api/v3/comments/:commentId/unflag:
    $ref: './v3/comment/api.yaml#/CommentscommentIdUnflag'
  /api/v3/comments/list:
    $ref: './v3/comment/api.yaml#/CommentsList'
  /api/v3/comments/{commentId}/flags:
    $ref: './v3/comment/api.yaml#/CommentsCommentIdFlags'
  /sockets/v3/comment.query:
    $ref: './v3/comment/socket.yaml#/Commentquery'
  /sockets/v3/comment.create:
    $ref: './v3/comment/socket.yaml#/Commentcreate'
  /sockets/v3/comment.update:
    $ref: './v3/comment/socket.yaml#/Commentupdate'
  /sockets/v3/comment.delete:
    $ref: './v3/comment/socket.yaml#/Commentdelete'
  /sockets/v3/comment.flag:
    $ref: './v3/comment/socket.yaml#/Commentflag'
  /sockets/v3/comment.unflag:
    $ref: './v3/comment/socket.yaml#/Commentunflag'
  /sockets/v3/comment.isflagbyme:
    $ref: './v3/comment/socket.yaml#/Commentisflagbyme'
  /sockets/v3/comment.get:
    $ref: './v3/comment/socket.yaml#/Commentget'
  /sockets/v3/comment.getList:
    $ref: './v3/comment/socket.yaml#/CommentgetList'
  /sockets/v3/comment.clearFlags:
    $ref: './v3/comment/socket.yaml#/CommentclearFlags'
  /api/v4/comments/{commentId}:
    $ref: './v4/comment/api.yaml#/CommentsCommentId'
  /sockets/v4/comment.delete:
    $ref: './v4/comment/socket.yaml#/Commentdelete'
  /sockets/moderation-setting.get:
    post:
      summary: 'get a moderation setting'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'messageId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      consumes:
        - 'application/json'
      description: "Get a moderation setting.\n"
      responses:
        '200':
          $ref: '#/components/responses/ModerationSettingResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /sockets/moderation-setting.update:
    post:
      summary: 'update a moderation setting'
      tags:
        - 'Admin'
      securityDefinition:
        ApiKeyAuth:
          type: 'apiKey'
          in: 'header'
          name: 'Authorization'
      description: "Update a moderation setting\n"
      parameters:
        - name: 'Authorization'
          in: 'header'
          required: true
          schema:
            type: 'string'
        - name: 'Content-Type'
          in: 'header'
          required: true
          schema:
            type: 'string'
      requestBody:
        description: "moderation setting information\n"
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                maxRepetition:
                  type: 'integer'
                  minimum: 0
                maxRepetitionTimeout:
                  type: 'integer'
                  minimum: 0
                blacklistMuteTimeout:
                  type: 'integer'
                  minimum: 0
                whitelistMuteTimeout:
                  type: 'integer'
                  minimum: 0
                maxRepetitionMuteTimeout:
                  type: 'integer'
                  minimum: 0
                enableImageModeration:
                  type: 'boolean'
                imageModeration:
                  type: 'object'
                  properties:
                    nudity:
                      type: 'number'
                      minimum: 0
                    suggestive:
                      type: 'number'
                      minimum: 0
                    violence:
                      type: 'number'
                      minimum: 0
                    disturbing:
                      type: 'number'
                      minimum: 0
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /api/v3/files:
    $ref: './v3/file/api.yaml#/Files'
  /api/v3/files/{fileId}:
    $ref: './v3/file/api.yaml#/FilesFileId'
  /api/v3/files/{fileId}/download:
    $ref: './v3/file/api.yaml#/FilesFileIdDownload'
  /sockets/v3/file.get:
    $ref: './v3/file/socket.yaml#/Fileget'
  /sockets/v3/file.delete:
    $ref: './v3/file/socket.yaml#/Filedelete'
  /api/v4/images:
    $ref: './v4/file/api.yaml#/Images'
  /api/v4/files:
    $ref: './v4/file/api.yaml#/Files'
  /api/v4/videos:
    $ref: './v4/file/api.yaml#/Videos'
  /api/v3/communities:
    $ref: './v3/community/api.yaml#/Communities'
  /api/v3/communities/{communityId}:
    $ref: './v3/community/api.yaml#/CommunitiesCommunityId'
  /api/v3/communities/:communityId/join:
    $ref: './v3/community/api.yaml#/CommunitiescommunityIdJoin'
  /api/v3/communities/:communityId/leave:
    $ref: './v3/community/api.yaml#/CommunitiescommunityIdLeave'
  /api/v3/communities/{communityId}/users:
    $ref: './v3/community/api.yaml#/CommunitiesCommunityIdUsers'
  /api/v3/communities/:communityId/users/ban:
    $ref: './v3/community/api.yaml#/CommunitiescommunityIdUsersBan'
  /api/v3/communities/:communityId/users/unban:
    $ref: './v3/community/api.yaml#/CommunitiescommunityIdUsersUnban'
  /api/v3/communities/:communityId/users/roles:
    $ref: './v3/community/api.yaml#/CommunitiescommunityIdUsersRoles'
  /api/v3/communities/{communityId}/permissions/me:
    $ref: './v3/community/api.yaml#/CommunitiesCommunityIdPermissionsMe'
  /api/v3/communities/list:
    $ref: './v3/community/api.yaml#/CommunitiesList'
  /api/v3/communities/recommended:
    $ref: './v3/community/api.yaml#/CommunitiesRecommended'
  /api/v3/communities/top-trending:
    $ref: './v3/community/api.yaml#/CommunitiesTopTrending'
  /api/v4/communities/:communityId/users/roles:
    $ref: './v4/community/api.yaml#/CommunitiescommunityIdUsersRoles'
  /sockets/v3/community.query:
    $ref: './v3/community/socket.yaml#/Communityquery'
  /sockets/v3/community.create:
    $ref: './v3/community/socket.yaml#/Communitycreate'
  /sockets/v3/community.update:
    $ref: './v3/community/socket.yaml#/Communityupdate'
  /sockets/v3/community.delete:
    $ref: './v3/community/socket.yaml#/Communitydelete'
  /sockets/v3/community.get:
    $ref: './v3/community/socket.yaml#/Communityget'
  /sockets/v3/community.join:
    $ref: './v3/community/socket.yaml#/Communityjoin'
  /sockets/v3/community.leave:
    $ref: './v3/community/socket.yaml#/Communityleave'
  /sockets/v3/community.queryUsers:
    $ref: './v3/community/socket.yaml#/CommunityqueryUsers'
  /sockets/v3/community.banUsers:
    $ref: './v3/community/socket.yaml#/CommunitybanUsers'
  /sockets/v3/community.unbanUsers:
    $ref: './v3/community/socket.yaml#/CommunityunbanUsers'
  /sockets/v3/community.getList:
    $ref: './v3/community/socket.yaml#/CommunitygetList'
  /sockets/v3/community.getRecommendedList:
    $ref: './v3/community/socket.yaml#/CommunitygetRecommendedList'
  /sockets/v3/community.getTopTrendingList:
    $ref: './v3/community/socket.yaml#/CommunitygetTopTrendingList'
  /sockets/v3/community.addUsers:
    $ref: './v3/community/socket.yaml#/CommunityaddUsers'
  /sockets/v3/community.removeUsers:
    $ref: './v3/community/socket.yaml#/CommunityremoveUsers'
  /sockets/v3/community.assignRoleToUsers:
    $ref: './v3/community/socket.yaml#/CommunityassignRoleToUsers'
  /sockets/v3/community.removeRoleFromUsers:
    $ref: './v3/community/socket.yaml#/CommunityremoveRoleFromUsers'
  /sockets/v3/community.getSelfPermission:
    $ref: './v3/community/socket.yaml#/CommunitygetSelfPermission'
  /sockets/v4/community.assignRolesToUsers:
    $ref: './v4/community/socket.yaml#/CommunityassignRolesToUsers'
  /sockets/v4/community.removeRolesFromUsers:
    $ref: './v4/community/socket.yaml#/CommunityremoveRolesFromUsers'
  /api/v3/community-categories:
    $ref: './v3/community-category/api.yaml#/CommunityCategories'
  /api/v3/community-categories/{categoryId}:
    $ref: './v3/community-category/api.yaml#/CommunityCategoriesCategoryId'
  /api/v3/community-categories/list:
    $ref: './v3/community-category/api.yaml#/CommunityCategoriesList'
  /sockets/v3/community-category.query:
    $ref: './v3/community-category/socket.yaml#/CommunityCategoryquery'
  /sockets/v3/community-category.get:
    $ref: './v3/community-category/socket.yaml#/CommunityCategoryget'
  /sockets/v3/community-category.getList:
    $ref: './v3/community-category/socket.yaml#/CommunityCategorygetList'
  /api/v3/content-feeds:
    $ref: './v3/content-feed/api.yaml#/ContentFeeds'
  /sockets/v3/content-feed.query:
    $ref: './v3/content-feed/socket.yaml#/ContentFeedquery'
  /api/v3/video-streaming:
    $ref: './v3/video-streaming/api.yaml#/VideoStreaming'
  /api/v3/video-streaming/{streamId}:
    $ref: './v3/video-streaming/api.yaml#/VideoStreamingStreamId'
  /api/v3/video-streaming/:streamId/streaming-url:
    $ref: './v3/video-streaming/api.yaml#/VideoStreamingstreamIdStreamingUrl'
  /sockets/v3/video-streaming.create:
    $ref: './v3/video-streaming/socket.yaml#/VideoStreamingcreate'
  /sockets/v3/video-streaming.update:
    $ref: './v3/video-streaming/socket.yaml#/VideoStreamingupdate'
  /sockets/v3/video-streaming.delete:
    $ref: './v3/video-streaming/socket.yaml#/VideoStreamingdelete'
  /sockets/v3/video-streaming.query:
    $ref: './v3/video-streaming/socket.yaml#/VideoStreamingquery'
  /sockets/v3/video-streaming.get:
    $ref: './v3/video-streaming/socket.yaml#/VideoStreamingget'
  /sockets/v3/video-streaming.dispose:
    $ref: './v3/video-streaming/socket.yaml#/VideoStreamingdispose'
  /callbacks/video-streaming.didStart:
    $ref: './v3/video-streaming/event.yaml#/CallbacksVideoStreamingdidStart'
  /callbacks/video-streaming.didStop:
    $ref: './v3/video-streaming/event.yaml#/CallbacksVideoStreamingdidStop'
  /callbacks/video-streaming.didRecord:
    $ref: './v3/video-streaming/event.yaml#/CallbacksVideoStreamingdidRecord'
  /api/v3/user-event/video-streaming:
    $ref: './v3/user-event/api.yaml#/UserEventVideoStreaming'
  /api/v4/me/following/:userId:
    $ref: './v4/follow/api.yaml#/MeFollowinguserId'
  /api/v4/me/followers/:userId:
    $ref: './v4/follow/api.yaml#/MeFollowersuserId'
  /api/v4/me/followers:
    $ref: './v4/follow/api.yaml#/MeFollowers'
  /api/v4/users/{userId}/followers:
    $ref: './v4/follow/api.yaml#/UsersUserIdFollowers'
  /api/v4/me/following:
    $ref: './v4/follow/api.yaml#/MeFollowing'
  /api/v4/users/{userId}/following:
    $ref: './v4/follow/api.yaml#/UsersUserIdFollowing'
  /api/v4/me/followInfo:
    $ref: './v4/follow/api.yaml#/MeFollowInfo'
  /api/v4/users/{userId}/followInfo:
    $ref: './v4/follow/api.yaml#/UsersUserIdFollowInfo'
  /api/v4/users/{userId}:
    $ref: './v4/user/api.yaml#/UsersUserId'
  /api/v4/me/flags/{userId}:
    $ref: './v4/user/api.yaml#/MeFlagsUserId'
  /sockets/v4/following.create:
    $ref: './v4/follow/socket.yaml#/Followingcreate'
  /sockets/v4/following.delete:
    $ref: './v4/follow/socket.yaml#/Followingdelete'
  /sockets/v4/follower.accept:
    $ref: './v4/follow/socket.yaml#/Followeraccept'
  /sockets/v4/follower.delete:
    $ref: './v4/follow/socket.yaml#/Followerdelete'
  /sockets/v4/followers.getList:
    $ref: './v4/follow/socket.yaml#/FollowersgetList'
  /sockets/v4/following.getList:
    $ref: './v4/follow/socket.yaml#/FollowinggetList'
  /sockets/v4/followInfo.get:
    $ref: './v4/follow/socket.yaml#/FollowInfoget'
  /api/v4/me/global-feeds:
    $ref: './v4/global-feed/api.yaml#/MeGlobalFeeds'
  /sockets/v4/global-feed.query:
    $ref: './v4/global-feed/socket.yaml#/GlobalFeedquery'
  /api/v3/network-settings:
    $ref: './v3/network-setting/api.yaml#/NetworkSettings'
  /api/v3/network-settings/social:
    $ref: './v3/network-setting/api.yaml#/NetworkSettingsSocial'
  /api/v3/network-settings/webhook:
    $ref: './v3/network-setting/api.yaml#/NetworkSettingsWebhook'
  /api/v3/network-settings/chat:
    $ref: './v3/network-setting/api.yaml#/NetworkSettingsChat'
  /api/v3/network-settings/moderation:
    $ref: './v3/network-setting/api.yaml#/NetworkSettingsModeration'
  /api/v3/network-settings/feed-setting:
    $ref: './v3/network-setting/api.yaml#/NetworkSettingsFeedSetting'
  /api/v3/network-settings/tier:
    $ref: './v3/network-setting/api.yaml#/NetworkSettingsTier'
  /api/v3/allowlists:
    $ref: './v3/moderation/api.yaml#/Allowlists'
  /api/v3/blocklists:
    $ref: './v3/moderation/api.yaml#/Blocklists'
  /sockets/v3/network-settings.getSocial:
    $ref: './v3/network-setting/socket.yaml#/NetworkSettingsgetSocial'
  /sockets/v3/network-settings.getChat:
    $ref: './v3/network-setting/socket.yaml#/NetworkSettingsgetChat'
  /realtime/community.created:
    $ref: './v4/realtime/community/event.yaml#/RealtimeCommunitycreated'
  /realtime/community.updated:
    $ref: './v4/realtime/community/event.yaml#/RealtimeCommunityupdated'
  /realtime/community.deleted:
    $ref: './v4/realtime/community/event.yaml#/RealtimeCommunitydeleted'
  /realtime/community.joined:
    $ref: './v4/realtime/community/event.yaml#/RealtimeCommunityjoined'
  /realtime/community.left:
    $ref: './v4/realtime/community/event.yaml#/RealtimeCommunityleft'
  /realtime/community.userAdded:
    $ref: './v4/realtime/community/event.yaml#/RealtimeCommunityuserAdded'
  /realtime/community.userRemoved:
    $ref: './v4/realtime/community/event.yaml#/RealtimeCommunityuserRemoved'
  /realtime/community.userChanged:
    $ref: './v4/realtime/community/event.yaml#/RealtimeCommunityuserChanged'
  /realtime/community.userBanned:
    $ref: './v4/realtime/community/event.yaml#/RealtimeCommunityuserBanned'
  /realtime/community.userUnbanned:
    $ref: './v4/realtime/community/event.yaml#/RealtimeCommunityuserUnbanned'
  /realtime/post.created:
    $ref: './v4/realtime/post/event.yaml#/RealtimePostcreated'
  /realtime/post.updated:
    $ref: './v4/realtime/post/event.yaml#/RealtimePostupdated'
  /realtime/post.deleted:
    $ref: './v4/realtime/post/event.yaml#/RealtimePostdeleted'
  /realtime/post.approved:
    $ref: './v4/realtime/post/event.yaml#/RealtimePostapproved'
  /realtime/post.declined:
    $ref: './v4/realtime/post/event.yaml#/RealtimePostdeclined'
  /realtime/post.flagged:
    $ref: './v4/realtime/post/event.yaml#/RealtimePostflagged'
  /realtime/post.unflagged:
    $ref: './v4/realtime/post/event.yaml#/RealtimePostunflagged'
  /realtime/post.addReaction:
    $ref: './v4/realtime/post/event.yaml#/RealtimePostaddReaction'
  /realtime/post.removeReaction:
    $ref: './v4/realtime/post/event.yaml#/RealtimePostremoveReaction'
  /realtime/comment.created:
    $ref: './v4/realtime/comment/event.yaml#/RealtimeCommentcreated'
  /realtime/comment.updated:
    $ref: './v4/realtime/comment/event.yaml#/RealtimeCommentupdated'
  /realtime/comment.deleted:
    $ref: './v4/realtime/comment/event.yaml#/RealtimeCommentdeleted'
  /realtime/comment.flagged:
    $ref: './v4/realtime/comment/event.yaml#/RealtimeCommentflagged'
  /realtime/comment.unflagged:
    $ref: './v4/realtime/comment/event.yaml#/RealtimeCommentunflagged'
  /realtime/comment.addReaction:
    $ref: './v4/realtime/comment/event.yaml#/RealtimeCommentaddReaction'
  /realtime/comment.removeReaction:
    $ref: './v4/realtime/comment/event.yaml#/RealtimeCommentremoveReaction'
  /realtime/user.updated:
    $ref: './v4/realtime/user/event.yaml#/RealtimeUserupdated'
  /realtime/user.flagged:
    $ref: './v4/realtime/user/event.yaml#/RealtimeUserflagged'
  /realtime/user.unflagged:
    $ref: './v4/realtime/user/event.yaml#/RealtimeUserunflagged'
  /realtime/user.flagCleared:
    $ref: './v4/realtime/user/event.yaml#/RealtimeUserflagCleared'
  /realtime/follow.created:
    $ref: './v4/realtime/follow/event.yaml#/RealtimeFollowcreated'
  /realtime/follow.requested:
    $ref: './v4/realtime/follow/event.yaml#/RealtimeFollowrequested'
  /realtime/follow.accepted:
    $ref: './v4/realtime/follow/event.yaml#/RealtimeFollowaccepted'
  /realtime/follow.unfollowed:
    $ref: './v4/realtime/follow/event.yaml#/RealtimeFollowunfollowed'
  /realtime/follow.requestCanceled:
    $ref: './v4/realtime/follow/event.yaml#/RealtimeFollowrequestCanceled'
  /realtime/follow.followerDeleted:
    $ref: './v4/realtime/follow/event.yaml#/RealtimeFollowfollowerDeleted'
  /realtime/follow.requestDeclined:
    $ref: './v4/realtime/follow/event.yaml#/RealtimeFollowrequestDeclined'
  /realtime/message.created:
    $ref: './v5/realtime/message/event.yaml#/RealtimeMessagecreated'
  /realtime/message.updated:
    $ref: './v5/realtime/message/event.yaml#/RealtimeMessageupdated'
  /realtime/message.deleted:
    $ref: './v5/realtime/message/event.yaml#/RealtimeMessagedeleted'
  /realtime/message.flagged:
    $ref: './v5/realtime/message/event.yaml#/RealtimeMessageflagged'
  /realtime/message.unflagged:
    $ref: './v5/realtime/message/event.yaml#/RealtimeMessageunflagged'
  /realtime/message.reactionAdded:
    $ref: './v5/realtime/message/event.yaml#/RealtimeMessagereactionAdded'
  /realtime/message.reactionRemoved:
    $ref: './v5/realtime/message/event.yaml#/RealtimeMessagereactionRemoved'
  /realtime/message-feed.created:
    $ref: './v5/realtime/message-feed/event.yaml#/RealtimeMessageFeedcreated'
  /realtime/message-feed.updated:
    $ref: './v5/realtime/message-feed/event.yaml#/RealtimeMessageFeedupdated'
  /realtime/message-feed.deleted:
    $ref: './v5/realtime/message-feed/event.yaml#/RealtimeMessageFeeddeleted'
  /realtime/channel.created:
    $ref: './v3/realtime/channel/event.yaml#/RealtimeChannelcreated'
  /realtime/channel.updated:
    $ref: './v3/realtime/channel/event.yaml#/RealtimeChannelupdated'
  /realtime/channel.deleted:
    $ref: './v3/realtime/channel/event.yaml#/RealtimeChanneldeleted'
  /realtime/channel.joined:
    $ref: './v3/realtime/channel/event.yaml#/RealtimeChanneljoined'
  /realtime/channel.left:
    $ref: './v3/realtime/channel/event.yaml#/RealtimeChannelleft'
  /realtime/channel.membersAdded:
    $ref: './v3/realtime/channel/event.yaml#/RealtimeChannelmembersAdded'
  /realtime/channel.membersRemoved:
    $ref: './v3/realtime/channel/event.yaml#/RealtimeChannelmembersRemoved'
  /realtime/channel.banned:
    $ref: './v3/realtime/channel/event.yaml#/RealtimeChannelbanned'
  /realtime/channel.unbanned:
    $ref: './v3/realtime/channel/event.yaml#/RealtimeChannelunbanned'
  /api/v5/me/global-feeds:
    $ref: './v5/global-feed/api.yaml#/MeGlobalFeeds'
  /sockets/v5/global-feed.query:
    $ref: './v5/global-feed/socket.yaml#/GlobalFeedquery'
  /api/v5/message-feeds:
    $ref: './v5/message-feed/api.yaml#/MessageFeeds'
  /api/v5/message-feeds/{messageFeedId}:
    $ref: './v5/message-feed/api.yaml#/MessageFeedsMessageFeedId'
  /api/v5/message-feeds/channel/{channelId}:
    $ref: './v5/message-feed/api.yaml#/MessageFeedsChannelChannelId'
  /api/v5/message-feeds/list:
    $ref: './v5/message-feed/api.yaml#/MessageFeedsList'
  /api/v5/message-feeds/user/{creatorId}:
    $ref: './v5/message-feed/api.yaml#/MessageFeedsUserCreatorId'
  /api/v5/messages:
    $ref: './v5/message/api.yaml#/Messages'
  /api/v5/messages/{messageId}:
    $ref: './v5/message/api.yaml#/MessagesMessageId'
  /api/v5/messages/{messageId}/flags/all:
    $ref: './v5/message/api.yaml#/MessagesMessageIdFlagsAll'
  /api/v5/messages/{messageId}/flags:
    $ref: './v5/message/api.yaml#/MessagesMessageIdFlags'
  /api/v5/messages/list:
    $ref: './v5/message/api.yaml#/MessagesList'
  /api/v5/messages/user/{creatorId}:
    $ref: './v5/message/api.yaml#/MessagesUserCreatorId'
  /webhook/message.didCreate:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send new created message whenever a message got created in a channel'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didCreate'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
  /webhook/message.didDelete:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send deleted message whenever a message got deleted in a channel'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didDelete'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
  /webhook/message.didUpdate:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send updated message whenever a message got updated in a channel'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didUpdate'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
  /webhook/message.didFlag:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send updated message whenever a message got flag'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didFlag'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
  /webhook/message.didUnflag:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send updated message whenever a message flag is removed.'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didUnflag'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
  /webhook/message.didClearflag:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send updated message whenever all message flags are cleared.'
      responses:
        '200':
          description: 'messages is messages information. users is list of all user information relate to this messages'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'message.didClearflag'
                  data:
                    type: 'object'
                    properties:
                      messages:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#/Message'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
  /webhook/channel.didCreate:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send new created channel whenever a channel got create'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of userId who is added to channel. users is a list of user information.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didCreate'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
  /webhook/channel.didJoin:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send join event information whenever a channel got joined'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of joined userId. users is a list of user information.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didJoin'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
  /webhook/channel.didAddUsers:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send user added event information whenever new member got added to a channel.'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of added userId. adderId is user who add other user to channel users is a list of user information.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didAddUsers'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
                      adderId:
                        type: 'string'
  /webhook/channel.didClose:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send channel close event information whenever a channel close.'
      responses:
        '200':
          description: 'channel is channel information.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didClose'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#Channel'
  /webhook/channel.didLeave:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send channel leave event information whenever someone leave a channel.'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of userId who leave channel. users is a list of userInfo'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didLeave'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
  /webhook/channel.didUpdate:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send channel updated event information whenever a channel got updated.'
      responses:
        '200':
          description: 'channel is channel information. userId is a userId who update channel. users is a list of userInfo'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didUpdate'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
                      userId:
                        type: 'string'
  /webhook/channel.didRemoveUsers:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send user removed event information whenever member got remove from channel.'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of removed userId. removerId is userId who remove other users from channel. users is a list of user information.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didRemoveUsers'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
                      removerId:
                        type: 'string'
  /webhook/channel.didUpdateMeta:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send channel''s meta data updated event information whenever a channel''s meta data got updated.'
      responses:
        '200':
          description: 'channel is channel information. userId is a userId who update channel''s meta data. users is a list of userInfo'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didUpdateMeta'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
                      userId:
                        type: 'string'
  /webhook/channel.didBan:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send channel banned event whenever a channel got banned.'
      responses:
        '200':
          description: 'channel is channel information. userIds is a list of userIds who being banned. actorId is userId who ban other user. users is a list of userInfo'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'channel.didBan'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
                      actorId:
                        type: 'string'
                      userIds:
                        type: 'array'
                        items:
                          type: 'string'
  /webhook/moderation.didBan:
    get:
      tags:
        - 'WebhookEvent'
      description: 'Send banned event whenever a system detect message that contain in the blacklist'
      responses:
        '200':
          description: 'channel is channel information. userId is a userId who send the message. users is a list of userInfo'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  event:
                    type: 'string'
                    enum:
                      - 'moderation.didBan'
                  data:
                    type: 'object'
                    properties:
                      channel:
                        type: 'array'
                        items:
                          $ref: './schema/message.yaml#Channel'
                      users:
                        type: 'array'
                        items:
                          $ref: './schema/user.yaml#User'
                      userId:
                        type: 'string'
  /webhook/user.didClearFlag:
    $ref: './v1/user/webhook.yaml#/WebhookUserdidClearFlag'
  /webhook/user.didFlag:
    $ref: './v1/user/webhook.yaml#/WebhookUserdidFlag'
  /webhook/user.didUnflag:
    $ref: './v1/user/webhook.yaml#/WebhookUserdidUnflag'
  /webhook/user.didUpdate:
    $ref: './v1/user/webhook.yaml#/WebhookUserdidUpdate'
  /webhook/v3.community.didCreate:
    $ref: './v3/community/webhook.yaml#/WebhookVcommunitydidCreate'
  /webhook/v3.community.didUpdate:
    $ref: './v3/community/webhook.yaml#/WebhookVcommunitydidUpdate'
  /webhook/v3.community.didDelete:
    $ref: './v3/community/webhook.yaml#/WebhookVcommunitydidDelete'
  /webhook/v3.community.didJoin:
    $ref: './v3/community/webhook.yaml#/WebhookVcommunitydidJoin'
  /webhook/v3.community.didLeave:
    $ref: './v3/community/webhook.yaml#/WebhookVcommunitydidLeave'
  /webhook/v3.community.didAddUsers:
    $ref: './v3/community/webhook.yaml#/WebhookVcommunitydidAddUsers'
  /webhook/v3.community.didRemoveUsers:
    $ref: './v3/community/webhook.yaml#/WebhookVcommunitydidRemoveUsers'
  /webhook/v3.community.didBan:
    $ref: './v3/community/webhook.yaml#/WebhookVcommunitydidBan'
  /webhook/v3.community.didUnban:
    $ref: './v3/community/webhook.yaml#/WebhookVcommunitydidUnban'
  /webhook/v3.post.didCreate:
    $ref: './v3/post/webhook.yaml#/WebhookVpostdidCreate'
  /webhook/v3.post.didUpdate:
    $ref: './v3/post/webhook.yaml#/WebhookVpostdidUpdate'
  /webhook/v3.post.didDelete:
    $ref: './v3/post/webhook.yaml#/WebhookVpostdidDelete'
  /webhook/v3.post.didApprove:
    $ref: './v3/post/webhook.yaml#/WebhookVpostdidApprove'
  /webhook/v3.post.didDecline:
    $ref: './v3/post/webhook.yaml#/WebhookVpostdidDecline'
  /webhook/v3.post.didFlag:
    $ref: './v3/post/webhook.yaml#/WebhookVpostdidFlag'
  /webhook/v3.post.didUnflag:
    $ref: './v3/post/webhook.yaml#/WebhookVpostdidUnflag'
  /webhook/v3.post.didAddReaction:
    $ref: './v3/post/webhook.yaml#/WebhookVpostdidAddReaction'
  /webhook/v3.post.didRemoveReaction:
    $ref: './v3/post/webhook.yaml#/WebhookVpostdidRemoveReaction'
  /webhook/v3.comment.didCreate:
    $ref: './v3/comment/webhook.yaml#/WebhookVcommentdidCreate'
  /webhook/v3.comment.didUpdate:
    $ref: './v3/comment/webhook.yaml#/WebhookVcommentdidUpdate'
  /webhook/v3.comment.didDelete:
    $ref: './v3/comment/webhook.yaml#/WebhookVcommentdidDelete'
  /webhook/v3.comment.didFlag:
    $ref: './v3/comment/webhook.yaml#/WebhookVcommentdidFlag'
  /webhook/v3.comment.didUnflag:
    $ref: './v3/comment/webhook.yaml#/WebhookVcommentdidUnflag'
  /webhook/v3.comment.didAddReaction:
    $ref: './v3/comment/webhook.yaml#/WebhookVcommentdidAddReaction'
  /webhook/v3.comment.didRemoveReaction:
    $ref: './v3/comment/webhook.yaml#/WebhookVcommentdidRemoveReaction'
  /webhook/v3.comment.didReply:
    $ref: './v3/comment/webhook.yaml#/WebhookVcommentdidReply'
  /webhook/poll.didCreate:
    $ref: './v3/poll/webhook.yaml#/WebhookPolldidCreate'
  /webhook/poll.didUpdate:
    $ref: './v3/poll/webhook.yaml#/WebhookPolldidUpdate'
  /webhook/poll.didVote:
    $ref: './v3/poll/webhook.yaml#/WebhookPolldidVote'
  /webhook/v3.video-streaming.didRecord:
    $ref: './v3/video-streaming/webhook.yaml#/WebhookVvideoStreamingdidRecord'
  /webhook/v3.video-streaming.didStart:
    $ref: './v3/video-streaming/webhook.yaml#/WebhookVvideoStreamingdidStart'
  /webhook/v3.video-streaming.didStop:
    $ref: './v3/video-streaming/webhook.yaml#/WebhookVvideoStreamingdidStop'
  /webhook/follow.didCreate:
    $ref: './v4/follow/webhook.yaml#/WebhookFollowdidCreate'
  /webhook/follow.didRequest:
    $ref: './v4/follow/webhook.yaml#/WebhookFollowdidRequest'
  /webhook/follow.didAcceptRequest:
    $ref: './v4/follow/webhook.yaml#/WebhookFollowdidAcceptRequest'
  /webhook/follow.didUnfollow:
    $ref: './v4/follow/webhook.yaml#/WebhookFollowdidUnfollow'
  /webhook/follow.didCancelRequest:
    $ref: './v4/follow/webhook.yaml#/WebhookFollowdidCancelRequest'
  /webhook/follow.didDecineRequest:
    $ref: './v4/follow/webhook.yaml#/WebhookFollowdidDecineRequest'
  /webhook/follow.didDeleteFollower:
    $ref: './v4/follow/webhook.yaml#/WebhookFollowdidDeleteFollower'
  /webhook/push-notification/post.created:
    $ref: './v3/post/webhook.yaml#/WebhookPushNotificationPostcreated'
  /webhook/push-notification/post.need-reviewing:
    $ref: './v3/post/webhook.yaml#/WebhookPushNotificationPostneedReviewing'
  /webhook/push-notification/post.approved:
    $ref: './v3/post/webhook.yaml#/WebhookPushNotificationPostapproved'
  /webhook/push-notification/comment.created:
    $ref: './v3/comment/webhook.yaml#/WebhookPushNotificationCommentcreated'
  /webhook/push-notification/comment.replied:
    $ref: './v3/comment/webhook.yaml#/WebhookPushNotificationCommentreplied'
  /webhook/push-notification/post.reacted:
    $ref: './v3/post/webhook.yaml#/WebhookPushNotificationPostreacted'
  /webhook/push-notification/comment.reacted:
    $ref: './v3/comment/webhook.yaml#/WebhookPushNotificationCommentreacted'
  /webhook/push-notification/message.created:
    $ref: './v3/message/webhook.yaml#/WebhookPushNotificationMessagecreated'
  /webhook/push-notification/channel.created:
    $ref: './v3/channel/webhook.yaml#/WebhookPushNotificationChannelcreated'
  /webhook/push-notification/channel.joined:
    $ref: './v3/channel/webhook.yaml#/WebhookPushNotificationChanneljoined'
  /webhook/push-notification/follow.created:
    $ref: './v4/follow/webhook.yaml#/WebhookPushNotificationFollowcreated'
  /webhook/push-notification/follow.requested:
    $ref: './v4/follow/webhook.yaml#/WebhookPushNotificationFollowrequested'
  /webhook/push-notification/follow.accepted:
    $ref: './v4/follow/webhook.yaml#/WebhookPushNotificationFollowaccepted'
  /webhook/push-notification/mention-post.created:
    $ref: './v3/post/webhook.yaml#/WebhookPushNotificationMentionPostcreated'
  /webhook/push-notification/mention-user-feed-post.created:
    $ref: './v3/post/webhook.yaml#/WebhookPushNotificationMentionUserFeedPostcreated'
  /webhook/push-notification/mention-comment.created:
    $ref: './v3/comment/webhook.yaml#/WebhookPushNotificationMentionCommentcreated'
  /webhook/push-notification/mention-comment.replied:
    $ref: './v3/comment/webhook.yaml#/WebhookPushNotificationMentionCommentreplied'
  /webhook/push-notification/mention-user-feed-comment.created:
    $ref: './v3/comment/webhook.yaml#/WebhookPushNotificationMentionUserFeedCommentcreated'
  /webhook/push-notification/mention-user-feed-comment.replied:
    $ref: './v3/comment/webhook.yaml#/WebhookPushNotificationMentionUserFeedCommentreplied'
  /webhook/push-notification/video-streaming.started:
    $ref: './v3/video-streaming/webhook.yaml#/WebhookPushNotificationVideoStreamingstarted'
components:
  schemas:
    User:
      $ref: './schema/user.yaml#/User'
    ChannelType:
      $ref: './schema/channel.yaml#/ChannelType'
    ChannelMembership:
      $ref: './schema/channel.yaml#/ChannelMembership'
    Channel:
      type: 'object'
      properties:
        channelId:
          type: 'string'
          description: 'ID of a channel.'
        isDistinct:
          type: 'boolean'
        metadata:
          type: 'object'
          description: 'Additional properties to support custom fields.'
        type:
          $ref: './schema/message.yaml#ChannelType'
          description: 'Type of a channel (standard, conversation, broadcast). This property is not be used for now.'
        tags:
          type: 'array'
          description: 'List of tags. They will be used for searching.'
          items:
            type: 'string'
        isMuted:
          type: 'boolean'
          description: 'Is this channel muted? (Computed by using muteTimeout).'
        isRateLimited:
          type: 'boolean'
          description: 'Is this channel limited sending rate? (Computed by using muteTimeout).'
        muteTimeout:
          type: 'string'
          description: 'The date/time to suppress muteness.'
          format: 'date-time'
        rateLimit:
          type: 'integer'
          description: 'Number of messages within rate limit.'
        rateLimitWindow:
          type: 'integer'
          description: 'Waiting time interval before reset rateLimit to 0.'
        rateLimitTimeout:
          type: 'string'
          description: 'The date/time to suppress limitation of sending rate.'
          format: 'date-time'
        displayName:
          type: 'string'
          description: 'Channel name for displaying.'
        messageAutoDeleteEnabled:
          type: 'boolean'
          description: 'Is message in this channel will be deleted when the user flagged until flag limit?'
        autoDeleteMessageByFlagLimit:
          type: 'number'
          description: 'Number of flags that will force a message to be deleted automatically.'
        memberCount:
          type: 'integer'
          description: 'Number of members in channel.'
        messageCount:
          type: 'integer'
          description: 'Number of messages in channel.'
        lastActivity:
          type: 'string'
          description: 'The date/time when a user last did something related to the channel such as add/remove members .'
          format: 'date-time'
        createdAt:
          type: 'string'
          description: 'The date/time when a channel is created.'
          format: 'date-time'
        updatedAt:
          type: 'string'
          description: 'The date/time when a channel is updated.'
          format: 'date-time'
        avatar:
          $ref: './schema/file.yaml#/File'
      required:
        - 'channelId'
        - 'createdAt'
        - 'updatedAt'
    ChannelUser:
      type: 'object'
      properties:
        channelId:
          type: 'string'
        userId:
          type: 'string'
        roles:
          type: 'array'
          items:
            type: 'string'
        readToSegment:
          type: 'integer'
        membership:
          $ref: './schema/message.yaml#ChannelMembership'
        isBanned:
          type: 'boolean'
        isMuted:
          type: 'boolean'
        muteTimeout:
          type: 'string'
          format: 'date-time'
        lastActivity:
          type: 'string'
          format: 'date-time'
        createdAt:
          type: 'string'
          format: 'date-time'
        updatedAt:
          type: 'string'
          format: 'date-time'
      required:
        - 'userId'
        - 'channelId'
        - 'createdAt'
        - 'updatedAt'
    Comment:
      $ref: './schema/comment.yaml#/Comment'
    Community:
      $ref: './schema/community.yaml#/Community'
    CommunityUser:
      $ref: './schema/community.yaml#/CommunityUser'
    CommunityCategory:
      $ref: './schema/community.yaml#/CommunityCategory'
    Message:
      $ref: './schema/message.yaml#/Message'
    Reaction:
      $ref: './schema/reaction.yaml#/Reaction'
    ShortUser:
      $ref: './schema/user.yaml#/ShortUser'
    Network:
      type: 'object'
      properties:
        _id:
          type: 'string'
          description: 'ID of a network.'
        name:
          type: 'string'
          description: 'network name'
        defaultMessageAutoDeleteEnabled:
          type: 'boolean'
          description: 'Is message in this channel will be deleted when the user flagged until flag limit?'
        defaultAutoDeleteMessageByFlagLimit:
          type: 'number'
          min: 1
          example: 1
          description: 'Number of flags that will force a message to be deleted automatically.'
        createdAt:
          type: 'string'
          description: 'The date/time when a network is created.'
          format: 'date-time'
        updatedAt:
          type: 'string'
          description: 'The date/time when a network is created.'
          format: 'date-time'
      required:
        - 'referenceId'
        - 'referenceType'
    BlacklistRule:
      type: 'object'
      properties:
        ruleId:
          type: 'string'
        regex:
          type: 'string'
          description: 'Rule of blacklist.'
        isMatchExactWord:
          type: 'boolean'
        isEnabled:
          type: 'boolean'
          description: 'A flag to enabled a rule.'
        isDeleted:
          type: 'boolean'
          description: 'A flag to deleted a rule.'
        createdAt:
          type: 'string'
          description: 'The date/time when a rule is created.'
          format: 'date-time'
        updatedAt:
          type: 'string'
          description: 'The date/time when a rule is updated or deleted.'
          format: 'date-time'
      required:
        - 'regex'
    WhitelistRule:
      type: 'object'
      properties:
        ruleId:
          type: 'string'
        regex:
          type: 'string'
          description: 'Rule of whitelist.'
        isEnabled:
          type: 'boolean'
          description: 'A flag to enabled a rule.'
        isDeleted:
          type: 'boolean'
          description: 'A flag to deleted a rule.'
        createdAt:
          type: 'string'
          description: 'The date/time when a rule is created.'
          format: 'date-time'
        updatedAt:
          type: 'string'
          description: 'The date/time when a rule is updated or deleted.'
          format: 'date-time'
      required:
        - 'regex'
    Role:
      type: 'object'
      properties:
        permissions:
          type: 'array'
          items:
            type: 'string'
        publicId:
          type: 'string'
      required:
        - 'publicId'
    ModerationSetting:
      type: 'object'
      properties:
        maxRepetition:
          type: 'integer'
        maxRepetitionTimeout:
          type: 'integer'
        blacklistMuteTimeout:
          type: 'integer'
        whitelistMuteTimeout:
          type: 'integer'
        maxRepetitionMuteTimeout:
          type: 'integer'
        enableImageModeration:
          type: 'boolean'
        imageModeration:
          type: 'object'
          properties:
            nudity:
              type: 'number'
            suggestive:
              type: 'number'
            violence:
              type: 'number'
            disturbing:
              type: 'number'
        createdAt:
          type: 'string'
          description: 'The date/time when a rule is created.'
          format: 'date-time'
        updatedAt:
          type: 'string'
          description: 'The date/time when a rule is updated or deleted.'
          format: 'date-time'
    Error:
      type: 'object'
      properties:
        status:
          type: 'string'
        code:
          type: 'string'
        message:
          type: 'string'
    File:
      $ref: './schema/file.yaml#File'
    Follow:
      $ref: './schema/follow.yaml#Follow'
    FollowCount:
      $ref: './schema/follow.yaml#FollowCount'
  securitySchemes:
    ApiKeyAuth:
      type: 'apiKey'
      in: 'header'
      name: 'X-API-Key'
    SocketAuth:
      type: 'apiKey'
      in: 'query'
      name: 'token'
    BearerAuth:
      type: 'http'
      scheme: 'bearer'
  responses:
    SuccessResponse:
      description: 'Success response.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
    IsFlagByMeResponse:
      description: 'Is flag by me response.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  isFlagByMe:
                    type: 'boolean'
    IsPushNotifiableResponse:
      description: 'Is push notifiable response.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  isPushNotifiable:
                    type: 'boolean'
    ChannelResultsResponse:
      description: 'Channels Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  results:
                    type: 'array'
                    items:
                      type: 'object'
                      properties:
                        channel:
                          $ref: './schema/message.yaml#Channel'
                        channelUser:
                          $ref: './schema/message.yaml#ChannelUser'
    ChannelResultResponse:
      description: 'Channel Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  results:
                    type: 'object'
                    properties:
                      channel:
                        $ref: './schema/message.yaml#Channel'
                      channelUser:
                        $ref: './schema/message.yaml#ChannelUser'
    ChannelResponse:
      description: 'Channel response.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              isDistinct:
                type: 'boolean'
              type:
                $ref: './schema/message.yaml#ChannelType'
                description: 'Type of a channel (standard, conversation, broadcast). This property is not be used for now.'
              metadata:
                type: 'object'
                description: 'Additional properties to support custom fields.'
              tags:
                type: 'array'
                description: 'List of tags. They will be used for searching.'
                items:
                  type: 'string'
              isMuted:
                type: 'boolean'
                description: 'Is this channel muted? (Computed by using muteTimeout).'
              lastActivity:
                type: 'string'
                description: 'The date/time when a user last did something related to the channel such as add/remove members .'
                format: 'date-time'
              createdAt:
                type: 'string'
                description: 'The date/time when a channel is created.'
                format: 'date-time'
              updatedAt:
                type: 'string'
                description: 'The date/time when a channel is updated.'
                format: 'date-time'
              isRateLimited:
                type: 'boolean'
                description: 'Is this channel limited sending rate? (Computed by using muteTimeout).'
              rateLimitWindow:
                type: 'integer'
                description: 'Waiting time interval before reset rateLimit to 0.'
              channelId:
                type: 'string'
                description: 'ID of a channel.'
              muteTimeout:
                type: 'string'
                description: 'The date/time to suppress muteness.'
                format: 'date-time'
              rateLimit:
                type: 'integer'
                description: 'Number of messages within rate limit.'
              rateLimitTimeout:
                type: 'string'
                description: 'The date/time to suppress limitation of sending rate.'
                format: 'date-time'
              displayName:
                type: 'string'
                description: 'Channel name for displaying.'
              messageAutoDeleteEnabled:
                type: 'boolean'
                description: 'Is message in this channel will be deleted when the user flagged until flag limit?'
              autoDeleteMessageByFlagLimit:
                type: 'number'
                description: 'Number of flags that will force a message to be deleted automatically.'
              memberCount:
                type: 'integer'
                description: 'Number of members in channel.'
              messageCount:
                type: 'integer'
                description: 'Number of messages in channel.'
              avatar:
                $ref: './schema/file.yaml#/File'
    ChannelUserResponse:
      description: 'Channel User response.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              results:
                type: 'array'
                items:
                  $ref: './schema/message.yaml#ChannelUser'
    UsersResponse:
      description: 'Users Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  results:
                    type: 'array'
                    items:
                      $ref: './schema/user.yaml#User'
    UserResponse:
      description: 'User Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                $ref: './schema/user.yaml#User'
    NetworkResponse:
      description: 'Network information.'
      content:
        application/json:
          schema:
            $ref: './schema/message.yaml#Network'
    BlacklistRulesResponse:
      description: 'rules of blacklist Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  results:
                    type: 'array'
                    items:
                      $ref: './schema/message.yaml#BlacklistRule'
    BlacklistRuleResponse:
      description: 'rule of blacklist Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                $ref: './schema/message.yaml#BlacklistRule'
    WhitelistRulesResponse:
      description: 'rules of whitelist Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  results:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/BlacklistRule'
    WhitelistRuleResponse:
      description: 'rule of whitelist Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                $ref: './schema/message.yaml#BlacklistRule'
    RolesResponse:
      description: 'Roles information.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  moderatonSettings:
                    type: 'array'
                    items:
                      $ref: './schema/message.yaml#ModerationSetting'
                  roles:
                    type: 'array'
                    items:
                      $ref: './schema/message.yaml#Role'
    UserByAdminsResponse:
      description: 'Users information.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                type: 'object'
                properties:
                  users:
                    type: 'array'
                    items:
                      type: 'object'
                      properties:
                        info:
                          type: 'object'
                          properties:
                            publicId:
                              type: 'string'
                            roleIds:
                              type: 'array'
                              items:
                                type: 'string'
                            roles:
                              type: 'array'
                              items:
                                type: 'string'
                            displayName:
                              type: 'string'
                            isGlobalBan:
                              type: 'boolean'
                            metadata:
                              type: 'object'
                            flagCount:
                              type: 'integer'
                  roles:
                    type: 'array'
                    items:
                      $ref: './schema/message.yaml#Role'
    ModerationSettingResponse:
      description: 'Moderation Setting Information'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
              data:
                $ref: './schema/message.yaml#ModerationSetting'
    UnexpectedError:
      description: 'Unexpected error.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 500000
            message: 'Unexpected error'
    NotFoundError:
      description: 'Resource Not Found error.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400400
            message: 'Resource Not Found.'
    BadRequestError:
      description: 'Bad Request error.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400000
            message: 'Bad Request.'
    ChannelNotFoundError:
      description: 'Channel Not Found error.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400400
            message: 'Channel Not Found.'
    PermissionDenidedError:
      description: 'Permission denied.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400301
            message: 'User is not a member of a channel'
    UserIsBannedError:
      description: 'User is banned from a channel / community.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400304
            message: 'User is banned from a channel / community.'
    RateLimitError:
      description: 'Error due to a client create the same request with the same parameters exceed the number of time that server limit to.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400311
            message: 'RateLimit Exceed.'
    UserNotFoundError:
      description: 'User Not Found error.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400400
            message: 'User Not Found.'
    NumberOfFlagExceedError:
      description: 'Error when too many user is already flagged message.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400300
            message: 'Number of flag already exceed.'
    ForbiddenAvatarError:
      description: 'Put file type not image into avatar'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400300
            message: 'Avatar must be an image.'
    UserNotJoinError:
      description: 'User is not join community.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400100
            message: 'User ${userId} is not join this community ${communityId}'
    UserIsUnbannedError:
      description: 'User is unbanned from a channel / community.'
      content:
        application/json:
          schema:
            $ref: './global/error.yaml#Error'
          example:
            status: 'error'
            code: 400316
            message: 'User is unbanned from a channel / community.'
