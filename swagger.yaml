{openapi: 3.0.0, info: {title: Amity Social Cloud SDK, description: "<h2>Using Amity APIs</h2>\n\nOur API documentation explains all API endpoints used in Amity Social Cloud. All APIs, with the exception of some\nauthentication APIs, require an access token for authentication and authorization. APIs can be used either in Admin\nor User context. When used in user context, you will only be able to fetch data related to that user only.\nFor Administrators who are using our API documentation in making server-to-server API calls, you need an Admin\nAccess token to connect to the Amity server. Refer to <a href=\"https://docs.amity.co/console/settings#admin-api-access-token\" target=\"_blank\">this documentation</a>\nfor the instructions on how to generate an admin access token.\n\nAll backend endpoints that support Amity SDK are included here. To easily differentiate the type of each endpoint,\nwe added a prefix in each endpoint's path.\n\n1. Socket Endpoint: /sockets/...\n2. Socket Event: /callbacks/...\n3. REST API Endpoint: /v1/, /v2/, /v3/, or /v4/...\n4. Webhook Event: /webhook/...\n\n<h2>Select Region Endpoint</h2>\n\nBefore making server-to-server API calls, be sure to select the correct API endpoint for your region in\nthe <strong>Servers</strong> dropdown below.\n", version: 4.51.0}, servers: [{url: https://api.us.amity.co, description: API Endpoint for US Region}, {url: https://api.eu.amity.co, description: API Endpoint for EU Region}, {url: https://api.sg.amity.co, description: API Endpoint for SG Region}], paths: {/api/v3/authentication/token: {get: {summary: Get authentication token, tags: [Authentication], parameters: [{name: x-server-key, in: header, required: true, schema: {type: string, maxLength: 150}}, {in: query, name: userId, schema: {type: string, maxLength: 100, require: true}, description: User id to get token for}], responses: {'50000': {description: Put a wrong request parameters., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Parameters error., data: {detail: [The 'data.text' field length must be less than or equal to 20000 characters long.]}}}}}, '200000': {content: {application/json: {schema: {type: string, example: s9qne0wEqVb2e05271177748659f574a4e8ab85e08}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}}}}, /api/v4/authentication/token: {post: {summary: Create authentication token for session creation API, tags: [Authentication], parameters: [{name: x-server-key, in: header, required: true, schema: {type: string}}], description: "Create authentication token for session creation API. Token userId need to match userId when using it\n", requestBody: {content: {application/json: {schema: {type: object, properties: {userId: {type: string, description: User id to assign this token}}}}}}, responses: {'200': {description: Response payload, content: {text/plain: {schema: {type: string, example: s9qne0wEqVb2e05271177748659f574a4e8ab85e08, description: Use this token when create sessions}}}}, '401': {description: Unauthorized. Server key is invalid., content: {text/plain: {schema: {type: string, example: Unauthorized, description: Server key is invalid}}}}, '403': {description: Forbidden. Possibly that secure mode is disabled, content: {application/json: {schema: {type: object, properties: {status: {type: string}, message: {type: string}, code: {type: number}, data: {type: object, description: error detail}}}}}}, '422': {description: Parameters validation error, content: {application/json: {schema: {type: object, properties: {status: {type: string}, message: {type: string}, code: {type: number}, data: {type: object, description: error detail}}}}}}}}}, /api/v3/sessions: {post: {summary: Register a session, tags: [Session], parameters: [{name: x-api-key, in: header, required: true, schema: {type: string}}], description: "Register a session in order to connect to socket endpoint to perform sdk operations.\n", requestBody: {description: "Information about user and devices that he/she use to connect to. If displayName is provide, that user display is updated as well.\n\nIf userId doesn't exists, new user will be created.\n\nauthToken need to pass when network option is set to secure\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, minLength: 1, maxLength: 50}, deviceId: {type: string, minLength: 1, maxLength: 150}, deviceInfo: {type: object, properties: {kind: {type: string, enum: [ios, android, web, node]}, model: {type: string, maxLength: 100}, sdkVersion: {type: string, maxLength: 30}}}, displayName: {type: string, maxLength: 50}, authToken: {type: string, description: Authentication token from /api/v3/authentication/token, minLength: 1, maxLength: 100}}, required: [userId, deviceId]}}}}, responses: {'200000': {description: Session Information, content: {application/json: {schema: {type: object, properties: {accessToken: {type: string}, refreshToken: {type: string}, issuedAt: {type: string}, expiresAt: {type: string}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400100': {description: User is banned from the system., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: User is banned from the system.}}}}, '400312': {description: User is global banned., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400312, message: User is global banned.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, get: {summary: Verify access token, tags: [Session], description: Verify access token. The caller must add accessToken in header., responses: {'200': {description: Access token is valid}, '401': {description: Access token is invalid or expired}, '403': {description: User is global banned}, '404': {description: Not found}, '422': {description: Parameters validation error}}, security: [{bearerAuth: []}]}}, /api/v4/sessions: {post: {summary: Register a session, tags: [Session], parameters: [{name: x-api-key, in: header, required: true, schema: {type: string}}], description: "Register a session in order to connect to socket endpoint to perform sdk operations.\n", requestBody: {description: "Information about user and devices that he/she use to connect to. If displayName is provide, that user display is updated as well.\n\nIf userId doesn't exists, new user will be created.\n\nauthToken need to pass when network option is set to secure\n\naccessToken expiry 30 days\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, minLength: 1, maxLength: 50}, deviceId: {type: string, minLength: 1, maxLength: 150}, deviceInfo: {type: object, properties: {kind: {type: string, enum: [ios, android, web, node]}, model: {type: string, maxLength: 100}, sdkVersion: {type: string, maxLength: 30}}}, displayName: {type: string, maxLength: 50}, authToken: {type: string, description: Authentication token from /api/v3/authentication/token, minLength: 1, maxLength: 100}}, required: [userId, deviceId]}}}}, responses: {'200000': {description: Session Information, content: {application/json: {schema: {type: object, properties: {accessToken: {type: string}, refreshToken: {type: string}, issuedAt: {type: string}, expiresAt: {type: string}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400100': {description: User is banned from the system., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: User is banned from the system.}}}}, '400312': {description: User is global banned., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400312, message: User is global banned.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: Revoke access token, tags: [Session], security: [{BearerAuth: []}], description: Revoke all userId's access token by admin, requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, minLength: 1, maxLength: 50}}}}}}, responses: {'200': {description: Revoke access token success, content: {application/json: {schema: {type: object, properties: {success: {type: boolean, default: true}}}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}, 'UserIdNotFound: 404': {description: UserId Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: userId Not Found.}}}}, 'SessionNotFound: 404': {description: User is global banned}}}}, /v1/device: {post: {summary: Register a device, tags: [Device], parameters: [{name: x-api-key, in: header, required: true, schema: {type: string}}], description: "Register a session in order to connect to socket endpoint to perform sdk operations.\n", requestBody: {description: "Information about user and devices that he/she use to connect to. If displayName is provide, that user display is updated as well.\n\nIf userId doesn't exists, new user will be created.\n\nauthToken need to pass when network option is set to secure\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, minLength: 1, maxLength: 50}, deviceId: {type: string, minLength: 1, maxLength: 150}, deviceInfo: {type: object, properties: {kind: {type: string, enum: [ios, android, web, node]}, model: {type: string, maxLength: 100}, sdkVersion: {type: string, maxLength: 30}}}, displayName: {type: string, maxLength: 50}, authToken: {type: string, description: Authentication token from /api/v3/authentication/token, minLength: 1, maxLength: 100}}, required: [userId, deviceId]}}}}, responses: {'200000': {description: Return accessToken and refreshToken for using in create a connection socketIO, content: {application/json: {schema: {type: object, properties: {accessToken: {type: string}, refreshToken: {type: string}, issuedAt: {type: string}, expiresAt: {type: string}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400100': {description: User is banned from the system., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: User is banned from the system.}}}}, '400312': {description: User is global banned., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400312, message: User is global banned.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /v1/accessToken: {get: {summary: Generate AccessToken., tags: [Device], security: [{ApiKeyAuth: []}], description: "Generate new Access Token.\n", parameters: [{in: query, name: userId, schema: {type: string}, required: true}, {in: query, name: refreshToken, schema: {type: string}, required: true}], responses: {'200000': {description: Return new accessToken, content: {application/json: {schema: {type: object, properties: {accessToken: {type: string}}}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /v1/blacklist/records: {put: {summary: Refresh black list, tags: [Moderation], security: [{ApiKeyAuth: []}], description: "Refresh the black list\n", requestBody: {description: "Regular expression to refresh.\n", required: true, content: {application/json: {schema: {type: object, properties: {regexs: {type: array, items: {type: string}}}, required: [regexs]}}}}}, post: {summary: Add rules to black list, tags: [Moderation], security: [{ApiKeyAuth: []}], description: "Add rules to the black list\n", requestBody: {description: "Regular expression to add.\n", required: true, content: {application/json: {schema: {type: object, properties: {regexs: {type: array, items: {type: string}}}, required: [regexs]}}}}}, delete: {summary: Delete rules from black list, tags: [Moderation], security: [{ApiKeyAuth: []}], description: "Delete rules from the black list\n", requestBody: {description: "Regular expression to delete.\n", required: true, content: {application/json: {schema: {type: object, properties: {ruleIds: {type: array, items: {type: string}}}, required: [regexs]}}}}}}, /admin/v1/token: {post: {summary: Generate admin token., tags: [Admin], security: [{ApiKeyAuth: []}], description: "Generate admin token\n", responses: {'200000': {description: Return admin token and expiry, content: {application/json: {schema: {type: object, properties: {adminToken: {type: string}, issuedAt: {type: string, format: date-time}, expiresAt: {type: string, format: date-time}}}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, get: {summary: Get admin token., tags: [Admin], security: [{ApiKeyAuth: []}], description: "Get admin token\n", responses: {'200000': {description: Return admin token and expiry, content: {application/json: {schema: {type: object, properties: {adminToken: {type: string}, issuedAt: {type: string, format: date-time}, expiresAt: {type: string, format: date-time}}}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: Revoke admin token., tags: [Admin], security: [{ApiKeyAuth: []}], description: "Revoke admin token:\n  * super-admin can revoke any admin token\n  * admin can revoke own token only\n", requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {username: {type: string, minLength: 1, maxLength: 50}}}}}}, responses: {'200000': {description: Revoke success, content: {application/json: {schema: {type: object, properties: {success: {type: boolean}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400400': {description: username Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: username Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /admin/v1/blacklist/records: {get: {summary: get rules of blacklist., tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get rules of blacklist.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}, {name: regexs, in: query, collectionFormat: multi, schema: {type: array, items: {type: string}}}, {name: sortBy, in: query, schema: {type: string, enum: [lastCreated, firstCreated], default: firstCreated}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: rules of blacklist Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {results: {type: array, items: {type: object, properties: {ruleId: {type: string}, regex: {type: string, description: Rule of blacklist.}, isMatchExactWord: {type: boolean}, isEnabled: {type: boolean, description: A flag to enabled a rule.}, isDeleted: {type: boolean, description: A flag to deleted a rule.}, createdAt: {type: string, description: The date/time when a rule is created., format: date-time}, updatedAt: {type: string, description: The date/time when a rule is updated or deleted., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v2/blacklist/records: {get: {summary: get rules of blacklist., tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get rules of blacklist.\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}, {name: regexs, in: query, schema: {type: array, items: {type: string}}}], responses: {'200': {$ref: '#/components/responses/BlacklistRulesResponse'}, '404': {$ref: '#/components/responses/NotFoundError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}, put: {summary: refresh rules of blacklist., tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Refresh rules of blacklist.\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "Rules information to be refreshed.\n", required: true, content: {application/json: {schema: {type: object, properties: {regexs: {type: array, items: {type: string}}}, required: [regexs]}}}}, responses: {'200': {description: OK}, '404': {$ref: '#/components/responses/NotFoundError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}, post: {summary: add rules to blacklist., tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Add rules to blacklist\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "Rules information to be added.\n", required: true, content: {application/json: {schema: {type: object, properties: {regexs: {type: array, items: {type: string}}, isMatchExactWord: {type: boolean}}, required: [regexs]}}}}, responses: {'200': {description: OK}, '404': {$ref: '#/components/responses/NotFoundError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}, delete: {summary: delete rules from blacklist, tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Delete rule from blacklist\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "Rules information to be deleted.\n", required: true, content: {application/json: {schema: {type: object, properties: {ruleIds: {type: array, items: {type: string}}}, required: [ruleIds]}}}}, responses: {'200': {description: OK}, '404': {$ref: '#/components/responses/NotFoundError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}}, /api/v2/blacklist/records/:ruleId: {put: {summary: update rule of blacklist., tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Update rule of blacklist.\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "Rules information to be updated.\n", required: true, content: {application/json: {schema: {type: object, properties: {ruleId: {type: string}, isEnabled: {type: boolean}}, required: [ruleId, isEnabled]}}}}, responses: {'200': {$ref: '#/components/responses/BlacklistRuleResponse'}, '404': {$ref: '#/components/responses/NotFoundError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}}, /api/v2/messages: {post: {summary: Query messages., tags: [Admin], security: [{BearerAuth: []}], consumes: [application/json], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, parentId: {type: string}, filterByParentId: {type: boolean}, tags: {type: array, description: List of including tags. They will be used for searching., items: {type: string}}, excludeTags: {type: array, description: List of excluding tags. They will be used for searching., items: {type: string}}, options: {type: object, properties: {after: {type: number}, first: {type: number}, before: {type: number}, last: {type: number}, token: {type: string}}}}, required: [channelId]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}}}, /api/v2/message: {post: {summary: create a text message., tags: [Admin], security: [{BearerAuth: []}], consumes: [application/json], description: "Create a text message in a given channel.\n", requestBody: {description: "Information of message to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, type: {type: string, value: text}, data: {type: object, properties: {caption: {type: string, maxLength: 1000}}}, tags: {type: array, items: {type: string}}, parentId: {type: string}}, required: [channelId, type, data]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/message/{messageId}': {get: {summary: get a message., tags: [Admin], security: [{BearerAuth: []}], description: "Get a message by ID.\n", parameters: [{name: messageId, in: path, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channel: {type: object, properties: {isDistinct: {type: boolean}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: 'Type of a channel (standard, conversation, broadcast). This property is not be used for now.'}, metadata: {type: object, description: Additional properties to support custom fields.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, channelId: {type: string, description: ID of a channel.}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, avatar: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}, message: {type: object, properties: {messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}}}, user: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: delete a message., tags: [Admin], security: [{BearerAuth: []}], parameters: [{name: messageId, in: path, required: true, schema: {type: string}}], description: "Delete a message in a given channel.\n", responses: {'200000': {description: Success}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v2/messages/images: {post: {summary: create an image message., tags: [Admin], security: [{BearerAuth: []}], consumes: [multipart/form-data], description: "Create a image message in a given channel.\n", requestBody: {description: "Information of message to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, caption: {type: string}, file: {type: object}, tags: {type: array, items: {type: string}}, parentId: {type: string}, fullImage: {type: string}}, required: [channelId, file]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/messages/{messageId}/images': {get: {summary: get an image message, tags: [Admin], security: [{BearerAuth: []}], parameters: [{name: messageId, in: path, required: true, schema: {type: string}}, {name: size, in: query, required: true, schema: {type: string, enum: [small, medium, large, full (if fullImage)]}}], consumes: [application/json], description: "Get a message with image in a given channel.\n", responses: {'200000': {description: An image file}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v2/messages/files: {post: {summary: create a message with file in a given channel, tags: [Admin], security: [{BearerAuth: []}], consumes: [multipart/form-data], description: "Create a message with file in a given channel.\n", requestBody: {description: "information of a message to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, caption: {type: string}, file: {type: object}, tags: {type: array, items: {type: string}}, parentId: {type: string}}, required: [channelId, file]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/messages/{messageId}/files': {get: {summary: get a file message, tags: [Admin], security: [{BearerAuth: []}], parameters: [{name: messageId, in: path, required: true, schema: {type: string}}], consumes: [application/json], description: "Get a message with file in a given channel.\n", responses: {'200000': {description: A file}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v2/moderation-settings: {get: {summary: get a moderation setting, tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}], consumes: [application/json], description: "Get a moderation setting.\n", responses: {'200': {$ref: '#/components/responses/ModerationSettingResponse'}, '400': {$ref: '#/components/responses/BadRequestError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}, put: {summary: update a moderation setting, tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Update a moderation setting\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "moderation setting information\n", required: true, content: {application/json: {schema: {type: object, properties: {maxRepetition: {type: integer, minimum: 0}, maxRepetitionTimeout: {type: integer, minimum: 0}, blacklistMuteTimeout: {type: integer, minimum: 0}, whitelistMuteTimeout: {type: integer, minimum: 0}, maxRepetitionMuteTimeout: {type: integer, minimum: 0}, enableImageModeration: {type: boolean}, imageModeration: {type: object, properties: {nudity: {type: number, minimum: 0}, suggestive: {type: number, minimum: 0}, violence: {type: number, minimum: 0}, disturbing: {type: number, minimum: 0}}}}}}}}, responses: {'200': {content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}}, example: {status: success, code: 200000}}}}}, '400': {$ref: '#/components/responses/BadRequestError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}}, /api/v2/reactions/messages/most: {get: {summary: Get message ids by the most of reactions., tags: [Admin], security: [{BearerAuth: []}], description: "Get message ids by the most of reactions.\n", parameters: [{name: limit, in: query, schema: {type: integer, minimum: 1}}, {name: reactionName, in: query, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: Message information., content: {application/json: {schema: {type: array, items: {type: object, properties: {messageId: {type: string}, reactionsCount: {type: integer}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v2/roles: {get: {summary: get all roles, tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get all roles\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}, {name: filter, in: query, required: true, schema: {type: string}}], responses: {'200': {$ref: '#/components/responses/RolesResponse'}, '400': {$ref: '#/components/responses/BadRequestError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}, put: {summary: add permissions., tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Add permissions\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "Permission information to be added\n", required: true, content: {application/json: {schema: {type: object, properties: {publicIds: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string}}}, required: [publicIds, permissions]}}}}, responses: {'200': {description: OK}, '404': {$ref: '#/components/responses/NotFoundError'}, '429': {$ref: '#/components/responses/RateLimitError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}}, /api/v2/whitelist/records: {get: {summary: get rules of whitelist., tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get rules of whitelist.\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}, {name: regexs, in: query, required: true, schema: {type: array, items: {type: string}}}], responses: {'200': {$ref: '#/components/responses/WhitelistRulesResponse'}, '404': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: refresh rules of whitelist., tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Refresh rules of whitelist.\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "Rules information to be refreshed.\n", required: true, content: {application/json: {schema: {type: object, properties: {regexs: {type: array, items: {type: string}}}, required: [regexs]}}}}, responses: {'200': {description: OK}, '404': {$ref: '#/components/responses/NotFoundError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}, post: {summary: add rules to whitelist., tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Add rules to whitelist\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "Rules information to be added.\n", required: true, content: {application/json: {schema: {type: object, properties: {regexs: {type: array, items: {type: string}}}, required: [regexs]}}}}, responses: {'200': {description: OK}, '404': {$ref: '#/components/responses/NotFoundError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}, delete: {summary: delete rules from whitelist, tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Delete rule from whitelist\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "Rules information to be deleted.\n", required: true, content: {application/json: {schema: {type: object, properties: {ruleIds: {type: array, items: {type: string}}}, required: [ruleIds]}}}}, responses: {'200': {description: OK}, '404': {$ref: '#/components/responses/NotFoundError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}}, /api/v2/whitelist/records/:ruleId: {put: {summary: update rule of whitelist., tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Update rule of whitelist.\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "Rules information to be updated.\n", required: true, content: {application/json: {schema: {type: object, properties: {ruleId: {type: string}, isEnabled: {type: boolean}}, required: [ruleId, isEnabled]}}}}, responses: {'200': {$ref: '#/components/responses/WhitelistRuleResponse'}, '404': {$ref: '#/components/responses/NotFoundError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}}, /api/v3/roles: {get: {summary: Get roles (pagination support), tags: [Admin], security: [{BearerAuth: []}], description: "Get roles (pagination support)\n", parameters: [{name: keyword, in: query, required: true, schema: {type: string, minLength: 0, maxLength: 100}, description: search keyword}, {name: sortBy, in: query, schema: {type: string, enum: [lastCreated, firstCreated, displayName], default: lastCreated}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}], consumes: [application/json], responses: {'200000': {description: Role Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: array, items: {type: object, properties: {roleId: {type: string}, displayName: {type: string}, updatedAt: {type: string, description: The date/time when a role is updated or deleted., format: date-time}, permissions: {type: array, items: {type: string}, description: The list of permission for this role. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions}, isDeleted: {type: boolean, default: false}}, required: [roleId, permissions, updatedAt, isDeleted]}}}}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: Create role, tags: [Admin], security: [{BearerAuth: []}], description: "Create a role\n", consumes: [application/json], requestBody: {description: "information of a role to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {roleId: {type: string, description: role id, minLength: 1, maxLength: 100}, displayName: {type: string, description: display name of role, minLength: 0, maxLength: 100}, permissions: {type: array, items: {type: string}, description: The list of permission for this role. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions}}, required: [roleId, permissions]}}}}, responses: {'200000': {description: Role Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: array, items: {type: object, properties: {roleId: {type: string}, displayName: {type: string}, updatedAt: {type: string, description: The date/time when a role is updated or deleted., format: date-time}, permissions: {type: array, items: {type: string}, description: The list of permission for this role. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions}, isDeleted: {type: boolean, default: false}}, required: [roleId, permissions, updatedAt, isDeleted]}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/roles/{roleId}': {get: {summary: Get role, tags: [Admin], security: [{BearerAuth: []}], description: "Get a role\n", parameters: [{name: roleId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Role Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: array, items: {type: object, properties: {roleId: {type: string}, displayName: {type: string}, updatedAt: {type: string, description: The date/time when a role is updated or deleted., format: date-time}, permissions: {type: array, items: {type: string}, description: The list of permission for this role. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions}, isDeleted: {type: boolean, default: false}}, required: [roleId, permissions, updatedAt, isDeleted]}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: Update role, tags: [Admin], security: [{BearerAuth: []}], description: "Update a role\n", consumes: [application/json], requestBody: {description: "information of a role to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {roleId: {type: string, description: role id to update, minLength: 1, maxLength: 100}, displayName: {type: string, description: display name of role to update, minLength: 0, maxLength: 100}, permissions: {type: array, items: {type: string}, description: The list of permission to update. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions}}, required: [roleId, permissions]}}}}, responses: {'200000': {description: Role Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: array, items: {type: object, properties: {roleId: {type: string}, displayName: {type: string}, updatedAt: {type: string, description: The date/time when a role is updated or deleted., format: date-time}, permissions: {type: array, items: {type: string}, description: The list of permission for this role. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions}, isDeleted: {type: boolean, default: false}}, required: [roleId, permissions, updatedAt, isDeleted]}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: Delete role, tags: [Admin], security: [{BearerAuth: []}], description: "Delete a role\n", consumes: [application/json], requestBody: {description: "information of a role to be delete.\n", required: true, content: {application/json: {schema: {type: object, properties: {roleId: {type: string, description: role id to delete, minLength: 1, maxLength: 100}}, required: [roleId]}}}}, responses: {'200000': {description: Role Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: array, items: {type: object, properties: {roleId: {type: string}, displayName: {type: string}, updatedAt: {type: string, description: The date/time when a role is updated or deleted., format: date-time}, permissions: {type: array, items: {type: string}, description: The list of permission for this role. https://github.com/EkoCommunications/UpstraEngineeringGitbook/blob/feature/roles/specification/roles.md#permissions}, isDeleted: {type: boolean, default: false}}, required: [roleId, permissions, updatedAt, isDeleted]}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /admin/v1/reports/user-last-activity: {get: {summary: Download last activity user report.., tags: [Admin], parameters: [{name: Cookie, in: cookie, schema: {type: string}, description: Alternative way to pass authorization token}], description: "Download last activity user report.\n", responses: {'200000': {description: Get file for download file, content: {text/csv: {schema: {type: string}}}}}}}, /api/v2/users: {get: {summary: query users, tags: [User], security: [{BearerAuth: []}], description: "Query users\n", parameters: [{name: search, in: query, schema: {type: string}}, {name: filter, in: query, schema: {type: string, enum: [all, flagged], default: all}}, {name: pageToken, in: query, schema: {type: string}}, {name: limit, in: query, schema: {type: integer}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: Users Information, content: {application/json: {schema: {properties: {users: {type: array, items: {type: object, properties: {info: {type: object, properties: {_id: {type: string}, publicId: {type: string}, displayName: {type: string}, metadata: {type: object}, roleIds: {type: array, items: {type: string}}, isGlobalBan: {type: boolean}, roles: {type: array, items: {type: string}}, flagCount: {type: number}}}, session: {type: object}}}}, roles: {type: array, items: {type: object, properties: {_id: {type: string}, publicId: {type: string}, networkId: {type: string}, permissions: {type: array, items: {type: string}}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: Update user information., tags: [User], security: [{BearerAuth: []}], description: "Update user information such as displayName, roles and metadata\n", consumes: [application/x-www-form-urlencoded], requestBody: {description: "User information to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 50}, displayName: {type: string, maxLength: 100}, roles: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, metadata: {type: object, maxLength: 500}}}}}}, responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v2/users/ban: {post: {summary: ban a user., tags: [User], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Ban a user\n", consumes: [applicationjson], requestBody: {description: "User information to be baned\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string}}, required: [userId]}}}}, responses: {'200000': {description: OK}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v2/users/unban: {post: {summary: unban a user., tags: [User], security: [{BearerAuth: []}], description: "Unban a user\n", consumes: [application/x-www-form-urlencoded], requestBody: {description: "User information to be unbaned\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string}}, required: [userId]}}}}, responses: {'200000': {description: OK}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/users/{userId}/flags': {delete: {summary: clear flag a user., tags: [User], security: [{BearerAuth: []}], description: "Clear flag a user\n", parameters: [{name: userId, in: path, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/user.query: {post: {summary: query users, tags: [User], security: [{SocketAuth: []}], description: "Query users\n", requestBody: {description: "Query parameters\n", required: true, content: {application/json: {schema: {type: object, properties: {search: {type: string}, sortBy: {type: string, enum: [lastCreated, firstCreated, displayName], default: displayName}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string}}}}}}}}, responses: {'200000': {description: Users Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {results: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/user.get: {post: {summary: get users informations base on given userIds, tags: [User], security: [{SocketAuth: []}], description: "Get users informations\n", requestBody: {description: request userIds, required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, items: {type: string}}}, required: [userIds]}}}}, responses: {'200000': {description: Users Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/user.flag: {post: {summary: Flag a user., tags: [User], security: [{SocketAuth: []}], description: "Flag a user. If a user who flag already flagged target user, flag count will not increase\n", requestBody: {description: "userId to be flagged\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string}}, required: [userId]}}}}, responses: {'200000': {description: User Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, '400300': {description: Error when too many user is already flagged message., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Number of flag already exceed.}}}}, '400400': {description: User Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: User Not Found.}}}}}}}, /sockets/user.unflag: {post: {summary: Unflag a user., tags: [User], security: [{SocketAuth: []}], description: "unFlag a user.\n", requestBody: {description: "userId to be flagged\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string}}, required: [userId]}}}}, responses: {'200000': {description: User Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, '400400': {description: User Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: User Not Found.}}}}}}}, /sockets/user.isFlagByMe: {post: {summary: Check whether user flag a given user., tags: [User], security: [{SocketAuth: []}], description: "Check whether a user flag a given user.\n", requestBody: {description: "userId to be flagged\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string}}, required: [userId]}}}}, responses: {'200000': {description: Is flag by me response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {isFlagByMe: {type: boolean}}}}}}}}, '400400': {description: User Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: User Not Found.}}}}}}}, /sockets/user.update: {post: {summary: Update user information., tags: [User], security: [{SocketAuth: []}], description: "Update user information such as displayName, roles and metadata\n", requestBody: {description: "User information to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 50}, displayName: {type: string, maxLength: 100}, roles: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, metadata: {type: object, maxLength: 500}}}}}}, responses: {'200000': {description: User Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /callbacks/user.didUpdate: {get: {tags: [User], security: [{SocketAuth: []}], description: "Publish this event following endpoint below:\n  * `update user`\n  * `update user(v3)`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {userId: {type: string, description: ID of a user.}}}}}}}}}, /callbacks/v3.user.didUpdate: {get: {tags: [User], security: [{SocketAuth: []}], description: "Publish this event following endpoint below:\n  * `update user`\n  * `update user(v3)`\n", responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /api/v3/users: {get: {summary: Get users information, tags: [UserV3], security: [{BearerAuth: []}], description: "Get users information (pagination supported)\n", parameters: [{name: keyword, in: query, schema: {type: string, maxLength: 100}}, {name: filter, in: query, schema: {type: string, enum: [all, flagged], default: all}}, {name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated, displayName], default: displayName}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}], consumes: [application/json], responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: Update user information., tags: [UserV3], security: [{BearerAuth: []}], description: "Update user information such as displayName, roles, avatar and metadata\n", consumes: [application/json], requestBody: {description: "User information to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 50}, displayName: {type: string, maxLength: 100}, roles: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, metadata: {type: object, maxLength: 500}, avatarFileId: {type: string, maxLength: 50}, avatarCustomUrl: {type: string, maxLength: 1000}, description: {type: string, maxLength: 500}}}}}}, responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/users/list: {get: {summary: Get users information by public id., tags: [UserV3], security: [{BearerAuth: []}], description: "Get users information by public id.\n", parameters: [{name: userIds, in: query, collectionFormat: multi, schema: {type: array, maxItems: 100, items: {type: string, maxLength: 900}}}], consumes: [application/json], responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/users/{userId}': {get: {summary: Get one user information., tags: [UserV3], security: [{BearerAuth: []}], description: "Get one user information.\n", parameters: [{name: userId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}, {name: type, in: query, schema: {type: string, enum: [public, internal], default: public}}], consumes: [application/json], responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/users/{userId}/isFlagByMe': {get: {summary: Check whether user flag a given user., tags: [UserV3], description: "Check whether user flag a given user.\n", security: [{BearerAuth: []}], parameters: [{name: userId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], responses: {'200000': {description: Is flag by me response., content: {application/json: {schema: {type: object, properties: {isFlagByMe: {type: boolean}}}}}}, '400400': {description: User Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: User Not Found.}}}}}}}, /sockets/v3/user.query: {post: {summary: Get users information, tags: [UserV3], security: [{SocketAuth: []}], description: "Get users information (pagination supported)\n", requestBody: {description: "Request body\n", required: true, content: {application/json: {schema: {type: object, properties: {keyword: {type: string, maxLength: 100}, filter: {type: string, enum: [all, flagged], default: all}, sortBy: {type: string, enum: [lastCreated, firstCreated, displayName], default: displayName}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, minLength: 1, maxLength: 100}}}}}}}}, responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400100': {description: User is not join community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: Only administrator can update user information.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/user.getList: {post: {summary: Get users information by public id., tags: [UserV3], security: [{SocketAuth: []}], description: "Get users information by public id.\n", requestBody: {description: "Request body\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {require: true, type: array, maxItems: 100, items: {type: string, minLength: 1, maxLength: 900}}}}}}}, responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400100': {description: User is not join community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: Only administrator can update user information.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/user.get: {post: {summary: Get one user information., tags: [UserV3], security: [{SocketAuth: []}], description: "Get one user information.\n", requestBody: {description: "Request body\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, require: true, minLength: 1, maxLength: 900}}}}}}, responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400100': {description: User is not join community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: Only administrator can update user information.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/user.update: {post: {summary: Update user information., tags: [UserV3], security: [{SocketAuth: []}], description: "Update user information such as displayName, roles, avatar and metadata\n", requestBody: {description: "User information to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 50}, displayName: {type: string, maxLength: 100}, roles: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, metadata: {type: object, maxLength: 500}, avatarFileId: {type: string, maxLength: 50}, avatarCustomUrl: {type: string, maxLength: 1000}, description: {type: string, maxLength: 500}}}}}}, responses: {'200000': {description: User Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400100': {description: User is not join community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: Only administrator can update user information.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v2/channels: {post: {summary: query channels, tags: [Channel], security: [{BearerAuth: []}], description: "Query channels\n", consumes: [application/json], requestBody: {description: "Query parameters\n", required: true, content: {application/json: {schema: {type: object, properties: {filter: {type: string, enum: [all, member, notMember]}, types: {type: array, items: {type: string, enum: [standard, private, conversation, broadcast, live, community]}}, tags: {type: array, items: {type: string}}, excludeTags: {type: array, items: {type: string}}, userId: {type: string}, options: {type: object, properties: {skip: {type: integer}, limit: {type: integer}, token: {type: string}}}}}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {results: {type: array, items: {type: object, properties: {channel: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}, channelUser: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, readToSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v2/channel: {post: {summary: create a channel, tags: [Channel], security: [{BearerAuth: []}], description: "Create a channel\n", consumes: [application/json], requestBody: {description: "Information of channel to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, displayName: {type: string}, type: {type: string, enum: [standard]}, metadata: {type: object}, tags: {type: array, items: {type: string}}, userIds: {type: array, items: {type: string}}, avatarFileId: {type: string}}, required: [channelId, type]}}}}, responses: {'200000': {description: Channel Information, content: {application/json: {schema: {properties: {channel: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}, channelUser: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, readToSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/channel/{channelId}/displayName': {post: {summary: change channel displayName, tags: [Channel], security: [{BearerAuth: []}], description: "Change a channel's displayName\n", parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of channel to be changed\n", required: true, content: {application/json: {schema: {type: object, properties: {displayName: {type: string}}, required: [displayName]}}}}, responses: {'200000': {description: Channel Information, content: {application/json: {schema: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/channel/{channelId}/users/ban': {post: {summary: ban users in channel, tags: [Channel], security: [{BearerAuth: []}], description: "Ban users in channel\n", parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "channelId and userIds\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds]}}}}, responses: {'200000': {description: OK}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/channel/{channelId}/users/unban': {post: {summary: unban users in channel, tags: [Channel], security: [{BearerAuth: []}], description: "Unban users in channel\n", parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "channelId and userIds\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds]}}}}, responses: {'200000': {description: OK}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400316': {description: User is unbanned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400316, message: User is unbanned from a channel / community.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/channels/{channelId}/close': {post: {summary: close channel, tags: [Channel], security: [{BearerAuth: []}], description: "Close channel\n", parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: OK}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/channel/{channelId}/avatar': {put: {summary: Set or Remove avatar from channel, tags: [Channel], security: [{BearerAuth: []}], description: "Set or Remove avatar from channel. Put null inside avatarFileId to remove avatar.\n", parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of channel to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {avatarFileId: {type: string}}, required: [avatarFileId]}}}}, responses: {'200000': {description: Channel Information, content: {application/json: {schema: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Given file id is not found., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: 'File not found ${fileId}.'}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/channel/{channelId}/mute': {put: {summary: Mute all users in channel for a specific period of time., tags: [Channel], security: [{BearerAuth: []}], description: "Mute all users in channel for a specific period of time.\n", parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of channel to be muted and period\n", required: true, content: {application/json: {schema: {type: object, properties: {mutePeriod: {type: number, description: mute period (milliseconds)}}, required: [mutePeriod]}}}}, responses: {'200000': {description: Mute/unmute information, content: {application/json: {schema: {type: object, properties: {success: {type: boolean}}}, example: {success: true}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v2/channel/{channelId}/users/mute': {put: {summary: Mute a user in channel for a specific period of time., tags: [Channel], security: [{BearerAuth: []}], description: "Mute a user in channel for a specific period of time.\n", parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of channel to be muted and period\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, items: {type: string, maxLength: 50}, maxItems: 100}, mutePeriod: {type: number, description: mute period (milliseconds)}}, required: [userIds, mutePeriod]}}}}, responses: {'200000': {description: Mute/unmute information, content: {application/json: {schema: {type: object, properties: {success: {type: boolean}}}, example: {success: true}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/channels: {get: {summary: query channels., tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: keyword, in: query, schema: {type: string, maxLength: 100}}, {name: isDeleted, in: query, schema: {type: boolean, default: null}, description: "isDeleted:\n  * `null(default)` - Show both channel is actived and channel is inactived.\n  * `true` - Show channel is inactived only.\n  * `false` - Show channel is actived only.\n"}, {name: tags, in: query, collectionFormat: multi, schema: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}}, {name: excludeTags, in: query, collectionFormat: multi, schema: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}}, {name: filter, in: query, schema: {type: string, enum: [all, member, notMember, flagged], default: all}}, {name: types, in: query, collectionFormat: multi, schema: {type: array, maxItems: 10, items: {type: string, enum: [standard, private, conversation, broadcast, live, community]}}}, {name: userId, in: query, schema: {type: string, maxLength: 100}}, {name: sortBy, in: query, schema: {type: string, enum: [lastActivity, lastCreated, firstCreated, displayName], default: lastActivity}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 100}}}}], consumes: [application/json], responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: create a channel, tags: [Channel], security: [{BearerAuth: []}], consumes: [application/json], requestBody: {description: "Information of channel to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, maxLength: 100}, type: {type: string, enum: [community, live, broadcast], default: community}, displayName: {type: string, maxLength: 100}, avatarFileId: {type: string, maxLength: 50}, metadata: {type: object}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, userIds: {type: array, maxItems: 1000, items: {type: string, maxLength: 50}}, isMuted: {type: boolean}, messageAutoDeleteEnabled: {type: boolean}, autoDeleteMessageByFlagLimit: {type: number, min: 1, max: 100}}}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/channels/{channelId}': {get: {summary: get a channel by ID., tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: update a channel, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of channel to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {displayName: {type: string, maxLength: 100}, avatarFileId: {type: string, maxLength: 50}, metadata: {type: object}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, messageAutoDeleteEnabled: {type: boolean}, autoDeleteMessageByFlagLimit: {type: number, min: 1, max: 100}}}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: delete a channel, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/channels/{channelId}/join': {post: {summary: join a channel, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/channels/{channelId}/leave': {delete: {summary: leave a channel, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/channels/{channelId}/users': {get: {summary: query channel users, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}, {name: roles, in: query, collectionFormat: multi, schema: {type: array, minItems: 1, maxItems: 20, items: {type: string, minLength: 1, maxLength: 900}}, description: Role to filter}, {name: filter, in: query, schema: {type: string, enum: [all, muted, banned, member&banned], default: all}}, {name: sortBy, in: query, schema: {type: string, enum: [lastCreated, firstCreated], default: lastCreated}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 100}}}}], consumes: [application/json], responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: add channel users, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of channel\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: remove channel users, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of channel\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/channels/{channelId}/users/ban': {put: {summary: ban channel users, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of channel\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/channels/{channelId}/users/unban': {put: {summary: unban channel users, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of channel\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/channels/{channelId}/users/roles': {post: {summary: Add role to channel users, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {role: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds, role]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: Remove role from channel users, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {role: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds, role]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/channels/conversation: {post: {summary: create a conversation channel, tags: [Channel], security: [{BearerAuth: []}], consumes: [application/json], requestBody: {description: "Information of conversation channel to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, maxItems: 10, items: {type: string, maxLength: 50}}, isDistinct: {type: boolean, default: true}, displayName: {type: string, maxLength: 100}, avatarFileId: {type: string, maxLength: 50}, metadata: {type: object}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}}, required: [userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/channels/list: {get: {summary: get list of channel, tags: [Channel], security: [{BearerAuth: []}], description: "Get list of channel\n", parameters: [{name: channelIds, in: query, collectionFormat: multi, required: true, schema: {type: array, maxItems: 10, items: {type: string, maxLength: 50}}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/channels/{channelId}/seen': {post: {summary: Mark user message read position inside channel, tags: [Channel], security: [{BearerAuth: []}], description: "Mark user message read position inside channel\n", parameters: [{name: channelId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Segment of the message\n", required: true, content: {application/json: {schema: {type: object, properties: {readToSegment: {type: number}}, required: [readToSegment]}}}}, responses: {'200000': {description: OK}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v4/channels/{channelId}/users': {get: {summary: query channel users, tags: [Channel], security: [{BearerAuth: []}], parameters: [{name: channelId, in: query, required: true, schema: {type: string, minLength: 1, maxLength: 900}}, {name: role, in: query, schema: {type: array, description: Role to filter, minItems: 1, maxItems: 20, items: {type: string, minLength: 1, maxLength: 900}}}, {name: sortBy, in: query, schema: {type: string, enum: [lastCreated, firstCreated], default: lastCreated}}, {name: memberships, in: query, schema: {type: array, description: "Member type to filter - member type: User is member of channel - banned type: User is banned member of channel - muted type: User is member of channel but isMuted is true\n", minItems: 1, maxItems: 3, items: {type: string, enum: [muted, banned, member]}, default: [member]}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}, description: use updatedAt when sort by first/lastUpdated}, {name: search, in: query, schema: {type: string, minLength: 0, maxLength: 10000}}], consumes: [application/json], responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.create: {post: {summary: create a channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Create a channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, displayName: {type: string}, type: {type: string, enum: [standard, private]}, metadata: {type: object}, tags: {type: array, items: {type: string}}, userIds: {type: array, items: {type: string}}, avatarFileId: {type: string}}, required: [channelId, type]}}}}, responses: {'200000': {description: Channel Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channel: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}, channelUser: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, readToSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Given file id is not found., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: 'File not found ${fileId}.'}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.createConversation: {post: {summary: create a conversation channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Create a conversation channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {displayName: {type: string}, metadata: {type: object}, tags: {type: array, items: {type: string}}, userId: {type: string}}, required: [userId]}}}}, responses: {'200000': {description: Channel Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channel: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}, channelUser: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, readToSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.query: {post: {summary: query channel, tags: [Channel], security: [{SocketAuth: []}], description: "Query channels\n", requestBody: {description: "Query parameters\n", required: true, content: {application/json: {schema: {type: object, properties: {filter: {type: string, enum: [all, member, notMember]}, tags: {type: array, items: {type: string}}, excludeTags: {type: array, items: {type: string}}, types: {type: array, items: {type: string, enum: [standard, private, conversation, broadcast]}}, options: {type: object, properties: {skip: {type: integer}, limit: {type: integer}, token: {type: string}}}}}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {results: {type: array, items: {type: object, properties: {channel: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}, channelUser: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, readToSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.queryUsers: {post: {summary: query channel users, tags: [Channel], security: [{SocketAuth: []}], description: "Query channel users\n", requestBody: {description: "Query parameters\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, role: {type: string}, filter: {type: string, enum: [all, muted, banned], default: all}, options: {type: object, properties: {skip: {type: integer}, limit: {type: integer}, token: {type: string}}}}}}}}, responses: {'200000': {description: Channel Users Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {results: {type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, readToSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.setAvatar: {post: {summary: Set or Remove avatar from channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Set or Remove avatar from channel. Put null inside avatarFileId to remove avatar.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, avatarFileId: {type: string}}, required: [channelId, avatarFileId]}}}}, responses: {'200000': {description: Channel Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400400': {description: Given file id is not found., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: 'File not found ${fileId}.'}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.banUsers: {post: {summary: ban users in channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Ban users in channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "channelId and userIds\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, userIds: {type: array, items: {type: string}}}, required: [channelId, userIds]}}}}, responses: {'200000': {description: OK}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.unbanUsers: {post: {summary: unban users in channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Unban users in channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "channelId and userIds\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, userIds: {type: array, items: {type: string}}}, required: [channelId, userIds]}}}}, responses: {'200000': {description: OK}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400316': {description: User is unbanned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400316, message: User is unbanned from a channel / community.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.addRole: {post: {summary: add user role in channel, tags: [Channel], security: [{SocketAuth: []}], description: "Add user role in channel\n", requestBody: {description: "channelId, role and userIds\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, role: {type: string}, userIds: {type: array, items: {type: string}}}, required: [channelId, userIds, role]}}}}, responses: {'200000': {description: OK}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.removeRole: {post: {summary: remove user role in channel, tags: [Channel], security: [{SocketAuth: []}], description: "Remove user role in channel\n", requestBody: {description: "channelId, role and userIds\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, role: {type: string}, userIds: {type: array, items: {type: string}}}, required: [channelId, userIds, role]}}}}, responses: {'200000': {description: OK}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.markSeen: {post: {summary: mark user message read position inside channel, tags: [Channel], security: [{SocketAuth: []}], description: "Mark user message read position inside channel\n", requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, readToSegment: {type: number}}, required: [channelId, readToSegment]}}}}, responses: {'200000': {description: OK}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.startReading: {post: {summary: User start reading message inside channel, tags: [Channel], security: [{SocketAuth: []}], description: "User start reading message inside channel\n", requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}}, required: [channelId]}}}}, responses: {'200000': {description: OK}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.stopReading: {post: {summary: User stop reading message inside channel, tags: [Channel], security: [{SocketAuth: []}], description: "User stop reading message inside channel\n", requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}}, required: [channelId]}}}}, responses: {'200000': {description: OK}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.startReadings: {post: {summary: Unknown, tags: [Channel], security: [{SocketAuth: []}], description: "Mark start reading in multiple channel ???\n", requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {channelIds: {type: array, items: {type: string}}}, required: [channelIds]}}}}, responses: {'200000': {description: For start/stop readings, content: {application/json: {schema: {properties: {result: {type: array, items: {type: object, properties: {channelIds: {type: string}, status: {type: string}, message: {type: string, description: Error message}, code: {type: string, description: Error code}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/channel.stopReadings: {post: {summary: Unknown, tags: [Channel], security: [{SocketAuth: []}], description: "Mark stop reading in multiple channel ???\n", requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {channelIds: {type: array, items: {type: string}}}, required: [channelIds]}}}}, responses: {'200000': {description: For start/stop readings, content: {application/json: {schema: {properties: {result: {type: array, items: {type: object, properties: {channelIds: {type: string}, status: {type: string}, message: {type: string, description: Error message}, code: {type: string, description: Error code}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.create: {post: {summary: create a channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Create a channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, maxLength: 100}, type: {type: string, enum: [community, live, broadcast], default: community}, displayName: {type: string, maxLength: 100}, avatarFileId: {type: string, maxLength: 50}, metadata: {type: object}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, userIds: {type: array, maxItems: 1000, items: {type: string, maxLength: 50}}}}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.createConversation: {post: {summary: create a conversation channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Create a conversation channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of conversation channel to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, maxItems: 10, items: {type: string, maxLength: 50}}, isDistinct: {type: boolean, default: true}, displayName: {type: string, maxLength: 100}, avatarFileId: {type: string, maxLength: 50}, metadata: {type: object}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}}, required: [userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.delete: {post: {summary: delete a channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Delete a channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "channel information.\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, maxLength: 100}}, required: [channelId]}}}}, responses: {'200000': {content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.get: {post: {summary: get a channel by ID., tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get a channel by ID\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a channel.\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, maxLength: 100}}, required: [channelId]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.query: {post: {summary: query channels., tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "query channels.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {keyword: {type: string, maxLength: 100}, isDeleted: {type: boolean, default: null, description: "isDeleted:\n  * `null(default)` - Show both channel is actived and channel is inactived.\n  * `true` - Show channel is inactived only.\n  * `false` - Show channel is actived only.\n"}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, excludeTags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, filter: {type: string, enum: [all, member, notMember], default: all}, types: {type: array, items: {type: string, enum: [standard, private, conversation, broadcast, live, community]}}, sortBy: {type: string, enum: [lastActivity, lastCreated, firstCreated, displayName], default: lastActivity}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 100}}}}}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.update: {post: {summary: update a channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Update a channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, maxLength: 100}, displayName: {type: string, maxLength: 100}, avatarFileId: {type: string, maxLength: 50}, metadata: {type: object}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}}, required: [channelId]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.getList: {post: {summary: get list of channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get list of channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a channel.\n", required: true, content: {application/json: {schema: {type: object, properties: {channelIds: {type: array, maxItems: 100, items: {type: string, maxLength: 50}}}, required: [channelIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.join: {post: {summary: join a channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Join a channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel to be joined\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, minLength: 1, maxLength: 900}}, required: [channelId]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.leave: {post: {summary: leave a channel, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Leave a channel\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel to be left\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, minLength: 1, maxLength: 900}}, required: [channelId]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.addUsers: {post: {summary: add channel users, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Add channel users\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [channelId, userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.removeUsers: {post: {summary: remove channel users, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Remove channel users\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [channelId, userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.banUsers: {post: {summary: ban channel users, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Ban channel users\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [channelId, userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.unbanUsers: {post: {summary: unban channel users, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Unban channel users\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [channelId, userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.queryUsers: {post: {summary: query channel users, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Query channel users\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, minLength: 1, maxLength: 900}, roles: {type: array, description: Role to filter, minItems: 1, maxItems: 20, items: {type: string, minLength: 1, maxLength: 900}}, filter: {type: string, enum: [all, muted, banned], default: all}, sortBy: {type: string, enum: [lastCreated, firstCreated], default: lastCreated}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}, required: [channelId]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.assignRoleToUsers: {post: {summary: Add role to channel users, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Add role to channel users\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, minLength: 1, maxLength: 900}, role: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [channelId, role, userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/channel.removeRoleFromUsers: {post: {summary: Remove role from channel users, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Remove role from channel users\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, minLength: 1, maxLength: 900}, role: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [channelId, role, userIds]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/channel.queryUsers: {post: {summary: query channel users, tags: [Channel], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Query channel users\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Information of channel\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, minLength: 1, maxLength: 900}, roles: {type: array, description: Role to filter, minItems: 1, maxItems: 20, items: {type: string, minLength: 1, maxLength: 900}}, memberships: {type: array, description: "Member type to filter - member type: User is member of channel - banned type: User is banned member of channel - muted type: User is member of channel but isMuted is true\n", minItems: 1, maxItems: 3, items: {type: string, enum: [muted, banned, member]}, default: [member]}, sortBy: {type: string, enum: [lastCreated, firstCreated], default: lastCreated}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}, search: {type: string, maxLength: 10000}}, required: [channelId]}}}}, responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /callbacks/channel.didUpdate: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `update channel displayname`\n  * `update channel tags`\n  * `update channel metadata`\n  * `update channel avatar`\n  * `update channel(v3)`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, channel: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}}}}}}}}}, /callbacks/channel.didAddUsers: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `add channel users`\n  * `add channel users(v3)`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, userIds: {ype: array, description: List of user Id., items: {type: string}}, memberCount: {type: integer, description: Number of members in channel.}, userId: {type: string, description: caller Id.}}}}}}}}}, /callbacks/channel.didRemoveUsers: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `remove channel users`\n  * `remove channel users(v3)`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, userIds: {ype: array, description: List of user Id., items: {type: string}}, memberCount: {type: integer, description: Number of members in channel.}, userId: {type: string, description: caller Id.}}}}}}}}}, /callbacks/channel.didBan: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ and __target userIds__ after call the endpoint below:\n  * `ban channel users`\n  * `ban channel users(v3)`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, userIds: {ype: array, description: List of userId., items: {type: string}}}}}}}}}}, /callbacks/channel.didUnban: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ and __target users__ after call the endpoint below:\n  * `unban channel users`\n  * `unban channel users(v3)`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, userIds: {ype: array, description: List of userId., items: {type: string}}}}}}}}}}, /callbacks/channel.didCreate: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `create channel`\n  * `create conversation channel`\n  * `create channel(v3)`\n  * `create conversation channel(v3)`\n  * `add channel users`\n  * `add channel users(v3)`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, userIds: {ype: array, description: List of userId., items: {type: string}}, memberCount: {type: integer, description: Number of members in channel.}, channel: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}}}}}}}}}, /callbacks/channel.didJoin: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __target users__ after call the endpoint below:\n  * `join channel`\n  * `join channel(v3)`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, userIds: {ype: array, description: List of userId., items: {type: string}}, memberCount: {type: integer, description: Number of members in channel.}, channel: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object}}}}}}}}}}}, /callbacks/channel.didLeave: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __target users__  after call the endpoint below:\n  * `leave channel`\n  * `leave channel(v3)`\n  * `remove channel users`\n  * `remove channel users(v3)`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, userIds: {ype: array, description: List of userId., items: {type: string}}, memberCount: {type: integer, description: Number of members in channel.}}}}}}}}}, /callbacks/channel.didMarkSeen: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __caller__  after call the endpoint below:\n  * `startReading`\n  * `startReadings`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, readToSegment: {type: integer}}}}}}}}}, /callbacks/channelUser.didUpdate: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __target users__  after call the endpoint below:\n  * `add channelUser role`\n  * `remove channelUser role`\n  * `add channelUser role(v3)`\n  * `remove channelUser role(v3)`\n", responses: {'200000': {content: {application/json: {schema: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, userIds: {ype: array, description: List of user Id., items: {type: string}}}}}}}}}}, /callbacks/v3.channel.didUpdate: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `update channel displayname`\n  * `update channel tags`\n  * `update channel metadata`\n  * `update channel avatar`\n  * `update channel(v3)`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.channel.didDelete: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `delete channel(v3)`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.channel.didAddUsers: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `add channel users`\n  * `add channel users(v3)`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.channel.didRemoveUsers: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `remove channel users`\n  * `remove channel users(v3)`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.channel.didBan: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ and __target userIds__ after call the endpoint below:\n  * `ban channel users`\n  * `ban channel users(v3)`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.channel.didUnban: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ and __target users__ after call the endpoint below:\n  * `unban channel users`\n  * `unban channel users(v3)`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.channel.didCreate: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `create channel`\n  * `create conversation channel`\n  * `create channel(v3)`\n  * `create conversation channel(v3)`\n  * `add channel users`\n  * `add channel users(v3)`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.channel.didJoin: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __target users__ after call the endpoint below:\n  * `join channel`\n  * `join channel(v3)`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.channel.didLeave: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __target users__  after call the endpoint below:\n  * `leave channel`\n  * `leave channel(v3)`\n  * `remove channel users`\n  * `remove channel users(v3)`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.channel.didMarkSeen: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __caller__  after call the endpoint below:\n  * `startReading`\n  * `startReadings`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.channelUser.didUpdate: {get: {tags: [Channel], security: [{SocketAuth: []}], description: "Publish this event to __target users__  after call the endpoint below:\n  * `add channelUser role`\n  * `remove channelUser role`\n  * `add channelUser role(v3)`\n  * `remove channelUser role(v3)`\n", responses: {'200000': {description: Channels Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: 'List of users in channel with membership and role. Normally, it will return only caller as user. However, it will return all users in conversation channel. For ban/unban events, it will return banned users.', type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /api/v1/messages/images: {post: {summary: create a message with image in a given channel, tags: [Message], security: [{ApiKeyAuth: []}], description: "Create a message with image in a given channel.\n", requestBody: {description: "information of a message to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string}, channelId: {type: string}, caption: {type: string}, file: {type: object}, tags: {type: array, items: {type: string}}, parentId: {type: string}, fullImage: {type: string}}, required: [channelId, file]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400302': {description: User is muted from the channel., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400302, message: User is muted from the channel.}}}}, '400303': {description: Channel is muted., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400303, message: Channel is muted.}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400307': {description: User create too many same messages in short period of times., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400307, message: Max Repetition Exceed}}}}, '400308': {description: Banned word are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400308, message: Data contain blacklist word}}}}, '400309': {description: Unallowed link are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400309, message: Data contain link that is not in whitelist}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v1/messages/{messageId}/images': {get: {summary: get an image message, tags: [Message], security: [{ApiKeyAuth: []}], parameters: [{name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}, {in: path, name: messageId, required: true, schema: {type: string}}, {name: size, in: query, schema: {type: string, enum: [small, medium, large, full]}}], description: "Get a message with image in a given channel.\n", responses: {'200000': {description: An image file}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400302': {description: User is muted from the channel., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400302, message: User is muted from the channel.}}}}, '400303': {description: Channel is muted., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400303, message: Channel is muted.}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400307': {description: User create too many same messages in short period of times., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400307, message: Max Repetition Exceed}}}}, '400308': {description: Banned word are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400308, message: Data contain blacklist word}}}}, '400309': {description: Unallowed link are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400309, message: Data contain link that is not in whitelist}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v1/messages/files: {post: {summary: create a message with file in a given channel, tags: [Message], security: [{ApiKeyAuth: []}], description: "Create a message with file in a given channel.\n", requestBody: {description: "information of a message to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string}, channelId: {type: string}, caption: {type: string}, file: {type: object}, tags: {type: array, items: {type: string}}, parentId: {type: string}}, required: [channelId, file]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400302': {description: User is muted from the channel., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400302, message: User is muted from the channel.}}}}, '400303': {description: Channel is muted., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400303, message: Channel is muted.}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400307': {description: User create too many same messages in short period of times., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400307, message: Max Repetition Exceed}}}}, '400308': {description: Banned word are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400308, message: Data contain blacklist word}}}}, '400309': {description: Unallowed link are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400309, message: Data contain link that is not in whitelist}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v1/messages/{messageId}/files': {get: {summary: get an image message, tags: [Message], security: [{ApiKeyAuth: []}], parameters: [{name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}, {in: path, name: messageId, required: true, schema: {type: string}}, {name: size, in: query, schema: {type: string, enum: [small, medium, large, full]}}], description: "Get a message with image in a given channel.\n", responses: {'200000': {description: An image file}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400302': {description: User is muted from the channel., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400302, message: User is muted from the channel.}}}}, '400303': {description: Channel is muted., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400303, message: Channel is muted.}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400307': {description: User create too many same messages in short period of times., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400307, message: Max Repetition Exceed}}}}, '400308': {description: Banned word are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400308, message: Data contain blacklist word}}}}, '400309': {description: Unallowed link are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400309, message: Data contain link that is not in whitelist}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/messages: {get: {summary: query messages, tags: [Message], security: [{BearerAuth: []}], parameters: [{name: channelId, required: true, in: query, schema: {type: string, maxLength: 100}}, {name: type, in: query, schema: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}}, {name: parentId, in: query, schema: {type: string, maxLength: 150}}, {name: filterByParentId, in: query, schema: {type: boolean, default: false}}, {name: hasFlag, in: query, schema: {type: boolean}}, {name: isDeleted, in: query, schema: {type: boolean, default: null}, description: "isDeleted:\n  * `null(default)` - Show both message is actived and message is inactived.\n  * `true` - Show message is inactived only.\n  * `false` - Show message is actived only.\n"}, {name: tags, in: query, collectionFormat: multi, schema: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}}, {name: excludeTags, in: query, collectionFormat: multi, schema: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {after: {type: integer, minimum: 1}, first: {type: integer, minimum: 1, maximum: 100}, before: {type: integer, minimum: 1}, last: {type: integer, minimum: 1, maximum: 100}, token: {type: string, maxLength: 1000}}}}], consumes: [application/json], responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: create a message, tags: [Message], security: [{BearerAuth: []}], consumes: [application/json], requestBody: {description: "Information of message to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, maxLength: 150}, messageId: {type: string, maxLength: 150}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap], default: text}, data: {type: object, properties: {text: {type: string, maxLength: 20000}}}, fileId: {type: string, maxLength: 50}, parentId: {type: string, maxLength: 150}, metadata: {type: object}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., maxItems: 2, items: {type: object, properties: {type: {type: string, description: "type:\n  * `user` - need to specific userIds and notification mentions individual user\n  * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}, maxItems: 30}}, required: [type]}}}, required: [channelId]}}}}, responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400302': {description: User is muted from the channel., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400302, message: User is muted from the channel.}}}}, '400303': {description: Channel is muted., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400303, message: Channel is muted.}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400307': {description: User create too many same messages in short period of times., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400307, message: Max Repetition Exceed}}}}, '400308': {description: Banned word are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400308, message: Data contain blacklist word}}}}, '400309': {description: Unallowed link are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400309, message: Data contain link that is not in whitelist}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Put a wrong request parameters., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Parameters error., data: {detail: [The 'data.text' field length must be less than or equal to 20000 characters long.]}}}}}}}}, /api/v3/messages/list: {get: {summary: get list of messages, tags: [Message], security: [{BearerAuth: []}], parameters: [{name: messageIds, in: query, required: true, collectionFormat: multi, schema: {type: array, maxItems: 10, items: {type: string, maxLength: 150}}}], consumes: [application/json], responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/messages/{messageId}': {get: {summary: get a message, tags: [Message], security: [{BearerAuth: []}], parameters: [{name: messageId, in: path, required: true, schema: {type: string, maxLength: 150}}], consumes: [application/json], responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: update a message, tags: [Message], security: [{BearerAuth: []}], parameters: [{name: messageId, in: path, required: true, schema: {type: string, maxLength: 150}}], consumes: [application/json], requestBody: {description: "Information of message to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {data: {type: object, properties: {text: {type: string, maxLength: 20000}}}, metadata: {type: object}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., maxItems: 2, items: {type: object, properties: {type: {type: string, description: "type:\n  * `user` - need to specific userIds and notification mentions individual user\n  * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}, maxItems: 30}}, required: [type]}}}}}}}, responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400307': {description: User create too many same messages in short period of times., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400307, message: Max Repetition Exceed}}}}, '400308': {description: Banned word are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400308, message: Data contain blacklist word}}}}, '400309': {description: Unallowed link are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400309, message: Data contain link that is not in whitelist}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Put a wrong request parameters., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Parameters error., data: {detail: [The 'data.text' field length must be less than or equal to 20000 characters long.]}}}}}}}, delete: {summary: delete a message, tags: [Message], security: [{BearerAuth: []}], parameters: [{name: messageId, in: path, required: true, schema: {type: string, maxLength: 150}}], consumes: [application/json], responses: {'200000': {content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/messages/:messageId/flag: {post: {summary: flag a message, tags: [Message], security: [{BearerAuth: []}], parameters: [{name: messageId, in: path, required: true, schema: {type: string, maxLength: 150}}], consumes: [application/json], responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/messages/:messageId/unflag: {delete: {summary: unflag a message, tags: [Message], security: [{BearerAuth: []}], parameters: [{name: messageId, in: path, required: true, schema: {type: string, maxLength: 150}}], consumes: [application/json], responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/messages/:messageId/clearFlags: {delete: {summary: clear flags, tags: [Message], security: [{BearerAuth: []}], parameters: [{name: messageId, in: path, required: true, schema: {type: string, maxLength: 150}}], consumes: [application/json], responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/messages/{messageId}/isFlaggedByMe': {get: {summary: is message flag by me, tags: [Message], security: [{BearerAuth: []}], parameters: [{name: messageId, in: path, required: true, schema: {type: string, maxLength: 150}}], consumes: [application/json], responses: {'200000': {description: Is flag by me response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {result: {type: boolean}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/message.create: {post: {summary: create a message in a given channel, tags: [Message], security: [{SocketAuth: []}], description: "Create a message in a given channel.\n", requestBody: {description: "information of a message to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string}, channelId: {type: string}, type: {type: string}, data: {type: object}, tags: {type: array, items: {type: string}}, parentId: {type: string}}, required: [channelId, type, data]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400302': {description: User is muted from the channel., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400302, message: User is muted from the channel.}}}}, '400303': {description: Channel is muted., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400303, message: Channel is muted.}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400307': {description: User create too many same messages in short period of times., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400307, message: Max Repetition Exceed}}}}, '400308': {description: Banned word are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400308, message: Data contain blacklist word}}}}, '400309': {description: Unallowed link are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400309, message: Data contain link that is not in whitelist}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/message.update: {post: {summary: update a message information (only creator), tags: [Message], security: [{SocketAuth: []}], description: "Update a message. Now we support updating tags & content by creator only.\n", requestBody: {description: "information of a message to be updated.\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string}, data: {type: object}, tags: {type: array, items: {type: string}}}, required: [messageId]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/message.updateData: {post: {summary: update a message data (only creator), tags: [Message], security: [{SocketAuth: []}], description: "Update a message data (only creator).\n", requestBody: {description: "information of a message data.\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string}, data: {type: object}}, required: [messageId]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/message.updateTag: {post: {summary: update a message tag by anyone, tags: [Message], security: [{SocketAuth: []}], description: "Update a message tag by anyone.\n", requestBody: {description: "information of a message tags.\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string}, tags: {type: array, items: {type: string}}}, required: [messageId]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/message.flag: {post: {summary: Flag a message., tags: [Message], security: [{SocketAuth: []}], description: "Flag a message. If a user already flagged the message, flag count will not increase\n", requestBody: {description: "messageId to be flagged\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string}}, required: [messageId]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400300': {description: Error when too many user is already flagged message., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Number of flag already exceed.}}}}, '400400': {description: Message Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Message Not Found.}}}}}}}, /sockets/message.get: {get: {summary: Get messages., tags: [Message], security: [{SocketAuth: []}], description: "Get messages by ids.\n", requestBody: {description: "condition for get\n", required: true, content: {application/json: {schema: {type: object, properties: {messageIds: {type: array, description: List of message ids., items: {type: string}}}, required: [messageIds]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}}}, /sockets/message.unflag: {post: {summary: Unflag a message, tags: [Message], security: [{SocketAuth: []}], description: "unflag a message.\n", requestBody: {description: "messageId to be flagged\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string}}, required: [messageId]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400400': {description: Message Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Message Not Found.}}}}}}}, /sockets/message.query: {post: {summary: Query messages., tags: [Message], security: [{SocketAuth: []}], description: "Query messages by a given condition.\n", requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string}, parentId: {type: string}, filterByParentId: {type: boolean}, tags: {type: array, description: List of including tags. They will be used for searching., items: {type: string}}, excludeTags: {type: array, description: List of excluding tags. They will be used for searching., items: {type: string}}, options: {type: object, properties: {after: {type: number}, first: {type: number}, before: {type: number}, last: {type: number}, token: {type: string}}}}, required: [channelId]}}}}, responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}}}, /sockets/message.isFlagByMe: {post: {summary: Check whether user flag a given message., tags: [Message], security: [{SocketAuth: []}], description: "Check whether user flag a given message.\n", requestBody: {description: "messageId to be flagged\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string}}, required: [messageId]}}}}, responses: {'200000': {description: Is flag by me response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {isFlagByMe: {type: boolean}}}}}}}}, '400400': {description: Message Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Message Not Found.}}}}}}}, /sockets/v3/message.query: {post: {summary: query messages, tags: [Message], security: [{SocketAuth: []}], description: "Query messages\n", requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, maxLength: 150}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, parentId: {type: string, maxLength: 150}, filterByParentId: {type: boolean, default: false}, isDeleted: {type: boolean, default: null, description: "isDeleted:\n  * `null(default)` - Show both message is actived and message is inactived.\n  * `true` - Show message is inactived only.\n  * `false` - Show message is actived only.\n"}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, excludeTags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, options: {type: object, properties: {after: {type: integer, minimum: 1}, first: {type: integer, minimum: 1, maximum: 100}, before: {type: integer, minimum: 1}, last: {type: integer, minimum: 1, maximum: 100}, token: {type: string, maxLength: 1000}}}}, required: [channelId]}}}}, responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/message.create: {post: {summary: create a message, tags: [Message], security: [{SocketAuth: []}], description: "Create a message\n", requestBody: {description: "Information of message to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {channelId: {type: string, maxLength: 150}, messageId: {type: string, maxLength: 150}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap], default: text}, data: {type: object, properties: {text: {type: string, maxLength: 20000}}}, fileId: {type: string, maxLength: 50}, parentId: {type: string, maxLength: 150}, metadata: {type: object}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., maxItems: 2, items: {type: object, properties: {type: {type: string, description: "type:\n  * `user` - need to specific userIds and notification mentions individual user\n  * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}, maxItems: 30}}, required: [type]}}}, required: [channelId]}}}}, responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400302': {description: User is muted from the channel., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400302, message: User is muted from the channel.}}}}, '400303': {description: Channel is muted., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400303, message: Channel is muted.}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400307': {description: User create too many same messages in short period of times., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400307, message: Max Repetition Exceed}}}}, '400308': {description: Banned word are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400308, message: Data contain blacklist word}}}}, '400309': {description: Unallowed link are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400309, message: Data contain link that is not in whitelist}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Put a wrong request parameters., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Parameters error., data: {detail: [The 'data.text' field length must be less than or equal to 20000 characters long.]}}}}}}}}, /sockets/v3/message.getList: {post: {summary: get list of messages, tags: [Message], security: [{SocketAuth: []}], description: "Get list of messages\n", requestBody: {description: "Information of message\n", required: true, content: {application/json: {schema: {type: object, properties: {messageIds: {type: array, maxItems: 10, items: {type: string, maxLength: 150}}}, required: [messageIds]}}}}, responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/message.get: {post: {summary: get a message, tags: [Message], security: [{SocketAuth: []}], description: "Get a message\n", requestBody: {description: "Information of message\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string, maxLength: 150}}, required: [messageId]}}}}, responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/message.update: {post: {summary: update a message, tags: [Message], security: [{SocketAuth: []}], description: "Update a message\n", requestBody: {description: "Information of message to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string, maxLength: 150}, data: {type: object, properties: {text: {type: string, maxLength: 20000}}}, metadata: {type: object}, tags: {type: array, maxItems: 10, items: {type: string, maxLength: 100}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., maxItems: 2, items: {type: object, properties: {type: {type: string, description: "type:\n  * `user` - need to specific userIds and notification mentions individual user\n  * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}, maxItems: 30}}, required: [type]}}}, required: [messageId]}}}}, responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400307': {description: User create too many same messages in short period of times., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400307, message: Max Repetition Exceed}}}}, '400308': {description: Banned word are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400308, message: Data contain blacklist word}}}}, '400309': {description: Unallowed link are found in the messages., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400309, message: Data contain link that is not in whitelist}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Put a wrong request parameters., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Parameters error., data: {detail: [The 'data.text' field length must be less than or equal to 20000 characters long.]}}}}}}}}, /sockets/v3/message.delete: {post: {summary: delete a message, tags: [Message], security: [{SocketAuth: []}], description: "Delete a message\n", requestBody: {description: "Information of message\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string, maxLength: 150}}, required: [messageId]}}}}, responses: {'200000': {content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/message.flag: {post: {summary: flag a message, tags: [Message], security: [{SocketAuth: []}], description: "Flag a message\n", requestBody: {description: "Information of message\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string, maxLength: 150}}, required: [messageId]}}}}, responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/message.unflag: {post: {summary: unflag a message, tags: [Message], security: [{SocketAuth: []}], description: "Unflag a message\n", requestBody: {description: "Information of message\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string, maxLength: 150}}, required: [messageId]}}}}, responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/message.clearFlags: {post: {summary: clear flags, tags: [Message], security: [{SocketAuth: []}], description: "Clear flags\n", requestBody: {description: "Information of message\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string, maxLength: 150}}, required: [messageId]}}}}, responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/message.isFlaggedByMe: {post: {summary: is message flag by me, tags: [Message], security: [{SocketAuth: []}], description: "Is message flag by me\n", requestBody: {description: "Information of message\n", required: true, content: {application/json: {schema: {type: object, properties: {messageId: {type: string, maxLength: 150}}, required: [messageId]}}}}, responses: {'200000': {description: Is flag by me response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {result: {type: boolean}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /callbacks/message.didCreate: {get: {tags: [Message], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `create message`\n  * `create message(v3)`\n", responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}, /callbacks/message.didUpdate: {get: {tags: [Message], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `update message`\n  * `update data of message`\n  * `update tags of message`\n  * `update message(v3)`\n  * `flag message`\n  * `flag message(v3)`\n  * `unflag message`\n  * `unflag message(v3)`\n  * `clear flags(v3)`\n  * `add reaction`\n  * `remove reaction`\n", responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}, /callbacks/message.didDelete: {get: {tags: [Message], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ and __target users__ after call the endpoint below:\n  * `delete message`\n  * `delete message(v3)`\n", responses: {'200000': {description: Message information., content: {application/json: {schema: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}, /callbacks/v3.message.didCreate: {get: {tags: [Message], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `create message`\n  * `create message(v3)`\n", responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.message.didUpdate: {get: {tags: [Message], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ after call the endpoint below:\n  * `update message`\n  * `update data of message`\n  * `update tags of message`\n  * `update message(v3)`\n  * `flag message`\n  * `flag message(v3)`\n  * `unflag message`\n  * `unflag message(v3)`\n  * `clear flags(v3)`\n  * `add reaction`\n  * `remove reaction`\n", responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/v3.message.didDelete: {get: {tags: [Message], security: [{SocketAuth: []}], description: "Publish this event to __every member of channel__ and __target users__ after call the endpoint below:\n  * `delete message`\n  * `delete message(v3)`\n", responses: {'200000': {description: Messages Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /v1/notification: {post: {summary: register a device to get push notification, tags: [Notification], security: [{ApiKeyAuth: []}], description: "Register a device to a notification service provider.\n", requestBody: {description: "information of a device to be registered.\n", required: true, content: {application/json: {schema: {type: object, properties: {deviceId: {type: string, maxLength: 150}, platform: {type: string, enum: [android, ios]}, token: {type: string, maxLength: 1000}, userId: {type: string}, provider: {type: string}}, required: [deviceId, platform, token, userId]}}}}, responses: {'200': {$ref: '#/components/responses/SuccessResponse'}, '400': {$ref: '#/components/responses/BadRequestError'}, '404': {$ref: '#/components/responses/NotFoundError'}}}, delete: {summary: unregister a device from a notification service provider, tags: [Notification], security: [{ApiKeyAuth: []}], description: "Unregister a device from a notification service provider.\n", requestBody: {description: "information of a device to be registered.\n", required: true, content: {application/json: {schema: {type: object, properties: {deviceId: {type: string}, userId: {type: string}}, required: [deviceId]}}}}, responses: {'200': {$ref: '#/components/responses/SuccessResponse'}, '400': {$ref: '#/components/responses/BadRequestError'}}}}, /admin/v1/notification/setting: {post: {summary: Save push notification setting., tags: [Notification], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Save push notification setting.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Notification setting information to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {level: {type: string, enum: [network, user, channel, community], description: "level:\n  * `network` - need to specific network events via notifiableEvents(this level need to have permission).\n  * `user` - need to specific modules via notifiableEvents.\n  * `channel` - need to specific channelId.\n  * `community` - need to specific communityId and community event via notifiableEvents.\n"}, isPushNotifiable: {type: boolean}, channelId: {type: string, minLength: 1, maxLength: 900}, communityId: {type: string, minLength: 1, maxLength: 900}, notifiableEvents: {type: array, minItems: 1, maxItems: 24, items: {type: object, properties: {name: {type: string, enum: [channel.created, channel.joined, conversation-channel.joined, message.created, text-mention-message.created, conversation-message.created, post.created, post.reacted, post.approved, post.need-reviewing, comment.created, comment.replied, comment.reacted, follow.created, follow.requested, follow.accepted, text-mention-post.created, text-mention-user-feed-post.created, text-mention-comment.created, text-mention-user-feed-comment.created, text-mention-comment.replied, text-mention-user-feed-comment.replied, community.roleAdded, community.updated]}, moduleName: {type: string, enum: [chat, video-streaming, social]}, isPushNotifiable: {type: boolean}, titleTemplate: {type: string, maxLength: 1000}, bodyTemplate: {type: string, maxLength: 5000}, listenFromRoleIds: {type: array, maxItems: 10, items: {type: string, minLength: 1, maxLength: 900}, description: specific roles for get notify by event creator who has roles only}, ignoreFromRoleIds: {type: array, maxItems: 10, items: {type: string, minLength: 1, maxLength: 900}, description: specific roles for ignore notify by event creator who has roles only}}}}}, required: [level]}}}}, responses: {'200000': {description: save information, content: {application/json: {schema: {type: object, properties: {status: {type: string}}}, example: {status: success}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, get: {summary: Get push notification setting., tags: [Notification], security: [{ApiKeyAuth: []}], description: "Get push notification setting.\n", parameters: [{name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}, {name: level, required: true, in: query, schema: {type: string, enum: [network, user, channel, community]}}, {name: channelId, in: query, schema: {type: string, minLength: 1, maxLength: 900}}, {name: communityId, in: query, schema: {type: string, minLength: 1, maxLength: 900}}], consumes: [application/json], responses: {'200000': {description: Notification Setting Information, content: {application/json: {schema: {type: object, properties: {isPushNotifiable: {type: boolean, description: on/off notification}, isUserEnabled: {type: boolean, description: enable/disable notification from user level(for community level)}, notifiableEvents: {type: array, items: {type: object, properties: {name: {type: string, enum: [channel.created, channel.joined, conversation-channel.joined, message.created, conversation-message.created, post.created, post.reacted, comment.created, comment.replied, comment.reacted]}, moduleName: {type: string, enum: [chat, video-streaming, social]}, eventName: {type: string}, isPushNotifiable: {type: boolean, description: on/off notification of event}, parameters: {type: array, items: {type: string}, description: place holders}, titleTemplate: {type: string, description: title of template}, bodyTemplate: {type: string, description: body of template}, listenFromRoleIds: {type: array, items: {type: string}, description: specific roles for get notify by event creator who has roles only}, ignoreFromRoleIds: {type: array, items: {type: string}, description: specific roles for ignore notify by event creator who has roles only}, isNetworkEnabled: {type: boolean, description: enable/disable notification from network level(for community level)}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/notification/setting: {get: {summary: Get push notification setting., tags: [Notification], security: [{BearerAuth: []}], description: "Get push notification setting.\n", parameters: [{name: level, required: true, in: query, schema: {type: string, enum: [user, channel, community]}}, {name: channelId, in: query, schema: {type: string, minLength: 1, maxLength: 900}}, {name: communityId, in: query, schema: {type: string, minLength: 1, maxLength: 900}}], consumes: [application/json], responses: {'200000': {description: Notification Setting Information, content: {application/json: {schema: {type: object, properties: {isPushNotifiable: {type: boolean, description: on/off notification}, isUserEnabled: {type: boolean, description: enable/disable notification from user level(for community level)}, notifiableEvents: {type: array, items: {type: object, properties: {name: {type: string, enum: [channel.created, channel.joined, conversation-channel.joined, message.created, conversation-message.created, post.created, post.reacted, comment.created, comment.replied, comment.reacted]}, moduleName: {type: string, enum: [chat, video-streaming, social]}, eventName: {type: string}, isPushNotifiable: {type: boolean, description: on/off notification of event}, parameters: {type: array, items: {type: string}, description: place holders}, titleTemplate: {type: string, description: title of template}, bodyTemplate: {type: string, description: body of template}, listenFromRoleIds: {type: array, items: {type: string}, description: specific roles for get notify by event creator who has roles only}, ignoreFromRoleIds: {type: array, items: {type: string}, description: specific roles for ignore notify by event creator who has roles only}, isNetworkEnabled: {type: boolean, description: enable/disable notification from network level(for community level)}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: Save push notification setting., tags: [Notification], security: [{BearerAuth: []}], description: "Save push notification setting.\n", consumes: [application/json], requestBody: {description: "Notification setting information to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {level: {type: string, enum: [user, channel, community], description: "level:\n  * `user` - need to specific modules via notifiableEvents.\n  * `channel` - need to specific channelId.\n  * `community` - need to specific communityId and community event via notifiableEvents.\n"}, isPushNotifiable: {type: boolean}, channelId: {type: string, minLength: 1, maxLength: 900}, communityId: {type: string, minLength: 1, maxLength: 900}, notifiableEvents: {type: array, minItems: 1, maxItems: 7, items: {type: object, properties: {name: {type: string, enum: [post.created, post.reacted, post.approved, post.need-reviewing, comment.created, comment.replied, comment.reacted]}, moduleName: {type: string, enum: [chat, video-streaming, social]}, isPushNotifiable: {type: boolean}, titleTemplate: {type: string, maxLength: 1000}, bodyTemplate: {type: string, maxLength: 5000}, listenFromRoleIds: {type: array, maxItems: 10, items: {type: string, minLength: 1, maxLength: 900}, description: specific roles for get notify by event creator who has roles only}, ignoreFromRoleIds: {type: array, maxItems: 10, items: {type: string, minLength: 1, maxLength: 900}, description: specific roles for ignore notify by event creator who has roles only}}}}}, required: [level]}}}}, responses: {'200000': {description: save information, content: {application/json: {schema: {type: object, properties: {status: {type: string}}}, example: {status: success}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/notification.getSetting: {post: {summary: Get push notification setting., tags: [Notification], security: [{SocketAuth: []}], description: "Get push notification setting.\n", requestBody: {description: "information of a notification setting.\n", required: true, content: {application/json: {schema: {type: object, properties: {level: {type: string, enum: [network, user, channel, community]}, channelId: {type: string, minLength: 1, maxLength: 900}, communityId: {type: string, minLength: 1, maxLength: 900}}, required: [level]}}}}, responses: {'200000': {description: Notification Setting Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {isPushNotifiable: {type: boolean, description: on/off notification}, isUserEnabled: {type: boolean, description: enable/disable notification from user level(for community level)}, notifiableEvents: {type: array, items: {type: object, properties: {name: {type: string, enum: [channel.created, channel.joined, conversation-channel.joined, message.created, conversation-message.created, post.created, post.reacted, comment.created, comment.replied, comment.reacted]}, moduleName: {type: string, enum: [chat, video-streaming, social]}, eventName: {type: string}, isPushNotifiable: {type: boolean, description: on/off notification of event}, parameters: {type: array, items: {type: string}, description: place holders}, titleTemplate: {type: string, description: title of template}, bodyTemplate: {type: string, description: body of template}, listenFromRoleIds: {type: array, items: {type: string}, description: specific roles for get notify by event creator who has roles only}, ignoreFromRoleIds: {type: array, items: {type: string}, description: specific roles for ignore notify by event creator who has roles only}, isNetworkEnabled: {type: boolean, description: enable/disable notification from network level(for community level)}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/notification.saveSetting: {post: {summary: Save push notification setting., tags: [Notification], security: [{SocketAuth: []}], description: "Save push notification setting.\n", requestBody: {description: "Notification setting information to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {level: {type: string, enum: [network, user, channel, community], description: "level:\n  * `network` - need to specific network events via notifiableEvents(this level need to have permission).\n  * `user` - need to specific modules via notifiableEvents.\n  * `channel` - need to specific channelId.\n  * `community` - need to specific communityId and community event via notifiableEvents.\n"}, isPushNotifiable: {type: boolean}, channelId: {type: string, minLength: 1, maxLength: 900}, communityId: {type: string, minLength: 1, maxLength: 900}, notifiableEvents: {type: array, minItems: 1, maxItems: 14, items: {type: object, properties: {name: {type: string, enum: [channel.created, channel.joined, conversation-channel.joined, message.created, conversation-message.created, post.created, post.reacted, comment.created, comment.replied, comment.reacted, follow.created, follow.requested, follow.accepted]}, moduleName: {type: string, enum: [chat, video-streaming, social]}, isPushNotifiable: {type: boolean}, titleTemplate: {type: string, maxLength: 1000}, bodyTemplate: {type: string, maxLength: 5000}, listenFromRoleIds: {type: array, maxItems: 10, items: {type: string, minLength: 1, maxLength: 900}, description: specific roles for get notify by event creator who has roles only}, ignoreFromRoleIds: {type: array, maxItems: 10, items: {type: string, minLength: 1, maxLength: 900}, description: specific roles for ignore notify by event creator who has roles only}}}}}, required: [level]}}}}, responses: {'200000': {description: save information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {status: {type: string}}}}}, example: {status: success, data: {status: success}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v2/reactions: {get: {summary: get list of reactions., tags: [Reaction], security: [{BearerAuth: []}], description: "Get paginable list of reactions.\n", parameters: [{name: referenceId, in: query, require: true, schema: {type: string, maxLength: 900}}, {name: referenceType, in: query, require: true, schema: {type: string, enum: [message, post, comment]}}, {name: reactionName, in: query, schema: {type: string, maxLength: 100}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 0}, token: {type: string, maxLength: 1000}, skip: {type: integer, minimum: 0}}}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: Reaction information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {reactions: {type: array, items: {type: object, properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactors: {type: array, description: List of mapping between reaction and reactor ID., items: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}, required: [referenceId, referenceType]}}, users: {type: array, items: {type: object, properties: {userId: {type: string}, displayName: {type: string}, metadata: {type: object}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: add reaction to any document., tags: [Reaction], security: [{BearerAuth: []}], description: "Add reaction to a document referenced by ID and type.\n", consumes: [application/x-www-form-urlencoded], requestBody: {description: "reference ID and type with reaction name\n", required: true, content: {application/json: {schema: {type: object, properties: {referenceId: {type: string, maxLength: 900}, referenceType: {type: string, enum: [message, post, comment]}, reactionName: {type: string, maxLength: 100}, referenceVersion: {description: 'The API version of the document (Ex. If using with message v5, the referenceVersion will be 5)', type: integer}}, required: [referenceId, referenceType, reactionName]}}}}, responses: {'200000': {description: Returns a reaction id is added, content: {application/json: {schema: {type: object, properties: {addedId: {type: string}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: remove reaction from any document., tags: [Reaction], security: [{BearerAuth: []}], description: "Remove reaction from a document referenced by ID and type.\n", consumes: [application/json], requestBody: {description: "reference ID and type with reaction name\n", required: true, content: {application/json: {schema: {type: object, properties: {referenceId: {type: string, maxLength: 900}, referenceType: {type: string, enum: [message, post, comment]}, reactionName: {type: string, maxLength: 100}, referenceVersion: {description: 'The API version of the document (Ex. If using with message v5, the referenceVersion will be 5)', type: integer}}, required: [referenceId, referenceType, reactionName]}}}}, responses: {'200000': {description: Returns a reaction id is removed, content: {application/json: {schema: {type: object, properties: {removedId: {type: string}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/reactions: {get: {summary: get list of reactions., tags: [Reaction], security: [{BearerAuth: []}], description: "Get paginable list of reactions.\n", parameters: [{name: referenceId, in: query, require: true, schema: {type: string, maxLength: 900}}, {name: referenceType, in: query, require: true, schema: {type: string, enum: [message, post, comment]}}, {name: referenceVersion, in: query, schema: {type: integer}}, {name: reactionName, in: query, schema: {type: string, maxLength: 100}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 0}, token: {type: string, maxLength: 200}}}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: Reaction information., content: {application/json: {schema: {type: object, properties: {reactions: {type: array, items: {type: object, properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactors: {type: array, description: List of mapping between reaction and reactor ID., items: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}, required: [referenceId, referenceType]}}, users: {type: array, items: {type: object, properties: {userId: {type: string}, displayName: {type: string}, metadata: {type: object}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/reaction.query: {post: {summary: get list of reactions., tags: [Reaction], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get paginable list of reactions.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {referenceId: {type: string, maxLength: 900}, referenceType: {type: string, enum: [message, post, comment]}, reactionName: {type: string, maxLength: 100}, options: {type: object, properties: {limit: {type: integer, minimum: 1, default: 20}, token: {type: string, maxLength: 200}}}}, required: [referenceType, referenceId]}}}}, responses: {'200000': {description: Reaction information., content: {application/json: {schema: {type: object, properties: {reactions: {type: array, items: {type: object, properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactors: {type: array, description: List of mapping between reaction and reactor ID., items: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}, required: [referenceId, referenceType]}}, users: {type: array, items: {type: object, properties: {userId: {type: string}, displayName: {type: string}, metadata: {type: object}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/reaction.add: {post: {summary: Add reaction to any document., tags: [Reaction], security: [{SocketAuth: []}], description: "Add reaction to a document referenced by ID and type.\n", requestBody: {description: "reference ID and type with reaction name\n", required: true, content: {application/json: {schema: {type: object, properties: {referenceId: {type: string, maxLength: 900}, referenceType: {type: string, enum: [message, post, comment]}, reactionName: {type: string, maxLength: 100}}, required: [referenceId, referenceType, reactionName]}}}}, responses: {'200000': {description: Returns a bool that indicates if the reaction is added, schema: {type: boolean}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}}}}, /sockets/reaction.query: {post: {summary: Get list of reactions., tags: [Reaction], security: [{SocketAuth: []}], description: "Get paginable list of reactions.\n", requestBody: {description: "Condition of querying including specified reaction and pagination.\n", required: true, content: {application/json: {schema: {type: object, properties: {referenceId: {type: string, maxLength: 900}, referenceType: {type: string, enum: [message, post, comment]}, reactionName: {type: string, maxLength: 100}, options: {type: object, properties: {skip: {type: integer, minimum: 0}, limit: {type: integer, minimum: 0}, token: {type: string, maxLength: 1000}}}}, required: [referenceId, referenceType]}}}}, responses: {'200000': {description: Reaction information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {reactions: {type: array, items: {type: object, properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactors: {type: array, description: List of mapping between reaction and reactor ID., items: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}, required: [referenceId, referenceType]}}, users: {type: array, items: {type: object, properties: {userId: {type: string}, displayName: {type: string}, metadata: {type: object}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}}}}, /sockets/reaction.remove: {post: {summary: Remove reaction from any document., tags: [Reaction], security: [{SocketAuth: []}], description: "Remove reaction from a document referenced by ID and type.\n", requestBody: {description: "reference ID and type with reaction name\n", required: true, content: {application/json: {schema: {type: object, properties: {referenceId: {type: string, maxLength: 900}, referenceType: {type: string, enum: [message, post, comment]}, reactionName: {type: string, maxLength: 100}}, required: [referenceId, referenceType, reactionName]}}}}, responses: {'200000': {description: Returns a bool that indicates if the reaction is removed, schema: {type: boolean}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}}}}, '/admin/v1/network/{networkId}': {get: {summary: Get a network, tags: [Network], security: [{ApiKeyAuth: []}], description: "Get a network.\n", parameters: [{name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}, {name: networkId, in: path, required: true, schema: {type: string}}], responses: {'200': {$ref: '#/components/responses/NetworkResponse'}, '404': {$ref: '#/components/responses/NotFoundError'}}}, put: {summary: Save network, tags: [Network], security: [{ApiKeyAuth: []}], description: "save network information\n", parameters: [{name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}, {name: networkId, in: path, required: true, schema: {type: string}}], requestBody: {description: "data for save network\n", required: true, content: {application/json: {schema: {type: object, properties: {defaultMessageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, defaultAutoDeleteMessageByFlagLimit: {type: number, minimum: 1, example: 1, description: Number of flags that will force a message to be deleted automatically.}, useSecureAuthentication: {type: boolean, description: Is this network require secure authentication implementation.}}, required: [networkId, defaultMessageAutoDeleteEnabled, defaultAutoDeleteMessageByFlagLimit]}}}}, responses: {'200': {$ref: '#/components/responses/NetworkResponse'}, '404': {$ref: '#/components/responses/NotFoundError'}}}}, /api/v3/networks/server-key: {get: {summary: Get server key last issued data, tags: [Network], security: [{BearerAuth: []}], description: "Get server key last issued data\n", consumes: [application/json], responses: {'200000': {description: Key last issued data, content: {application/json: {schema: {type: object, properties: {updatedAt: {type: date-time}, updatedBy: {type: string, example: John doe}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: Issue new server key, tags: [Network], security: [{BearerAuth: []}], description: "Issue new server key (old key will be invoked)  \nAllow only admin to call.\n", consumes: [application/json], responses: {'200000': {description: Server key, content: {application/json: {schema: {type: string, example: 7d47e0acf1a33cebef81ba9c2051698f14c1e8c64ec12270af21abb213bc01f101deff4a726254d6426734df02a89b99c59d3ed5cf2d1bb7249c940aec}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/networks: {post: {summary: create a network, tags: [Network], security: [{BearerAuth: []}], description: "Create network (with feature toggle)\n", consumes: [application/json], requestBody: {description: "information for a network creation    \n", required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, description: network name, example: asgfssssfaufiasgf}, tierHandler: {type: string, description: tier handler (in case of we have to do bulk update in the future), example: asc-free}}}}}}, responses: {'200000': {description: Network information, content: {application/json: {schema: {type: object, properties: {apiKey: {type: string, example: b0eced5e3dd3f66548618d1b010b108b855f84e6bc303b2e}, network: {type: object, properties: {_id: {type: string, example: 605478604f07c363ef8465d2}, name: {type: string, example: asgfssssfaufiasgf}}}, networkSetting: {type: object, properties: {videoStreaming: {type: object, properties: {enabled: {type: boolean}}}, chat: {type: object, properties: {enabled: {type: boolean}, mention: {type: object, properties: {isAllowMentionedChannelEnabled: {type: boolean, default: true}}}}}, social: {type: object, properties: {enabled: {type: boolean}, userPrivacySetting: {type: string, enum: [public, private]}, isFollowWithRequestEnabled: {type: boolean, default: false}, isAllowEditPostWhenReviewingEnabled: {type: boolean}, globalFeed: {type: object, properties: {showOnlyMyFeed: {type: boolean, default: false}, showMyPost: {type: boolean}, showEveryonePost: {type: boolean}, showCommunityPost: {type: boolean}, showFollowingPost: {type: boolean}}}}}, webhook: {type: object, properties: {enabled: {type: boolean}}}, moderation: {type: object, properties: {isWhitelistEnabled: {type: boolean}}}, tierHandler: {type: string}}}, adminUsername: {type: string, example: asgfssssfaufiasgf-admin}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/networks/me: {get: {summary: Get self network info, tags: [Network], security: [{BearerAuth: []}], consumes: [application/json], responses: {'200000': {description: Network information., content: {application/json: {schema: {type: object, properties: {name: {type: string, description: network name, example: My test network}, defaultMessageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, defaultAutoDeleteMessageByFlagLimit: {type: number, example: 1, description: Number of flags that will force a message to be deleted automatically.}, useSecureAuthentication: {type: boolean, description: Is this network require secure authentication implementation.}, createdAt: {type: string, description: The date/time when a network is created., format: date-time}, updatedAt: {type: string, description: The date/time when a network is created., format: date-time}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: Update self network info, tags: [Network], security: [{BearerAuth: []}], description: "Update self network info. Only admin can update.\n", consumes: [application/json], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {defaultMessageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, defaultAutoDeleteMessageByFlagLimit: {type: number, min: 1, example: 1, description: Number of flags that will force a message to be deleted automatically.}, useSecureAuthentication: {type: boolean, description: Is this network require secure authentication implementation.}}}}}}, responses: {'200000': {description: Network information., content: {application/json: {schema: {type: object, properties: {name: {type: string, description: network name, example: My test network}, defaultMessageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, defaultAutoDeleteMessageByFlagLimit: {type: number, example: 1, description: Number of flags that will force a message to be deleted automatically.}, useSecureAuthentication: {type: boolean, description: Is this network require secure authentication implementation.}, createdAt: {type: string, description: The date/time when a network is created., format: date-time}, updatedAt: {type: string, description: The date/time when a network is created., format: date-time}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/posts: {get: {summary: query posts, tags: [Post], security: [{BearerAuth: []}], description: "Query posts\n", parameters: [{name: targetId, in: query, schema: {type: string, maxLength: 900}}, {name: targetType, required: true, in: query, schema: {type: string, enum: [community, user, content]}}, {name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated, lastUpdated, firstUpdated], default: lastCreated}}, {name: dataType, in: query, schema: {type: string, maxLength: 900}, example: upstra.customtype, description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")', deprecated: true}, {name: hasFlag, in: query, schema: {type: boolean, default: null}, description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.  \n"}, {name: isDeleted, in: query, schema: {type: boolean, default: null}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}, {name: sortBy, in: query, schema: {type: string, enum: [published, reviewing], default: published}}, {name: dataTypes, in: query, collectionFormat: multi, description: "oneOf:\n  * video\n  * image\n  * file\n  * liveStream\n  * string\nexample: upstra.customtype - custom post type - must be in namespace like format (ex. \"upstra.customtype\", \"com.eko.birthday\")\n", schema: {type: array, maxItems: 10, items: {oneOf: [{type: string, enum: [video, image, file, liveStream], description: post data type to filter}, {type: string, example: upstra.customtype, description: 'custom post type - must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'}]}}}, {name: tags, in: query, collectionFormat: multi, schema: {type: array, minItems: 0, maxItems: 5, items: {type: string, maxLength: 24}}}, {name: matchingOnlyParentPost, in: query, schema: {type: boolean, default: true}, description: When `true` will filter only parent post}], consumes: [application/json], responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: create a post, tags: [Post], security: [{BearerAuth: []}], description: "Create a post\n", consumes: [application/json], requestBody: {description: "information of a post to be created.\n\nWhen `dataType` is set `data` payload can be anything but it will not support normal data capability (ex. images and files) and `data` payload size will be limit to `100kb`\n", required: true, content: {application/json: {schema: {type: object, properties: {text: {type: string, deprecated: true}, data: {type: object, description: require text or images or files (can't add images with files), properties: {text: {type: string}, images: {type: array, items: {type: string}}, files: {type: array, items: {type: string}}}, required: [text]}, dataType: {type: string, example: upstra.customtype, description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'}, targetType: {type: string, enum: [user, community, content], default: user}, targetId: {type: string, example: <userId>}, metadata: {type: object}, postId: {type: string}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24, description: tags}}, createdAt: {type: string, description: The date/time when a post is created., format: date-time, example: '2022-07-07T04:24:20.444Z'}}, required: [data]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/posts/{postId}': {get: {summary: get a post by ID, tags: [Post], security: [{BearerAuth: []}], description: "Get a post by ID\n", parameters: [{name: postId, in: path, required: true, schema: {type: string, maxLength: 900}}], consumes: [application/json], responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: update a post, tags: [Post], security: [{BearerAuth: []}], description: "Update a post\n", parameters: [{name: postId, in: path, required: true, schema: {type: string, maxLength: 900}}], consumes: [application/json], requestBody: {description: "information of a post to be updated.\n", required: true, content: {application/json: {schema: {type: object, properties: {text: {type: string, deprecated: true}, data: {type: object, properties: {text: {type: string, max: 50000, description: For updating text in the post}, fileId: {type: string, max: 100, description: 'Put file id to update file,image inside file, image post (video is not supported yet)'}, streamId: {type: string, max: 100, description: Put stream id to update live streaming post with new streaming}, thumbnailFileId: {type: string, max: 100, description: Put image file id to update video file thumbnail in video post}}}, metadata: {type: object}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24, description: tags}}}, required: [postId]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: delete a post, tags: [Post], security: [{BearerAuth: []}], description: "Delete a post\n", parameters: [{name: postId, in: path, required: true, schema: {type: string, maxLength: 900}}], consumes: [application/json], responses: {'200000': {description: post information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/posts/{postId}/approve': {post: {summary: Approve reviewing post, tags: [Post], security: [{BearerAuth: []}], description: "Get a post by ID\n", parameters: [{in: path, name: postId, required: true, schema: {type: string, minimum: 1}, description: Post public id}], consumes: [application/json], responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/posts/{postId}/decline': {post: {summary: Decline reviewing post, tags: [Post], security: [{BearerAuth: []}], description: "Get a post by ID\n", parameters: [{in: path, name: postId, required: true, schema: {type: string, minimum: 1}, description: Post public id}], consumes: [application/json], responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/posts/{postId}/flag': {post: {summary: flag a post., tags: [Post], security: [{BearerAuth: []}], parameters: [{name: postId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400300': {description: Error when too many user is already flagged message., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Number of flag already exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/posts/{postId}/isflagbyme': {get: {summary: Check whether user flag a given post., tags: [Post], security: [{BearerAuth: []}], description: "Check whether user flag a given post.\n", parameters: [{name: postId, in: path, required: true, schema: {type: string, maxLength: 900}}], responses: {'200000': {description: Is flag by me response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {result: {type: boolean}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}}}}, /api/v3/posts/:postId/unflag: {delete: {summary: unflag a post., tags: [Post], security: [{BearerAuth: []}], parameters: [{name: postId, in: path, required: true, schema: {type: string, maxLength: 900}}], consumes: [application/json], responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/posts/list: {get: {summary: get list of post, tags: [Post], security: [{BearerAuth: []}], description: "Get list of post\n", parameters: [{name: postIds, in: query, collectionFormat: multi, schema: {type: array, maxItems: 100, items: {type: string, maxLength: 50}}}], consumes: [application/json], responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/posts/:postId/flags: {delete: {summary: clear flags, tags: [Post], security: [{BearerAuth: []}], parameters: [{name: postId, in: path, required: true, schema: {type: string, maxLength: 900}}], consumes: [application/json], responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.create: {post: {summary: create a post, tags: [Post], security: [{SocketAuth: []}], description: "Create a post\n", requestBody: {description: "information of a post to be created.\n\n\nWhen `dataType` is set `data` payload can be anything but it will not support normal data capability (ex. images and files)\nand `data` payload size will be limit to 100kb\n", required: true, content: {application/json: {schema: {type: object, properties: {text: {type: string, deprecated: true}, data: {type: object, description: require text or images or files (can't add images with files), properties: {text: {type: string}, images: {type: array, items: {type: string}}, files: {type: array, items: {type: string}}}, required: [text]}, dataType: {type: string, example: upstra.customtype, description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'}, targetType: {type: string, enum: [user, community, content], default: user}, targetId: {type: string, example: <userId>}, metadata: {type: object}, postId: {type: string}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24, description: tags}}}, required: [data]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.update: {post: {summary: update a post, tags: [Post], security: [{SocketAuth: []}], description: "Update a post (can't update images and files yet)\n", requestBody: {description: "information of a post to be updated.\n", required: true, content: {application/json: {schema: {type: object, properties: {postId: {type: string}, text: {type: string, deprecated: true}, data: {type: object, properties: {text: {type: string, max: 50000, description: For updating text in the post}, fileId: {type: string, max: 100, description: 'Put file id to update file,image inside file, image post (video is not supported yet)'}, streamId: {type: string, max: 100, description: Put stream id to update live streaming post with new streaming}, thumbnailFileId: {type: string, max: 100, description: Put image file id to update video file thumbnail in video post}}}, metadata: {type: object}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24, description: tags}}}, required: [postId]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.delete: {post: {summary: delete a post, tags: [Post], security: [{SocketAuth: []}], description: "Delete a post\n", requestBody: {description: "information of a post to be deleted.\n", required: true, content: {application/json: {schema: {type: object, properties: {postId: {type: string}}, required: [postId]}}}}, responses: {'200000': {description: post information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.get: {post: {summary: get a post by ID, tags: [Post], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get a post by ID\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a post.\n", required: true, content: {application/json: {schema: {type: object, properties: {postId: {type: string, maxLength: 900}}, required: [postId]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.flag: {post: {summary: flag a post., tags: [Post], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a post to be flagged.\n", required: true, content: {application/json: {schema: {type: object, properties: {postId: {type: string, maxLength: 900}}, required: [postId]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}}}, '400300': {description: Error when too many user is already flagged message., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Number of flag already exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.unflag: {post: {summary: unflag a post., tags: [Post], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a post to be unflagged.\n", required: true, content: {application/json: {schema: {type: object, properties: {postId: {type: string, maxLength: 900}}, required: [postId]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.isflagbyme: {post: {summary: Check whether user flag a given post., tags: [Post], security: [{SocketAuth: []}], description: "Check whether user flag a given post.\n", requestBody: {description: "postId to check if the post is flagged by user.\n", required: true, content: {application/json: {schema: {type: object, properties: {postId: {type: string, maxLength: 900}}, required: [postId]}}}}, responses: {'200000': {description: Is flag by me response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {result: {type: boolean}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}}}}, /sockets/v3/post.getList: {post: {summary: get list of post, tags: [Post], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get list of post\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a post.\n", required: true, content: {application/json: {schema: {type: object, properties: {postIds: {type: array, maxItems: 100, items: {type: string, maxLength: 50}}}, required: [postIds]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.clearFlags: {post: {summary: clear flags, tags: [Post], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a post to be clear flagged.\n", required: true, content: {application/json: {schema: {type: object, properties: {postId: {type: string, maxLength: 900}}, required: [postId]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.query: {post: {summary: query posts, tags: [Post], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Query posts\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {targetId: {type: string, maxLength: 900}, targetType: {type: string, enum: [community, user, content]}, sortBy: {type: string, enum: [lastCreated, firstCreated, lastUpdated, firstUpdated], default: lastCreated}, dataType: {type: string, example: upstra.customtype, description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")', deprecated: true}, hasFlag: {type: boolean, default: null, description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"}, isDeleted: {type: boolean, default: null}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}, feedType: {type: string, enum: [published, reviewing], default: published}, dataTypes: {type: array, minItems: 1, maxItems: 10, items: {oneOf: [{type: string, enum: [video, image, file, liveStream], description: post data type to filter}, {type: string, example: upstra.customtype, description: 'custom post type - must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'}]}}, matchingOnlyParentPost: {type: boolean, default: true, description: When `true` will filter only parent post}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24, description: tags}}}, required: [targetType]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.approve: {post: {summary: clear flags, tags: [Post], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a post to be clear flagged.\n", required: true, content: {application/json: {schema: {type: object, properties: {postId: {type: string, maxLength: 900}}, required: [postId]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/post.decline: {post: {summary: query posts, tags: [Post], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Query posts\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {targetId: {type: string, maxLength: 900}, targetType: {type: string, enum: [community, user, content]}, sortBy: {type: string, enum: [lastCreated, firstCreated, lastUpdated, firstUpdated], default: lastCreated}, dataType: {type: string, example: upstra.customtype, description: 'must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")', deprecated: true}, hasFlag: {type: boolean, default: null, description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"}, isDeleted: {type: boolean, default: null}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}, feedType: {type: string, enum: [published, reviewing], default: published}, dataTypes: {type: array, minItems: 1, maxItems: 10, items: {oneOf: [{type: string, enum: [video, image, file, liveStream], description: post data type to filter}, {type: string, example: upstra.customtype, description: 'custom post type - must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'}]}}, matchingOnlyParentPost: {type: boolean, default: true, description: When `true` will filter only parent post}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24, description: tags}}}, required: [targetType]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v4/posts: {post: {summary: create a post, tags: [Post v4], security: [{BearerAuth: []}], description: "Create a post\n", consumes: [application/json], requestBody: {description: "information of a post to be created.\n\nrequire text or at least 1 attachments\n\n### Custom post\n- When `dataType` is set as the custom name (dot separated string format, see the `dataType` field section), `data` payload can be anything but it will not support normal data capability (ex. `text` data will not be created)\nand `data` payload size will be limit to `100kb`\n- `attachments` will be ignored, users need to keep them in `data` field and handle the file info by themselves\n\n### Image, File, Video post\n- Put `type` with file id in `attachments`\n- Image and File data can be picked from `fileId` in `data` object in child post\n- Video fileId for each resolution will be in `videoFileId` in `data` object in child post\n\n### Live streaming post\n- When put `dataType` as `liveStream` and `streamId` in `data`, post will be created as live streaming post\n- `attachments` will be ignored\n- Video streaming info will be in `videoStreamings` object in response\n\n### Poll post\n- When put `dataType` as `poll` and `pollId` in `data`, post will be created as poll post\n- `attachments` will be ignored\n- Poll info will be in `polls` object in response\n", required: true, content: {application/json: {schema: {type: object, properties: {data: {type: object, properties: {text: {type: string, description: data for text in post parent, example: example text}, streamId: {type: string, description: video streaming id for create live streaming post, example: 81559bcc3a5bb3b6bbd69a83b89d337e}, pollId: {type: string, description: poll id for create poll post, example: 53a9fd8b5aaa1af6c5a1bbd245ce4a9b1627373735551}}}, attachments: {type: array, items: {type: object, description: attachment info, properties: {fileId: {type: string, example: 57b916d38eaf8010caddfb7759a2d06c, description: file id for attachment}, type: {type: string, description: attachment type, enum: [image, file, video]}}}}, dataType: {type: string, example: upstra.customtype, description: 'Must be in dot separated string format or system defined format (ex. "upstra.customtype", "com.eko.birthday", "liveStream")'}, targetType: {type: string, enum: [user, community, content], default: user, description: where to create post to}, targetId: {type: string, example: public_user_id, description: 'Resource public id depends on target type (ex. target type is community, target id will be community public id)'}, metadata: {type: object, example: {anything: you want}}, postId: {type: string, example: postidiwant, description: for specify public post id on post creation}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, description: tags, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, example: user, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, example: [userId1, userId2], description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}, createdAt: {type: string, description: The date/time when a post is created., format: date-time, example: '2022-07-07T04:24:20.444Z'}}, required: [data]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, get: {summary: query posts, tags: [Post v4], security: [{BearerAuth: []}], description: "Query posts\n", parameters: [{name: targetId, in: query, required: true, schema: {type: string, maxLength: 900}}, {name: targetType, in: query, schema: {type: string, enum: [community, user, content]}}, {name: sortBy, in: query, schema: {type: string, enum: [lastCreated, firstCreated, lastUpdated, firstUpdated], default: lastCreated}}, {name: hasFlag, in: query, schema: {type: boolean, default: null}, description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"}, {name: isDeleted, in: query, schema: {type: boolean, default: null}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}, before: {type: string, maxLength: 24}, after: {type: string, maxLength: 24}, updatedAt: {type: string, maxLength: 100}}}, description: use updatedAt when sort by first/lastUpdated}, {name: feedType, in: query, collectionFormat: multi, schema: {type: array, minItems: 1, maxItems: 4, items: {type: string, enum: [reviewing, published]}, default: published}}, {name: dataTypes, in: query, collectionFormat: multi, schema: {type: array, minItems: 1, maxItems: 4, items: {type: string, maxLength: 100, enum: [video, image, file, liveStream, poll]}}, description: post data type to filter}, {name: tags, in: query, collectionFormat: multi, schema: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, description: tags}, {name: matchingOnlyParentPost, in: query, schema: {type: boolean, default: true}, description: When `true` will filter only parent post}], consumes: [application/json], responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v4/posts/:postId: {put: {summary: update a post, tags: [Post v4], security: [{BearerAuth: []}], description: "Update a post\n", parameters: [{name: postId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a post to be updated.\n### Image, File, Video post update - Put `type` with file id in `attachments` - Image and File data can be picked from `fileId` in `data` object in child post - Video fileId for each resolution will be in `videoFileId` in `data` object in child post\n", required: true, content: {application/json: {schema: {type: object, properties: {text: {type: string, deprecated: true}, data: {type: object, properties: {text: {type: string, max: 50000, description: For updating text in the post}, fileId: {type: string, max: 100, description: 'Put file id to update file,image inside file, image post (video is not supported yet)'}, streamId: {type: string, max: 100, description: Put stream id to update live streaming post with new streaming}, thumbnailFileId: {type: string, max: 100, description: Put image file id to update video file thumbnail in video post}}}, metadata: {type: object}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24, description: tags}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, example: user, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, example: [userId1, userId2], description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}, attachments: {type: array, items: {type: object, description: attachment info, properties: {fileId: {type: string, example: 57b916d38eaf8010caddfb7759a2d06c, description: file id for attachment}, type: {type: string, description: attachment type, enum: [image, file, video]}}}}}}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {posts: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: delete a post, tags: [Post v4], security: [{BearerAuth: []}], description: "Delete a post\n", parameters: [{name: postId, in: path, required: true, schema: {type: string}}, {name: permanent, in: query, value: application/json, schema: {type: boolean, default: false, description: If permanent data will be hard deleted}}], consumes: [application/json], responses: {'200000': {description: post information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/post.query: {post: {summary: query posts, tags: [Post v4], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Query posts\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {targetId: {type: string, maxLength: 900}, targetType: {type: string, enum: [community, user, content]}, sortBy: {type: string, enum: [lastCreated, firstCreated, lastUpdated, firstUpdated], default: lastCreated}, hasFlag: {type: boolean, default: null, description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"}, isDeleted: {type: boolean, default: null}, options: {type: object, properties: {before: {type: string, maxLength: 24}, after: {type: string, maxLength: 24}, limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}, feedType: {type: string, enum: [published, reviewing], default: published}, dataTypes: {type: array, minItems: 1, maxItems: 10, items: {oneOf: [{type: string, maxLength: 100, enum: [video, image, file, liveStream], description: post data type to filter}, {type: string, example: upstra.customtype, description: 'custom post type - must be in namespace like format (ex. "upstra.customtype", "com.eko.birthday")'}]}}, matchingOnlyParentPost: {type: boolean, default: true, description: When `true` will filter only parent post}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24, description: tags}}}, required: [targetType]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/post.create: {post: {summary: create a post, tags: [Post v4], security: [{SocketAuth: []}], description: "Create a post\n", requestBody: {description: "information of a post to be created.\n\nrequire text or at least 1 attachments\n\n### Custom post\nWhen `dataType` is set `data` payload can be anything but it will not support normal data capability (ex. `text` data will not be created)\nand `data` payload size will be limit to `100kb`\n\n### Image, File, Video post\n- Put `type` with file id in `attachments`\n- Image and File data can be picked from `fileId` in `data` object in child post\n- Video fileId for each resolution will be in `videoFileId` in `data` object in child post\n\n### Live streaming post\n- When put `dataType` as `liveStream` and `streamId` in `data`, post will be created as live streaming post\n- `attachments` will be ignored\n- Video streaming info will be in `videoStreamings` object in response\n", required: true, content: {application/json: {schema: {type: object, properties: {data: {type: object, properties: {text: {type: string, description: data for text in post parent, example: example text}, streamId: {type: string, description: video streaming id for create live streaming post, example: 81559bcc3a5bb3b6bbd69a83b89d337e}, pollId: {type: string, description: poll id for create poll post, example: 53a9fd8b5aaa1af6c5a1bbd245ce4a9b1627373735551}}}, attachments: {type: array, items: {type: object, description: attachment info, properties: {fileId: {type: string, example: 57b916d38eaf8010caddfb7759a2d06c, description: file id for attachment}, type: {type: string, description: attachment type, enum: [image, file, video]}}}}, dataType: {type: string, example: upstra.customtype, description: 'Must be in namespace like or system defined format (ex. "upstra.customtype", "com.eko.birthday", "liveStream")'}, targetType: {type: string, enum: [user, community, content], default: user, description: where to create post to}, targetId: {type: string, example: public_user_id, description: 'Resource public id depends on target type (ex. target type is community, target id will be community public id)'}, metadata: {type: object, example: {anything: you want}}, postId: {type: string, example: postidiwant, description: for specify public post id on post creation}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24, description: tags}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, example: user, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, example: [userId1, userId2], description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [data]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/post.update: {post: {summary: update a post, tags: [Post v4], security: [{SocketAuth: []}], description: "Update a post (can't update images and files yet)\n", requestBody: {description: "information of a post to be updated.\n### Image, File, Video post update - Put `type` with file id in `attachments` - Image and File data can be picked from `fileId` in `data` object in child post - Video fileId for each resolution will be in `videoFileId` in `data` object in child post\n", required: true, content: {application/json: {schema: {type: object, properties: {postId: {type: string}, text: {type: string, deprecated: true}, data: {type: object, properties: {text: {type: string, max: 50000, description: For updating text in the post}, fileId: {type: string, max: 100, description: 'Put file id to update file,image inside file, image post (video is not supported yet)'}, streamId: {type: string, max: 100, description: Put stream id to update live streaming post with new streaming}, thumbnailFileId: {type: string, max: 100, description: Put image file id to update video file thumbnail in video post}}}, metadata: {type: object}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24, description: tags}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, example: user, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, example: [userId1, userId2], description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}, attachments: {type: array, items: {type: object, description: attachment info, properties: {fileId: {type: string, example: 57b916d38eaf8010caddfb7759a2d06c, description: file id for attachment}, type: {type: string, description: attachment type, enum: [image, file, video]}}}}}, required: [postId]}}}}, responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/post.delete: {post: {summary: delete a post, tags: [Post v4], security: [{SocketAuth: []}], description: "Delete a post\n", requestBody: {description: "information of a post to be deleted.\n", required: true, content: {application/json: {schema: {type: object, properties: {postId: {type: string}, permanent: {type: boolean, default: false, description: If true data will be deleted from database}}, required: [postId]}}}}, responses: {'200000': {description: post information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/polls: {post: {summary: Create a poll, tags: [Poll v3], security: [{BearerAuth: []}], description: "Create a poll\n", consumes: [application/json], requestBody: {description: "Information of a poll to be created.\n### Required\n- at least 2 options\n- dataType currently support only `text`\n- closedIn unit must be `milliseconds`\n", required: true, content: {application/json: {schema: {type: object, properties: {text: {type: string}, question: {type: string, description: question.}, answers: {type: array, min: 2, maxItems: 10, items: {type: object, properties: {dataType: {description: Datatype of answer (current only string)., type: string, enum: [text]}, data: {type: string}}}}, answerType: {description: single or multiple., type: single, default: null}, closedIn: {type: number, description: Countdown time to close vote (milliseconds)}}, required: [data]}}}}, responses: {'200000': {description: Poll Information, content: {application/json: {schema: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/polls/{pollId}': {put: {summary: update poll status, tags: [Poll v3], security: [{BearerAuth: []}], description: "update a poll\n", parameters: [{name: pollId, in: path, required: true, schema: {type: string}}, {name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of a poll to be updated.\n### Required\n- currently support only `closed`\n", required: true, content: {application/json: {schema: {type: object, properties: {text: {type: string}, status: {description: poll status, type: string, default: closed}}, required: [data]}}}}, responses: {'200000': {description: Poll Information, content: {application/json: {schema: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Only creator can update poll.}}}}, '400400': {description: Poll Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Poll not found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, get: {summary: Get poll, tags: [Poll v3], security: [{BearerAuth: []}], description: "List users who vote the poll with specific answer\n", parameters: [{name: pollId, in: path, required: true, schema: {type: string, maxLength: 900}}, {name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Poll Information, content: {application/json: {schema: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}, '400400': {description: Poll Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Poll not found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: delete poll, tags: [Poll v3], security: [{BearerAuth: []}], description: "delete a poll\n", parameters: [{name: pollId, in: path, required: true, schema: {type: string}}, {name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: poll deleted, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400400': {description: Poll Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Poll not found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/polls/{pollId}/votes': {post: {summary: Vote poll, tags: [Poll v3], security: [{BearerAuth: []}], description: "Client vote poll\n", parameters: [{name: pollId, in: path, required: true, schema: {type: string}}, {name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "Information of a poll to be voted.\n### Required\n- answerIds for vote the poll\n", required: true, content: {application/json: {schema: {type: object, properties: {answerIds: {description: poll id, type: array, items: {type: string}}}, required: [data]}}}}, responses: {'200000': {description: Poll Information, content: {application/json: {schema: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Poll Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Poll not found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/polls/{pollId}/answers/{answerId}': {get: {summary: List user who vote the poll with specific answer, tags: [Poll v3], security: [{BearerAuth: []}], description: "List users who vote the poll with specific answer\n", parameters: [{name: pollId, in: path, required: true, schema: {type: string, maxLength: 900}}, {name: answerId, in: path, required: true, schema: {type: string, maxLength: 900}}, {name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}, {name: sortBy, in: query, schema: {type: string, enum: [lastCreated, firstCreated]}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}, before: {type: string, maxLength: 24}, after: {type: string}}}}], consumes: [application/json], responses: {'200000': {description: Poll Information and users respondent., content: {application/json: {schema: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, UsersAnswered: {type: array, items: {type: object, properties: {userId: {type: string}, pollId: {type: string}, answerIds: {description: answer id, type: array, items: {type: string}}, createdAt: {type: string}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}, '400400': {description: Poll Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Poll not found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/poll.create: {post: {summary: Create a poll, tags: [Poll v3], security: [{SocketAuth: []}], description: "Create a poll\n", requestBody: {description: "Information of a poll to be created.\n### Required\n- at least 2 options\n- dataType currently support only `text`\n- closedIn unit must be `milliseconds`\n", required: true, content: {application/json: {schema: {type: object, properties: {text: {type: string}, question: {type: string, description: question.}, answers: {type: array, min: 2, maxItems: 10, items: {type: object, properties: {dataType: {description: Datatype of answer (current only string)., type: string, enum: [text]}, data: {type: string}}}}, answerType: {description: single or multiple., type: single, default: null}, closedIn: {type: number, description: Countdown time to close vote (milliseconds)}}}}}}, responses: {'200000': {description: Poll Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/poll.update: {post: {summary: update poll status, tags: [Poll v3], security: [{SocketAuth: []}], description: "update a poll\n", consumes: [application/json], requestBody: {description: "Information of a poll to be updated.\n### Required\n- currently support only `closed`\n", required: true, content: {application/json: {schema: {type: object, properties: {pollId: {type: string}, text: {type: string}, status: {description: poll status, type: string, default: closed}}, required: [pollId]}}}}, responses: {'200000': {description: Poll Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Only creator can update poll.}}}}, '400400': {description: Poll Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Poll not found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/poll.delete: {post: {summary: delete poll, tags: [Poll v3], security: [{SocketAuth: []}], description: "delete a poll\n", requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {pollId: {type: string}}, required: [pollId]}}}}, consumes: [application/json], responses: {'200000': {description: poll deleted, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400400': {description: Poll Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Poll not found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/poll.vote: {post: {summary: Vote poll, tags: [Poll v3], security: [{SocketAuth: []}], description: "Client vote poll\n", consumes: [application/json], requestBody: {description: "Information of a poll to be voted.\n### Required\n- answerIds for vote the poll\n", required: true, content: {application/json: {schema: {type: object, properties: {pollId: {type: string}, answerIds: {description: poll id, type: array, items: {type: string}}}, required: [pollId, answerIds]}}}}, responses: {'200000': {description: Poll Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Poll Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Poll not found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/poll.get: {post: {summary: Get poll, tags: [Poll v3], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "List users who vote the poll with specific answer\n", consumes: [application/json], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {pollId: {type: string}}, required: [pollId]}}}}, responses: {'200000': {description: Poll Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, '400400': {description: Poll Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Poll not found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/poll.getList: {post: {summary: List user who vote the poll with specific answer, tags: [Poll v3], security: [{SocketAuth: []}], description: "List users who vote the poll with specific answer\n", consumes: [application/json], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {pollId: {type: string}, answerId: {type: string}}, required: [pollId, answerId]}}}}, responses: {'200000': {description: Poll Information and users respondent., content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, UsersAnswered: {type: array, items: {type: object, properties: {userId: {type: string}, pollId: {type: string}, answerIds: {description: answer id, type: array, items: {type: string}}, createdAt: {type: string}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400400': {description: Poll Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Poll not found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/user-feeds/{userId}': {get: {summary: Get list of posts., tags: [UserFeed], security: [{BearerAuth: []}], description: "Get paginable list of posts.\n", parameters: [{name: userId, in: path, required: true, schema: {type: string}}, {name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated, lastUpdated, firstUpdated], default: lastCreated}}, {name: hasFlag, in: query, schema: {type: boolean, default: null}, description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"}, {name: isDeleted, in: query, schema: {type: boolean, default: null}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}, {name: dataTypes, in: query, collectionFormat: multi, schema: {type: array, minItems: 1, maxItems: 4, items: {type: string, enum: [video, image, file, liveStream]}, description: post data type to filter}}], responses: {'200000': {description: UserFeed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/user-feeds/{userId}/count': {get: {summary: Get number of post., tags: [UserFeed], security: [{BearerAuth: []}], description: "Get number of post.\n", parameters: [{name: userId, in: path, required: true, schema: {type: string}}, {name: isDeleted, in: query, schema: {type: boolean, default: null}}], responses: {'200000': {description: Number of post information, content: {application/json: {schema: {type: object, properties: {postsCount: {type: number}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/user-feed.query: {post: {summary: Get list of posts., tags: [UserFeed], security: [{SocketAuth: []}], description: "Get paginable list of posts.\n", requestBody: {description: "Condition of querying and pagination.\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string}, sortBy: {type: string, enum: [lastCreated, firstCreated, lastUpdated, firstUpdated], default: lastCreated}, isDeleted: {type: boolean, default: null}, hasFlag: {type: boolean, default: null, description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string}}}, dataTypes: {type: array, minItems: 1, maxItems: 4, items: {type: string, enum: [video, image, file, liveStream], description: post data type to filter}}}, required: [userId]}}}}, responses: {'200000': {description: UserFeed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/user-feed.count: {post: {summary: Get number of post., tags: [UserFeed], security: [{SocketAuth: []}], description: "Get number of post.\n", requestBody: {description: "Condition of querying.\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string}, isDeleted: {type: boolean, default: null}}, required: [userId]}}}}, responses: {'200000': {description: Number of post information, content: {application/json: {schema: {type: object, properties: {postsCount: {type: number}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/community-feeds/{communityId}': {get: {summary: Get list of posts., tags: [CommunityFeed], security: [{BearerAuth: []}], description: "Get paginable list of posts.\n", parameters: [{name: communityId, in: path, required: true, schema: {type: string}}, {name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated, lastUpdated, firstUpdated], default: lastCreated}}, {name: hasFlag, in: query, schema: {type: boolean, default: false}, description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"}, {name: isDeleted, in: query, schema: {type: boolean, default: null}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}, {name: dataTypes, in: query, collectionFormat: multi, schema: {type: array, minItems: 1, maxItems: 4, items: {type: string, enum: [video, image, file, liveStream]}, description: post data type to filter}}], consumes: [application/json], responses: {'200000': {description: CommunityFeed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400100': {description: Unauthorized, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: Unauthorized}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community-feed.query: {post: {summary: Get list of posts., tags: [CommunityFeed], security: [{SocketAuth: []}], description: "Get paginable list of posts.\n", requestBody: {description: "Condition of querying and pagination.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string}, sortBy: {type: string, enum: [lastCreated, firstCreated, lastUpdated, firstUpdated], default: lastCreated}, isDeleted: {type: boolean, default: null}, hasFlag: {type: boolean, default: null, description: "hasFlag:\n  * `null(default)` - Show all posts.\n  * `true` - Show only flagged post(or children) or has flagged comment.\n  * `false` - Show only no flagged post(and children) and has no flagged comment.\n"}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string}}}, dataTypes: {type: array, minItems: 1, maxItems: 4, items: {type: string, enum: [video, image, file, liveStream], description: post data type to filter}}}, required: [userId]}}}}, responses: {'200000': {description: CommunityFeed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400100': {description: Unauthorized, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: Unauthorized}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, /api/v3/global-feeds: null, get: {summary: Get global feed., tags: [GlobalFeed], security: [{BearerAuth: []}], description: "Get paginable list of active posts (not deleted) from users and community.\n", parameters: [{name: showOnlyMyFeed, in: query, schema: {type: boolean}}, {name: dataTypes, in: query, collectionFormat: multi, schema: {type: array, minItems: 1, maxItems: 4, items: {type: string, enum: [video, image, file, liveStream]}, description: post data type to filter}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}], consumes: [application/json], responses: {'200000': {description: Global Feed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/global-feed.query: {post: {summary: Get global feed., tags: [GlobalFeed], security: [{SocketAuth: []}], description: "Get paginable list of active posts (not deleted) from users and community.\n", requestBody: {description: "Condition of querying and pagination.\n", required: true, content: {application/json: {schema: {type: object, properties: {showOnlyMyFeed: {type: boolean}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string}, dataTypes: {type: array, minItems: 1, maxItems: 4, items: {type: string, enum: [video, image, file, liveStream], description: post data type to filter}}}}}}}}}, responses: {'200000': {description: Global Feed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/comments: {get: {summary: query comments., tags: [Comment], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "query comments.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}, {name: referenceId, required: true, in: query, schema: {type: string, maxLength: 900}}, {name: referenceType, in: query, schema: {type: string, enum: [post, content]}}, {name: filterByParentId, in: query, schema: {type: boolean, default: true}}, {name: parentId, in: query, schema: {type: string, maxLength: 900}}, {name: hasFlag, in: query, schema: {type: boolean, default: false}}, {name: isDeleted, in: query, schema: {type: boolean, default: null}}, {name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated, lastUpdated, firstUpdated], default: lastCreated}, description: "type:\n  * `scrollable(default)` - sort by segment number only.\n  * `pagination` - can sort by 'lastCreated(default)', 'firstCreated', 'lastUpdated', 'firstUpdated'.\n"}, {name: options, in: query, style: deepObject, description: "type:\n  * `scrollable(default)` - 'after', 'first', 'before' and 'last' will be set for page size with direction.\n  * `pagination` - 'skip' and 'limit' will be the number of records to skip and max records size.\n\nlimit/skip:\n  * support pagination type only\n\nbefore/after/first/last:\n  * support scrollable type only\n", schema: {type: object, properties: {type: {type: string, enum: [scrollable, pagination], default: scrollable}, limit: {type: integer, minimum: 1, maximum: 100}, skip: {type: integer, minimum: 0, maximum: 100}, after: {type: integer, minimum: 1}, first: {type: integer, minimum: 1, maximum: 100}, before: {type: integer, minimum: 1}, last: {type: integer, minimum: 1, maximum: 100}, token: {type: string, maxLength: 1000}}}}, {name: dataTypes, in: query, style: deepObject, description: "Option to set how the returned comments dataTypes will be contained:\n  * `values`: the dataTypes values want to be contained in the comment (available values: `text`, `image`)\n  * `matchType`: how the dataTypes must be contained in the comment\n    * `any`: the dataTypes could match only partial of the provided field\n    * `exact`: the dataTypes must contain exactly the same as provided in values\n\nExample query params: `GET /api/v3/comments?dataTypes[values][]=text&dataTypes[values][]=image&dataTypes[matchType]=any`\n", schema: {type: object, properties: {values: {type: array, items: {type: string}}, matchType: {type: string, enum: [any, exact]}}}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: create a comment., tags: [Comment], security: [{BearerAuth: []}], consumes: [application/json], requestBody: {description: "information of a comment to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {referenceId: {type: string, maxLength: 900}, referenceType: {type: string, enum: [post, content], default: post}, data: {type: object, properties: {text: {type: string, maxLength: 50000}}}, metadata: {type: object}, commentId: {type: string, maxLength: 900}, parentId: {type: string, maxLength: 900}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, example: user, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, example: [userId1, userId2], description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time, example: '2022-07-07T04:24:20.444Z'}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [referenceId]}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/comments/{commentId}': {get: {summary: get a comment., tags: [Comment], security: [{BearerAuth: []}], description: "get a comment.\n", parameters: [{name: commentId, in: path, required: true, description: "Get comment by ID.\n", schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: update a comment., tags: [Comment], security: [{BearerAuth: []}], parameters: [{name: commentId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "comment information.\n", required: true, content: {application/json: {schema: {type: object, properties: {data: {type: object, properties: {text: {type: string, maxLength: 50000}}}, metadata: {type: object}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, example: user, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, example: [userId1, userId2], description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: delete a comment., tags: [Comment], security: [{BearerAuth: []}], parameters: [{name: commentId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: comment information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/comments/{commentId}/flag': {post: {summary: flag a comment., tags: [Comment], security: [{BearerAuth: []}], parameters: [{name: commentId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a comment to be flagged.\n", required: true, content: {application/json: {schema: {type: object, properties: {commentId: {type: string, maxLength: 900}}, required: [commentId]}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400300': {description: Error when too many user is already flagged message., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Number of flag already exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/comments/{commentId}/isflagbyme': {get: {summary: Check whether user flag a given comment., tags: [Comment], security: [{BearerAuth: []}], parameters: [{name: commentId, in: path, required: true, description: "commentId to be flagged\n", schema: {type: string}}], description: "Check whether user flag a given comment.\n", responses: {'200000': {description: Is flag by me response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {result: {type: boolean}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}}}}, /api/v3/comments/:commentId/unflag: {delete: {summary: unflag a comment., tags: [Comment], security: [{BearerAuth: []}], parameters: [{name: commentId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/comments/list: {get: {summary: get comments by IDs., tags: [Comment], security: [{BearerAuth: []}], description: "get comments by IDs.\n", parameters: [{name: commentIds, in: query, collectionFormat: multi, required: true, schema: {type: array, minItems: 1, maxItems: 10, items: {type: string, maxLength: 50}}}], consumes: [application/json], responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/comments/{commentId}/flags': {delete: {summary: clear flags., tags: [Comment], security: [{BearerAuth: []}], parameters: [{name: commentId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/comment.query: {post: {summary: query comments., tags: [Comment], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "query comments.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {referenceId: {type: string, maxLength: 900}, referenceType: {type: string, enum: [post, content]}, filterByParentId: {type: boolean, default: true}, parentId: {type: string, maxLength: 900}, isDeleted: {type: boolean, default: null}, sortBy: {type: string, enum: [firstCreated, lastCreated, lastUpdated, firstUpdated], default: lastCreated, description: "type:\n  * `scrollable(default)` - sort by segment number only.\n  * `pagination` - can sort by 'lastCreated(default)', 'firstCreated', 'lastUpdated', 'firstUpdated'.\n"}, options: {type: object, properties: {type: {type: string, enum: [scrollable, pagination], default: scrollable, description: "type:\n  * `scrollable(default)` - 'after', 'first', 'before' and 'last' will be set for page size with direction.\n  * `pagination` - 'skip' and 'limit' will be the number of records to skip and max records size.\n"}, limit: {type: integer, minimum: 1, maximum: 100, description: support pagination type only}, skip: {type: integer, minimum: 0, maximum: 100, description: support pagination type only}, after: {type: integer, minimum: 1, description: support scrollable type only}, first: {type: integer, minimum: 1, maximum: 100, description: support scrollable type only}, before: {type: integer, minimum: 1, description: support scrollable type only}, last: {type: integer, minimum: 1, maximum: 100, description: support scrollable type only}, token: {type: string, maxLength: 1000}}}}, required: [referenceId]}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/comment.create: {post: {summary: create a comment., tags: [Comment], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a comment to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {referenceId: {type: string, maxLength: 900}, referenceType: {type: string, enum: [post, content], default: post}, data: {type: object, properties: {text: {type: string, maxLength: 50000}}}, metadata: {type: object}, parentId: {type: string, maxLength: 900}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, example: user, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, example: [userId1, userId2], description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [referenceId, data]}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/comment.update: {post: {summary: update a comment., tags: [Comment], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "comment information.\n", required: true, content: {application/json: {schema: {type: object, properties: {commentId: {type: string, maxLength: 900}, data: {type: object, properties: {text: {type: string, maxLength: 50000}}}, metadata: {type: object}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, example: user, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, example: [userId1, userId2], description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [commentId]}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/comment.delete: {post: {summary: delete a comment., tags: [Comment], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "comment information.\n", required: true, content: {application/json: {schema: {type: object, properties: {commentId: {type: string, maxLength: 900}}, required: [commentId]}}}}, responses: {'200000': {description: comment information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/comment.flag: {post: {summary: flag a comment., tags: [Comment], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a comment to be flagged.\n", required: true, content: {application/json: {schema: {type: object, properties: {commentId: {type: string, maxLength: 900}}, required: [commentId]}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400300': {description: Error when too many user is already flagged message., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Number of flag already exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/comment.unflag: {post: {summary: unflag a comment., tags: [Comment], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a comment to be unflagged.\n", required: true, content: {application/json: {schema: {type: object, properties: {commentId: {type: string, maxLength: 900}}, required: [commentId]}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/comment.isflagbyme: {post: {summary: Check whether user flag a given comment., tags: [Comment], security: [{SocketAuth: []}], description: "Check whether user flag a given comment.\n", requestBody: {description: "commentId to be flagged\n", required: true, content: {application/json: {schema: {type: object, properties: {commentId: {type: string, maxLength: 900}}, required: [commentId]}}}}, responses: {'200000': {description: Is flag by me response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {result: {type: boolean}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}}}}, /sockets/v3/comment.get: {post: {summary: get a comment., tags: [Comment], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "get a comment.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Get comment by ID.\n", required: true, content: {application/json: {schema: {type: object, properties: {commentId: {type: string, maxLength: 50}}, required: [commentId]}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/comment.getList: {post: {summary: get comments by IDs., tags: [Comment], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "get comments by IDs.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Get comments by IDs.\n", required: true, content: {application/json: {schema: {type: object, properties: {commentIds: {type: array, maxItems: 100, items: {type: string, maxLength: 50}}}, required: [commentIds]}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/comment.clearFlags: {post: {summary: clear flags., tags: [Comment], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a comment to be clearflagged.\n", required: true, content: {application/json: {schema: {type: object, properties: {commentId: {type: string, maxLength: 900}}, required: [commentId]}}}}, responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v4/comments/{commentId}': {delete: {summary: delete a comment., tags: [Comment v4], security: [{BearerAuth: []}], parameters: [{name: commentId, in: path, required: true, schema: {type: string}}, {name: permanent, in: query, value: application/json, schema: {type: boolean, description: If permanent data will be hard deleted}}], consumes: [application/json], responses: {'200000': {description: comment information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/comment.delete: {post: {summary: delete a comment., tags: [Comment v4], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "comment information.\n", required: true, content: {application/json: {schema: {type: object, properties: {commentId: {type: string, maxLength: 900}, permanent: {type: boolean, default: false, description: If permanent data will be hard deleted}}, required: [commentId]}}}}, responses: {'200000': {description: comment information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/moderation-setting.get: {post: {summary: get a moderation setting, tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: messageId, in: path, required: true, schema: {type: string}}], consumes: [application/json], description: "Get a moderation setting.\n", responses: {'200': {$ref: '#/components/responses/ModerationSettingResponse'}, '400': {$ref: '#/components/responses/BadRequestError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}}, /sockets/moderation-setting.update: {post: {summary: update a moderation setting, tags: [Admin], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Update a moderation setting\n", parameters: [{name: Authorization, in: header, required: true, schema: {type: string}}, {name: Content-Type, in: header, required: true, schema: {type: string}}], requestBody: {description: "moderation setting information\n", required: true, content: {application/json: {schema: {type: object, properties: {maxRepetition: {type: integer, minimum: 0}, maxRepetitionTimeout: {type: integer, minimum: 0}, blacklistMuteTimeout: {type: integer, minimum: 0}, whitelistMuteTimeout: {type: integer, minimum: 0}, maxRepetitionMuteTimeout: {type: integer, minimum: 0}, enableImageModeration: {type: boolean}, imageModeration: {type: object, properties: {nudity: {type: number, minimum: 0}, suggestive: {type: number, minimum: 0}, violence: {type: number, minimum: 0}, disturbing: {type: number, minimum: 0}}}}}}}}, responses: {'200': {description: Success}, '400': {$ref: '#/components/responses/BadRequestError'}, '500': {$ref: '#/components/responses/UnexpectedError'}}}}, /api/v3/files: {post: {summary: Upload file., tags: [File], security: [{BearerAuth: []}], consumes: [multipart/form-data], description: "Upload file to cloud storage\n", requestBody: {description: "Information of file to be created. It will be applied to every attachment\n", content: {multipart/form-data: {schema: {type: object, properties: {files: {type: array, items: {type: string, format: binary}}, fullImage: {type: boolean, optional: true}}}}}}, responses: {'200': {description: File Upload Result, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, type: {type: enum, description: File type., enum: [image, file]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '413': {description: Attached file payload too large., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Payload too large.}}}}, '500': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/files/{fileId}': {get: {summary: Get file info, tags: [File], security: [{BearerAuth: []}], description: "Get file info of fileId (ex. type, attributes)\n", parameters: [{in: path, name: fileId, required: true, schema: {type: string, maxLength: 50}, description: File id}], responses: {'200': {description: File Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, type: {type: enum, description: File type., enum: [image, file]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, '400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}}}, delete: {summary: Delete file, tags: [File], security: [{BearerAuth: []}], description: "Delete file (also remove from cloud). Only uploader and admin can remove.\n", parameters: [{in: path, name: fileId, required: true, schema: {type: string, maxLength: 50}, description: File id to remove}], responses: {'200': {description: File Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {fileId: {type: string, description: Removed file id.}}}}}}}}, '403': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '404': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '422': {description: Put a wrong request parameters., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Parameters error., data: {detail: [The 'data.text' field length must be less than or equal to 20000 characters long.]}}}}}}}}, '/api/v3/files/{fileId}/download': {get: {summary: Get file, tags: [File], security: [{SocketAuth: []}], description: "Get file info of fileId (type, attributes)\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', schema: {type: string}}, {name: upstra-access-token, in: cookie, schema: {type: string}, description: Alternative way to pass authorization token}, {in: query, name: t, optional: true, schema: {type: string}, description: Access token (for showing image inside img tag on web)}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}, {in: path, name: fileId, required: true, schema: {type: string, maxLength: 50}, description: File id}, {in: query, name: size, optional: true, schema: {type: string, enum: [full, large, medium, small]}, description: Size of image to download (no effect on file type 'file')}], responses: {'200': {description: File Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {fileId: {type: string, description: Removed file id.}}}}}}}}, '404': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}}}}, /sockets/v3/file.get: {post: {summary: Get file info, tags: [File], security: [{SocketAuth: []}], description: "Get file info of fileId (ex. type, attributes)\n", requestBody: {description: "Condition of querying\n", required: true, content: {application/json: {schema: {type: object, properties: {fileId: {type: string, maxLength: 50}}, required: [fileId]}}}}, responses: {'200000': {description: File Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, type: {type: enum, description: File type., enum: [image, file]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, '400400': {description: Given file id is not found., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: 'File not found ${fileId}.'}}}}}}}, /sockets/v3/file.delete: {post: {summary: Delete file, tags: [File], security: [{SocketAuth: []}], description: "Delete file (also remove from cloud). Only uploader and admin can remove.\n", requestBody: {description: "Condition of removing\n", required: true, content: {application/json: {schema: {type: object, properties: {fileId: {type: string, maxLength: 50}}, required: [fileId]}}}}, responses: {'200000': {description: File Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {fileId: {type: string, description: Removed file id.}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}}}}, /api/v4/images: {post: {summary: Upload image., tags: [File], security: [{BearerAuth: []}], parameters: [{name: Content-Type, in: header, value: multipart/form-data, required: true, schema: {type: string}}], consumes: [multipart/form-data], description: "Upload image to cloud storage\n\nImage size limit: 1,073,741,824 byte\n", requestBody: {content: {multipart/form-data: {schema: {type: object, properties: {files: {type: array, items: {type: string, format: binary, description: Image file data}}}, required: [files]}}}}, responses: {'200': {description: Image Upload Result, content: {application/json: {schema: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: url to download the file}, type: {type: enum, description: File type., enum: [image, file, video], example: image}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name., example: test.jpeg}, extension: {type: string, description: File format., example: jpeg}, size: {type: string, description: File size., example: 2107842}, mimeType: {type: string, description: File mime-type., example: image/jpeg}, metadata: {type: object, description: 'Image metadata (width, height etc.).', properties: {height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}, '413': {description: Attached file payload too large., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Payload too large.}}}}, '500': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v4/files: {post: {summary: Upload file., tags: [File], security: [{BearerAuth: []}], parameters: [{name: Content-Type, in: header, value: multipart/form-data, required: true, schema: {type: string}}], consumes: [multipart/form-data], description: "Upload file to cloud storage\n\nFile size limit: 1,073,741,824 byte\n", requestBody: {content: {multipart/form-data: {schema: {type: object, properties: {files: {type: array, items: {type: string, format: binary, description: file data}}}, required: [files]}}}}, responses: {'200': {description: File Upload Result, content: {application/json: {schema: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: url to download the file}, type: {type: enum, description: File type., enum: [image, file, video], example: file}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name., example: test.pdf}, extension: {type: string, description: File format., example: pdf}, size: {type: string, description: File size., example: 2107842}, mimeType: {type: string, description: File mime-type., example: application/pdf}, metadata: {type: object, description: File metadata.}}}}}}}}}, '413': {description: Attached file payload too large., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Payload too large.}}}}, '500': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v4/videos: {post: {summary: Upload video., tags: [File], security: [{BearerAuth: []}], parameters: [{name: Content-Type, in: header, value: multipart/form-data, required: true, schema: {type: string}}], consumes: [multipart/form-data], description: "Upload video to cloud storage\n\nVideo size limit: 1,073,741,824 byte\n", requestBody: {content: {multipart/form-data: {schema: {type: object, properties: {files: {type: array, items: {type: string, format: binary, description: Video file data}}, feedType: {type: string}}, required: [files]}}}}, responses: {'200': {description: File Video Upload Result, content: {application/json: {schema: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: url to download the file}, type: {type: enum, description: File type., enum: [image, file, video], example: video}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name., example: big_buck_bunny_720p_2mb.mp4}, extension: {type: string, description: File format., example: mp4}, size: {type: string, description: File size., example: 2107842}, mimeType: {type: string, description: File mime-type., example: video/mp4}, metadata: {type: object, description: 'Video metadata (width, height etc.).'}}}}}}}}}, '413': {description: Attached file payload too large., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Payload too large.}}}}, '500': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/communities: {get: {summary: query communities., tags: [Community], security: [{BearerAuth: []}], description: "query communities.\n", parameters: [{name: keyword, in: query, schema: {type: string, minLength: 0, maxLength: 100}}, {name: tags, in: query, collectionFormat: multi, schema: {type: array, maxItems: 10, items: {type: string, minLength: 1, maxLength: 1000}}}, {name: filter, in: query, schema: {type: string, enum: [all, member, notMember], default: all}}, {name: categoryId, in: query, schema: {type: string, minLength: 50, maxLength: 50}}, {name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated, displayName], default: lastCreated}}, {name: isDeleted, in: query, schema: {type: boolean, default: null}, description: "isDeleted:\n  * `null(default)` - Show both community is actived and community is inactived.\n  * `true` - Show community is inactived only.\n  * `false` - Show community is actived only.\n"}, {name: hasFlag, in: query, schema: {type: boolean, default: null}, description: "hasFlag:\n    * `null(default)` - Show all communities.\n    * `true` - Show only community has flagged post(or children post) or has flagged comment.\n    * `false` - Show only community has no flagged post(and children post) and has no flagged comment.\n"}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100}, token: {type: string, maxLength: 1000}}}}], consumes: [application/json], responses: {'200000': {description: Community Users Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: create a community., tags: [Community], security: [{BearerAuth: []}], consumes: [application/json], requestBody: {description: "information of a community to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {displayName: {type: string, minLength: 1, maxLength: 1000}, isPublic: {type: boolean, default: true}, isOfficial: {type: boolean, default: false}, onlyAdminCanPost: {type: boolean, default: false}, description: {type: string, minLength: 1, maxLength: 5000}, tags: {type: array, minItems: 1, maxItems: 10, items: {type: string, minLength: 1, maxLength: 1000}}, metadata: {type: object}, avatarFileId: {type: string, maxLength: 50, minLength: 1}, userIds: {type: array, minItems: 1, maxItems: 1000, items: {type: string, minLength: 1, maxLength: 900}}, categoryIds: {type: array, minItems: 1, maxItems: 10, items: {type: string, minLength: 1, maxLength: 50}}, isUniqueDisplayName: {type: boolean, default: false}, needApprovalOnPostCreation: {type: boolean, default: false}}, required: [displayName]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400315': {description: Data already exists, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400315, message: Data already exists}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/communities/{communityId}': {get: {summary: get a community by ID., tags: [Community], security: [{BearerAuth: []}], description: "Get a community by ID\n", parameters: [{name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}, {name: type, in: query, schema: {type: string, enum: [public, internal], default: public}, description: type of communityId}], consumes: [application/json], responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: update a community., tags: [Community], security: [{BearerAuth: []}], parameters: [{name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], consumes: [application/json], requestBody: {description: "community information.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}, displayName: {type: string, minLength: 1, maxLength: 1000}, isPublic: {type: boolean}, isOfficial: {type: boolean}, onlyAdminCanPost: {type: boolean}, description: {type: string, minLength: 0, maxLength: 5000}, tags: {type: array, minItems: 1, maxItems: 10, items: {type: string, minLength: 1, maxLength: 1000}}, metadata: {type: object}, avatarFileId: {type: string, maxLength: 50, minLength: 1}, categoryIds: {type: array, minItems: 1, maxItems: 10, items: {type: string, minLength: 1, maxLength: 50}}, isUniqueDisplayName: {type: boolean, default: false}, needApprovalOnPostCreation: {type: boolean, default: false}}, required: [communityId]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400315': {description: Data already exists, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400315, message: Data already exists}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: delete a community., tags: [Community], security: [{BearerAuth: []}], parameters: [{name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], responses: {'200000': {description: delete information, content: {application/json: {schema: {type: object, properties: {success: {type: boolean}}}, example: {success: true}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/communities/:communityId/join: {post: {summary: Join a community, tags: [Community], security: [{BearerAuth: []}], description: "Join community by ID\n", parameters: [{name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/communities/:communityId/leave: {delete: {summary: Leave a community., tags: [Community], security: [{BearerAuth: []}], description: "Leave community by ID\n", parameters: [{name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400100': {description: Unauthorized, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: Unauthorized}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/communities/{communityId}/users': {get: {summary: query community users, tags: [Community], security: [{BearerAuth: []}], description: "query community users.\n", parameters: [{name: communityId, in: path, required: true, schema: {type: string}}, {name: memberships, in: query, collectionFormat: multi, schema: {type: array, description: Membership type to filter (If not filter will return both banned user and member), minItems: 1, maxItems: 2, items: {type: string, enum: [banned, member]}}}, {name: roles, in: query, collectionFormat: multi, description: Role to filter, schema: {type: array, minItems: 1, maxItems: 20, items: {type: string, minLength: 1, maxLength: 100}}}, {name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated], default: lastCreated}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, minLength: 1, maxLength: 1000}}}}, {name: search, description: Input text for searching display name and user id, in: query, schema: {type: string, maxLength: 10000}}, {name: type, in: query, schema: {type: string, enum: [public, internal], default: public}, description: type of communityId}], consumes: [application/json], responses: {'200000': {description: Community Users Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: add community users, tags: [Community], security: [{BearerAuth: []}], description: "add community users\n", parameters: [{in: path, name: communityId, required: true, schema: {type: string}, description: Community public id}], consumes: [application/json], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: remove community users, tags: [Community], security: [{BearerAuth: []}], description: "remove community users\n", parameters: [{in: path, name: communityId, required: true, schema: {type: string, minimum: 1}}], consumes: [application/json], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/communities/:communityId/users/ban: {put: {summary: ban community users, tags: [Community], security: [{BearerAuth: []}], description: "ban community users.\n", parameters: [{name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], consumes: [application/json], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 900}}}, required: [userIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400306': {description: Some users cannot be banned, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400306, message: Some users cannot be banned}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/communities/:communityId/users/unban: {put: {summary: unban community users, tags: [Community], security: [{BearerAuth: []}], description: "unban community users.\n", parameters: [{name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], consumes: [application/json], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 900}}}, required: [userIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400316': {description: User is unbanned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400316, message: User is unbanned from a channel / community.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/communities/:communityId/users/roles: {post: {summary: Add role to community users, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Add role to community users.\n", parameters: [{name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], consumes: [application/json], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {role: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds, role]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: Remove role from community users, tags: [Community], security: [{BearerAuth: []}], description: "Remove role from community users.\n", parameters: [{name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], consumes: [application/json], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {role: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds, role]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/communities/{communityId}/permissions/me': {get: {summary: Get self permission in community, tags: [Community], security: [{BearerAuth: []}], description: "query comments.\n", parameters: [{in: path, name: communityId, required: true, schema: {type: string, minimum: 1}, description: Community public id}], consumes: [application/json], responses: {'200000': {description: Communities permission information for this user, content: {application/json: {schema: {type: object, properties: {isCreator: {type: boolean, example: false, description: Is this person create this community?}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/communities/list: {get: {summary: get list of community, tags: [Community], security: [{BearerAuth: []}], description: "Get list of community\n", parameters: [{name: communityIds, in: query, required: true, collectionFormat: multi, schema: {type: array, minLength: 1, maxItems: 100, items: {type: string, maxLength: 50}}}, {name: type, in: query, schema: {type: string, enum: [public, internal], default: public}, description: type of communityId}], consumes: [application/json], responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/communities/recommended: {get: {summary: get list of recommended community, tags: [Community], security: [{BearerAuth: []}], description: "Get list of recommended community\n", parameters: [{name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 5}}}}], consumes: [application/json], responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/communities/top-trending: {get: {summary: get list of top trend community, tags: [Community], security: [{BearerAuth: []}], description: "Get list of top trend community\n", parameters: [{name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 5}}}}], consumes: [application/json], responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v4/communities/:communityId/users/roles: {post: {summary: Add roles to community users, tags: [Community], security: [{BearerAuth: []}], description: "Add roles to community users.\n", parameters: [{name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], consumes: [application/json], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {roles: {type: array, minItems: 1, maxItems: 100, items: {description: Role id, type: string, minLength: 1, maxLength: 100}}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds, roles]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: Remove roles from community users, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Remove roles from community users.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}, {name: communityId, in: path, required: true, schema: {type: string, minLength: 1, maxLength: 900}}], consumes: [application/x-www-form-urlencoded], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {roles: {type: array, minItems: 1, maxItems: 100, items: {description: Role id, type: string, minLength: 1, maxLength: 100}}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [userIds, roles]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.query: {post: {summary: query communities., tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "query comments.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {keyword: {type: string, minLength: 0, maxLength: 100}, tags: {type: array, minItems: 1, maxItems: 10, items: {type: string, minLength: 1, maxLength: 1000}}, filter: {type: string, enum: [all, member, notMember], default: all}, categoryId: {type: string, minLength: 1, maxLength: 50}, sortBy: {type: string, enum: [lastCreated, firstCreated, displayName], default: lastCreated}, isDeleted: {type: boolean, default: null, description: "isDeleted:\n  * `null(default)` - Show both community is actived and community is inactived.\n  * `true` - Show community is inactived only.\n  * `false` - Show community is actived only.\n"}, hasFlag: {type: boolean, default: null, description: "hasFlag:\n  * `null(default)` - Show all communities.\n  * `true` - Show only community has flagged post(or children post) or has flagged comment.\n  * `false` - Show only community has no flagged post(and children post) and has no flagged comment.\n"}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, minLength: 1, maxLength: 1000}}}}}}}}, responses: {'200000': {description: Community Users Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.create: {post: {summary: create a community., tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information of a community to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {displayName: {type: string, minLength: 1, maxLength: 1000}, isPublic: {type: boolean, default: true}, description: {type: string, minLength: 1, maxLength: 5000}, tags: {type: array, minItems: 1, maxItems: 10, items: {type: string, minLength: 1, maxLength: 1000}}, metadata: {type: object}, avatarFileId: {type: string, maxLength: 50, minLength: 1}, userIds: {type: array, minItems: 1, maxItems: 1000, items: {type: string, minLength: 1, maxLength: 900}}, categoryIds: {type: array, minItems: 1, maxItems: 10, items: {type: string, minLength: 1, maxLength: 50}}, isUniqueDisplayName: {type: boolean, default: false}, needApprovalOnPostCreation: {type: boolean, default: false}}, required: [displayName]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400315': {description: Data already exists, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400315, message: Data already exists}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.update: {post: {summary: update a community., tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "community information.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}, displayName: {type: string, minLength: 1, maxLength: 1000}, isPublic: {type: boolean}, description: {type: string, minLength: 0, maxLength: 5000}, tags: {type: array, minItems: 1, maxItems: 10, items: {type: string, minLength: 1, maxLength: 1000}}, metadata: {type: object}, avatarFileId: {type: string, maxLength: 50, minLength: 1}, categoryIds: {type: array, minItems: 1, maxItems: 10, items: {type: string, minLength: 1, maxLength: 50}}, isUniqueDisplayName: {type: boolean, default: false}, needApprovalOnPostCreation: {type: boolean, default: false}}, required: [communityId]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400300': {description: No permission to access this resource., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Forbidden error.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400315': {description: Data already exists, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400315, message: Data already exists}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.delete: {post: {summary: delete a community., tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "community information.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}}, required: [communityId]}}}}, responses: {'200000': {description: delete information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}, example: {status: success, data: {success: true}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.get: {post: {summary: get a community by ID., tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get a community by ID\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}, type: {type: string, enum: [public, internal], default: public, description: type of communityId}}, required: [communityId]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.join: {post: {summary: Join community by id, tags: [Community], description: "Join community by id\n", consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}}, required: [communityId]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.leave: {post: {summary: Leave community by id, tags: [Community], description: "Leave community by id\n", consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}}, required: [communityId]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400100': {description: Unauthorized, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: Unauthorized}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.queryUsers: {post: {summary: query community users, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "query community users.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}, memberships: {type: array, description: Membership type to filter (If not filter will return both banned user and member), minItems: 1, maxItems: 2, items: {type: string, enum: [banned, member]}}, roles: {type: array, description: Role to filter, minItems: 1, maxItems: 20, items: {type: string, minLength: 1, maxLength: 100}}, sortBy: {type: string, enum: [lastCreated, firstCreated], default: lastCreated}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, minLength: 1, maxLength: 1000}}}, search: {type: string, maxLength: 10000}, type: {type: string, enum: [public, internal], default: public, description: type of communityId}}, required: [communityId]}}}}, responses: {'200000': {description: Community Users Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.banUsers: {post: {summary: ban community users, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "ban community users.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 900}}}, required: [communityId, userIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400306': {description: Some users cannot be banned, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400306, message: Some users cannot be banned}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.unbanUsers: {post: {summary: unban community users, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "unban community users.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 900}}}, required: [communityId, userIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400316': {description: User is unbanned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400316, message: User is unbanned from a channel / community.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.getList: {post: {summary: get list of community, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get list of community\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}, type: {type: string, enum: [public, internal], default: public, description: type of communityId}}, required: [communityIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.getRecommendedList: {post: {summary: get list of recommended community, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get list of recommended community\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 5}}}}}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.getTopTrendingList: {post: {summary: get list of top trend community, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get list of top trend community\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 5}}}}}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.addUsers: {post: {summary: add community users, tags: [Community], description: "add community users\n", consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [communityId, userIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.removeUsers: {post: {summary: remove community users, tags: [Community], description: "remove community users\n", consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [communityId, userIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.assignRoleToUsers: {post: {summary: Add role to community users, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Add role to community users\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}, role: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [communityId, role, userIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.removeRoleFromUsers: {post: {summary: Remove role from community users, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Remove role from community users\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 900}, role: {type: string, minLength: 1, maxLength: 900}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [communityId, role, userIds]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community.getSelfPermission: {post: {summary: Get self permission in community, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get list of top trend community\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a community.\n", required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string}}}}}}, responses: {'200000': {description: Communities permission information for this user, content: {application/json: {schema: {type: object, properties: {isCreator: {type: boolean, example: false, description: Is this person create this community?}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/community.assignRolesToUsers: {post: {summary: Add roles to community users, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Add roles to community users.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 32}, roles: {type: array, minItems: 1, maxItems: 100, items: {description: Role id, type: string, minLength: 1, maxLength: 100}}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [communityId, userIds, roles]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/community.removeRolesFromUsers: {post: {summary: Remove roles from community users, tags: [Community], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Remove roles from community users.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {communityId: {type: string, minLength: 1, maxLength: 32}, roles: {type: array, minItems: 1, maxItems: 100, items: {description: Role id, type: string, minLength: 1, maxLength: 100}}, userIds: {type: array, minItems: 1, maxItems: 100, items: {type: string, minLength: 1, maxLength: 50}}}, required: [communityId, userIds, roles]}}}}, responses: {'200000': {description: Communities Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}, '400301': {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: Permission denied}}}}, '400304': {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/community-categories: {get: {summary: query community categories., tags: [CommunityCategory], security: [{BearerAuth: []}], description: "query community categories.\n", parameters: [{name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated, name], default: name}}, {name: isDeleted, in: query, schema: {type: boolean, default: null}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}], consumes: [application/json], responses: {'200000': {description: Community Categories Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, post: {summary: create a community categories., tags: [CommunityCategory], security: [{BearerAuth: []}], consumes: [application/json], requestBody: {description: "information of a community category to be created.\n", required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, maxLength: 1000}, metadata: {type: object}, avatarFileId: {type: string, maxLength: 50}}, required: [name]}}}}, responses: {'200000': {description: Community Categories Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/community-categories/{categoryId}': {get: {summary: get a community category., tags: [CommunityCategory], security: [{BearerAuth: []}], description: "get a community category.\n", parameters: [{name: categoryId, in: path, required: true, schema: {type: string, maxLength: 50}}], consumes: [application/json], responses: {'200000': {description: Community Categories Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: update a community categories., tags: [CommunityCategory], security: [{BearerAuth: []}], parameters: [{name: categoryId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "community category information.\n", required: true, content: {application/json: {schema: {type: object, properties: {categoryId: {type: string, maxLength: 50}, name: {type: string, maxLength: 1000}, metadata: {type: object}, avatarFileId: {type: string, maxLength: 50}}, required: [categoryId]}}}}, responses: {'200000': {description: Community Categories Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: delete a community category., tags: [CommunityCategory], security: [{BearerAuth: []}], parameters: [{name: categoryId, in: path, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "community category information.\n", required: true, content: {application/json: {schema: {type: object, properties: {categoryId: {type: string, maxLength: 50}}, required: [categoryId]}}}}, responses: {'200000': {description: community category information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/community-categories/list: {get: {summary: get list of community category., tags: [CommunityCategory], security: [{BearerAuth: []}], description: "Get list of community category.\n", parameters: [{name: categoryIds, in: query, collectionFormat: multi, schema: {type: array, maxItems: 100, items: {type: string, maxLength: 50}}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: Community Categories Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community-category.query: {post: {summary: query community categories., tags: [CommunityCategory], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "query community categories.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {sortBy: {type: string, enum: [lastCreated, firstCreated, name], default: name}, isDeleted: {type: boolean, default: null}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}}}}}, responses: {'200000': {description: Community Categories Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community-category.get: {post: {summary: get a community category., tags: [CommunityCategory], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get a community category.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of a community category.\n", required: true, content: {application/json: {schema: {type: object, properties: {categoryId: {type: string, maxLength: 50}}, required: [categoryId]}}}}, responses: {'200000': {description: Community Categories Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/community-category.getList: {post: {summary: get list of community category., tags: [CommunityCategory], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get list of community category.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "information of community category.\n", required: true, content: {application/json: {schema: {type: object, properties: {categoryIds: {type: array, maxItems: 100, items: {type: string, maxLength: 50}}}, required: [categoryIds]}}}}, responses: {'200000': {description: Community Categories Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400311': {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/content-feeds: {get: {summary: Get list of contents., tags: [ContentFeed], security: [{BearerAuth: []}], description: "Get paginable list of contents.\n", parameters: [{name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated, lastUpdated, firstUpdated], default: lastCreated}}, {name: hasFlag, in: query, schema: {type: boolean, default: null}, description: "hasFlag:\n  * `null(default)` - Show all contents.\n  * `true` - Show only flagged content or has flagged comment.\n  * `false` - Show only no flagged content and has no flagged comment.\n"}, {name: isDeleted, in: query, schema: {type: boolean, default: null}}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, maxLength: 1000}}}}], responses: {'200000': {description: Content Feed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/content-feed.query: {post: {summary: Get list of contents., tags: [ContentFeed], security: [{SocketAuth: []}], description: "Get paginable list of contents.\n", requestBody: {description: "Condition of querying and pagination.\n", required: true, content: {application/json: {schema: {type: object, properties: {sortBy: {type: string, enum: [lastCreated, firstCreated, lastUpdated, firstUpdated], default: lastCreated}, isDeleted: {type: boolean, default: null}, hasFlag: {type: boolean, default: null, description: "hasFlag:\n  * `null(default)` - Show all contents.\n  * `true` - Show only flagged content or has flagged comment.\n  * `false` - Show only no flagged content and has no flagged comment.\n"}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string}}}}}}}}, responses: {'200000': {description: Content Feed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/video-streaming: {post: {summary: create a video streaming, tags: [VideoStreaming], security: [{BearerAuth: []}], consumes: [application/json], requestBody: {description: "Information of video streaming to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {title: {type: string, maxLength: 1000}, description: {type: string, maxLength: 5000}, thumbnailFileId: {type: string, maxLength: 50}, metadata: {type: object}, isSecure: {type: boolean, default: false}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}}, required: [title]}}}}, responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, get: {summary: query list of video streaming, tags: [VideoStreaming], security: [{BearerAuth: []}], parameters: [{name: isLive, in: query, schema: {type: boolean, default: false}}, {name: statuses, in: query, collectionFormat: multi, schema: {type: array, maxItems: 10, items: {type: string, enum: [idle, live, ended, recorded]}}, description: "Status of livestreaming  \n  * idle - streaming is just created  \n  * live - streamer is streaming now or streamer is reconnecting  \n  * ended - streamer stop streaming or streamer disconnect and not connect back in time period  \n  * recorded - live stream recordings available \n"}, {name: userPublicIds, in: query, collectionFormat: multi, schema: {type: array, maxItems: 100, items: {type: string, maxLength: 50}}}, {name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated]}}, {name: isDeleted, in: query, schema: {type: boolean, default: null}, description: "isDeleted:\n  * `null(default)` - Show both video streaming is activated and video streaming is inactivated.\n  * `true` - Show video streaming is inactivated only.\n  * `false` - Show video streaming is activated only.\n"}, {name: options, in: query, style: deepObject, schema: {type: object, properties: {limit: {type: integer}, skip: {type: integer}, token: {type: string, maxLength: 1000}}}}], consumes: [application/json], responses: {'200000': {description: list of video streaming, content: {application/json: {schema: {properties: {results: {type: object, properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v3/video-streaming/{streamId}': {get: {summary: get a video streaming, tags: [VideoStreaming], security: [{BearerAuth: []}], parameters: [{in: path, name: streamId, required: true, schema: {type: string, maxLength: 50}, description: Stream id to update}], consumes: [application/json], responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: update a video streaming, tags: [VideoStreaming], security: [{BearerAuth: []}], parameters: [{in: path, name: streamId, required: true, schema: {type: string, maxLength: 50}, description: Stream id to update}], consumes: [application/json], requestBody: {description: "Information of video streaming to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {title: {type: string, maxLength: 1000}, description: {type: string, maxLength: 5000}, thumbnailFileId: {type: string, maxLength: 50}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}}, required: [title]}}}}, responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: delete a video streaming, tags: [VideoStreaming], security: [{BearerAuth: []}], description: "Delete a video streaming\n", parameters: [{in: path, name: streamId, required: true, schema: {type: string, maxLength: 50}, description: Stream id to update}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: video streaming information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/video-streaming/:streamId/streaming-url: {delete: {summary: Dispose a video streaming, tags: [VideoStreaming], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "This API will update streaming status to `ended` and dispose apsara streaming url\n", parameters: [{in: path, name: streamId, required: true, schema: {type: string, maxLength: 50}, description: Stream id to update}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}, responses: null}}}, /sockets/v3/video-streaming.create: {post: {summary: create a video streaming, tags: [VideoStreaming], security: [{SocketAuth: []}], requestBody: {description: "Information of video streaming to be created\n", required: true, content: {application/json: {schema: {type: object, properties: {description: {type: string, maxLength: 5000}, thumbnailFileId: {type: string, maxLength: 50}, metadata: {type: object}, title: {type: string, maxLength: 1000}, isSecure: {type: boolean, default: false}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}}, required: [title]}}}}, responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/video-streaming.update: {post: {summary: update a video streaming, tags: [VideoStreaming], security: [{SocketAuth: []}], requestBody: {description: "Information of video streaming to be updated\n", required: true, content: {application/json: {schema: {type: object, properties: {streamId: {type: string, maxLength: 50}, description: {type: string, maxLength: 5000}, thumbnailFileId: {type: string, maxLength: 50}, metadata: {type: object}, title: {type: string, maxLength: 1000}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}}, required: [title]}}}}, responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/video-streaming.delete: {post: {summary: delete a video streaming, tags: [VideoStreaming], security: [{SocketAuth: []}], description: "Delete a video streaming\n", requestBody: {description: "information of a video streaming to be deleted.\n", required: true, content: {application/json: {schema: {type: object, properties: {streamId: {type: string, maxLength: 50}}, required: [streamId]}}}}, responses: {'200000': {description: video streaming information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {success: {type: boolean}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/video-streaming.query: {post: {summary: query list of video streaming, tags: [VideoStreaming], security: [{SocketAuth: []}], requestBody: {description: "condition for querying\n", required: true, content: {application/json: {schema: {type: object, properties: {isLive: {type: boolean, default: false}, statuses: {type: array, items: {type: string, enum: [idle, live, ended, recorded]}, description: "Status of livestreaming  \n  * idle - streaming is just created  \n  * live - streamer is streaming now or streamer is reconnecting  \n  * ended - streamer stop streaming or streamer disconnect and not connect back in time period  \n  * recorded - live stream recordings available\n"}, userPublicIds: {type: array, maxItems: 100, items: {type: string, maxLength: 50}}, sortBy: {type: string, enum: [lastCreated, firstCreated]}, isDeleted: {type: boolean, default: null, description: "isDeleted:\n  * `null(default)` - Show both video streaming is activated and video streaming is inactivated.\n  * `true` - Show video streaming is inactivated only.\n  * `false` - Show video streaming is activated only.\n"}, options: {type: object, properties: {after: {type: integer, minimum: 1, maximum: 100}, first: {type: integer, minimum: 1, maximum: 100}, before: {type: integer, minimum: 1, maximum: 100}, last: {type: integer, minimum: 1, maximum: 100}, token: {type: string, maxLength: 1000}}}}}}}}, responses: {'200000': {description: list of video streaming, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {results: {type: object, properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/video-streaming.get: {post: {summary: get a video streaming, tags: [VideoStreaming], security: [{SocketAuth: []}], requestBody: {description: "Information of video streaming\n", required: true, content: {application/json: {schema: {type: object, properties: {streamId: {type: string, maxLength: 50}}, required: [streamId]}}}}, responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/video-streaming.dispose: {post: {summary: dispose a video streaming, tags: [VideoStreaming], security: [{SocketAuth: []}], description: "This API will update streaming status to `ended` and dispose apsara streaming url\n", requestBody: {description: "information of a video streaming to be deleted.\n", required: true, content: {application/json: {schema: {type: object, properties: {streamId: {type: string, maxLength: 50}}, required: [streamId]}}}}, responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /callbacks/video-streaming.didStart: {get: {tags: [VideoStreaming], security: [{SocketAuth: []}], description: "Publish this event to __every user of network__ after a streamer started streaming\n", responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/video-streaming.didStop: {get: {tags: [VideoStreaming], security: [{SocketAuth: []}], description: "Publish this event to __every user of network__ after a streamer stopped streaming\n", responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /callbacks/video-streaming.didRecord: {get: {tags: [VideoStreaming], security: [{SocketAuth: []}], description: "Publish this event to __every user of network__ after a streaming is recorded\n", responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /api/v3/user-event/video-streaming: {post: {summary: create a user event for video streaming, tags: [UserEvent], security: [{BearerAuth: []}], consumes: [application/json], requestBody: {description: 'A group of user activity on startTime, endTime and watchSeconds.', required: true, content: {application/json: {schema: {required: [signature, nonceStr, timestamp, streams], properties: {signature: {description: check detail signature algorithm at https://ekoapp.atlassian.net/wiki/spaces/UP/pages/1685750282/Billing#Signature-Algorithm%3A, type: string}, nonceStr: {description: 'unique string for each request, max length 50', type: string}, timestamp: {description: timestamp string in UTC format, type: string, example: '2021-03-10T03:07:16.127Z'}, streams: {type: array, items: {type: object, required: [streamId, startTime, endTime, watchSeconds, resolution], properties: {sessionId: {description: 'unique sessionId for each user event, max length 50', type: string}, streamId: {description: 'streamId of video streaming instance, max length 50', type: string}, startTime: {description: timestamp string in UTC format, type: string, example: '2021-03-10T03:07:16.127Z'}, endTime: {description: timestamp string in UTC format, type: string, example: '2021-03-10T03:07:16.127Z'}, watchSeconds: {description: user's watching time in seconds, type: number, example: 120}}}}}}}}}, responses: {'200000': {description: event is processed successfully, content: {application/json: {schema: {properties: {ok: {type: boolean, example: true}}}}}}, '500000': {description: Timestamp information mismatch, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {code: '500000,', message: Information mismatch, status: error}}}}}}}, /api/v4/me/following/:userId: {post: {summary: Follow user., tags: [Follow], security: [{BearerAuth: []}], description: "Follow user information\n", parameters: [{name: userId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Follow Response Object, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: Unfollow or Cancel follow request, tags: [Follow], security: [{BearerAuth: []}], description: "Unfollow or Cancel follow request\n", parameters: [{name: userId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Follow Response Object, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v4/me/followers/:userId: {post: {summary: Accept follow request., tags: [Follow], security: [{BearerAuth: []}], description: "Accept follow request.\n", parameters: [{name: userId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Follow Response Object, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: Delete follower., tags: [Follow], security: [{BearerAuth: []}], description: "Delete follower.\n", parameters: [{name: userId, in: path, required: true, schema: {type: string}}], consumes: [application/json], responses: {'200000': {description: Follow Response Object, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v4/me/followers: {get: {summary: Get my follower list, tags: [Follow], security: [{BearerAuth: []}], description: "Get follower information (pagination supported)\n", parameters: [{name: status, in: query, schema: {type: string, enum: [all, pending, accepted], default: all}}, {name: limit, in: query, schema: {type: integer, minimum: 1, maximum: 100, default: 10}}, {name: token, in: query, schema: {type: string, minLength: 1, maxLength: 100}}], consumes: [application/json], responses: {'200000': {description: Follows List, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v4/users/{userId}/followers': {get: {summary: Get other follower list, tags: [Follow], security: [{BearerAuth: []}], description: "Get follower information (pagination supported)\n", parameters: [{name: userId, in: path, required: true, schema: {type: string, maxLength: 900}}, {name: status, in: query, schema: {type: string, enum: [all, pending, accepted], default: all}}, {name: limit, in: query, schema: {type: integer, minimum: 1, maximum: 100, default: 10}}, {name: token, in: query, schema: {type: string, minLength: 1, maxLength: 100}}], consumes: [application/json], responses: {'200000': {description: Follows List, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v4/me/following: {get: {summary: Get my following list., tags: [Follow], security: [{BearerAuth: []}], description: "Get following information (pagination supported)\n", parameters: [{name: status, in: query, schema: {type: string, enum: [all, pending, accepted], default: all}}, {name: limit, in: query, schema: {type: integer, minimum: 1, maximum: 100, default: 10}}, {name: token, in: query, schema: {type: string, minLength: 1, maxLength: 100}}], consumes: [application/json], responses: {'200000': {description: Follows List, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v4/users/{userId}/following': {get: {summary: Get other following list., tags: [Follow], security: [{BearerAuth: []}], description: "Get following information (pagination supported)\n", parameters: [{name: userId, in: path, required: true, schema: {type: string, maxLength: 900}}, {name: status, in: query, schema: {type: string, enum: [all, pending, accepted], default: all}}, {name: limit, in: query, schema: {type: integer, minimum: 1, maximum: 100, default: 10}}, {name: token, in: query, schema: {type: string, minLength: 1, maxLength: 100}}], consumes: [application/json], responses: {'200000': {description: Follows List, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v4/me/followInfo: {get: {summary: Get my follow information., tags: [Follow], security: [{BearerAuth: []}], description: "Get my follow information.\n", consumes: [application/json], responses: {'200000': {description: Follow Count, content: {application/json: {schema: {type: object, properties: {followCounts: {type: array, items: {type: object, properties: {userId: {type: string}, followerCount: {type: integer}, followingCount: {type: integer}, pendingCount: {type: integer}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v4/users/{userId}/followInfo': {get: {summary: Get other follow information., tags: [Follow], security: [{BearerAuth: []}], description: "Get other follow information.\n", parameters: [{name: userId, in: path, required: true, schema: {type: string, maxLength: 900}}], consumes: [application/json], responses: {'200000': {description: Follow Information, content: {application/json: {schema: {type: object, required: [followCounts], properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, followCounts: {type: array, items: {type: object, properties: {userId: {type: string}, followerCount: {type: integer}, followingCount: {type: integer}, pendingCount: {type: integer}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v4/users/{userId}': {delete: {summary: Delete user, tags: [User], security: [{BearerAuth: []}], parameters: [{in: path, name: userId, required: true, schema: {type: string, minimum: 1, maximum: 50}, description: User public id}], consumes: [application/json], description: "Delete user from system. User display name will be replaced with \"Deleted user\".\n\nContent that is created from the user will be able to be wiped depend on the options.\n\n**This API allow only admin user to call**\n", requestBody: {content: {application/json: {schema: {type: object, properties: {deleteAll: {type: boolean, description: 'true - it will hard delete this user created channels, messages, comments, posts, polls, reactions after user is deleted.', default: false}, markMessageDeleted: {type: boolean, description: true - it will hard delete this user messages after user is deleted., default: false}, hardDeletePost: {type: boolean, description: true - it will hard delete this user posts after user is deleted., default: false}, hardDeleteComment: {type: boolean, description: true - it will hard delete this user comments after user is deleted., default: false}}}}}}, responses: {'200': {description: return success:'true' when deletion is successful, content: {application/json: {schema: {type: object, properties: {success: {type: boolean, example: true}}}}}}, '400': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: User is already deleted}}}}, '404': {description: User Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: User Not Found.}}}}, '500': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, '/api/v4/me/flags/{userId}': {post: {summary: Report user, tags: [User], security: [{BearerAuth: []}], parameters: [{in: path, name: userId, required: true, schema: {type: string, minimum: 1, maximum: 50}, description: User public id}], consumes: [application/json], description: "Report user by user id.\n", responses: {'200': {content: {application/json: {schema: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '404': {description: User Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: User Not Found.}}}}, '500': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, delete: {summary: Unreported user, tags: [User], security: [{BearerAuth: []}], parameters: [{in: path, name: userId, required: true, schema: {type: string, minimum: 1, maximum: 50}, description: User public id}], consumes: [application/json], description: "Unreported user by user id.\n", responses: {'200': {content: {application/json: {schema: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}, '404': {description: User Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: User Not Found.}}}}, '500': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/following.create: {post: {summary: Follow user., tags: [Follow], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Follow user information\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "User to be follow.\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 900}}, required: [userId]}}}}, responses: {'200000': {description: Follow Response Object, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/following.delete: {post: {summary: Unfollow or Cancel follow request, tags: [Follow], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Unfollow or Cancel follow request\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "User to be unfollow or cancel follow request.\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 900}}, required: [userId]}}}}, responses: {'200000': {description: Follow Response Object, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/follower.accept: {post: {summary: Accept follow request., tags: [Follow], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Accept follow request.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "User to be accepted.\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 900}}, required: [userId]}}}}, responses: {'200000': {description: Follow Response Object, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/follower.delete: {post: {summary: Delete follower., tags: [Follow], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Delete follower.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "User of follower to be deleted\n", required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 900}}, required: [userId]}}}}, responses: {'200000': {description: Follow Response Object, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '400400': {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/followers.getList: {post: {summary: Get follower list, tags: [Follow], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get follower information (pagination supported)\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Request body\n", content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 900}, status: {type: string, enum: [all, pending, accepted], default: all}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, minLength: 1, maxLength: 100}}}}}}}}, responses: {'200000': {description: Follows List, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/following.getList: {post: {summary: Get following list., tags: [Follow], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get following information (pagination supported)\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "Request body\n", content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 900}, status: {type: string, enum: [all, pending, accepted], default: all}, options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, minLength: 1, maxLength: 100}}}}}}}}, responses: {'200000': {description: Follows List, content: {application/json: {schema: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, paging: {type: object, properties: {next: {type: string}, prev: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/followInfo.get: {post: {summary: Get follow information., tags: [Follow], securityDefinition: {ApiKeyAuth: {type: apiKey, in: header, name: Authorization}}, description: "Get other follow information.\n", parameters: [{name: Authorization, in: header, value: 'Bearer {{accessToken}}', required: true, schema: {type: string}}, {name: Content-Type, in: header, value: application/x-www-form-urlencoded, required: true, schema: {type: string}}], consumes: [application/x-www-form-urlencoded], requestBody: {description: "User to be get follow information\n", content: {application/json: {schema: {type: object, properties: {userId: {type: string, maxLength: 900}}}}}}, responses: {'200000': {description: Follow Information, content: {application/json: {schema: {type: object, required: [followCounts], properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, followCounts: {type: array, items: {type: object, properties: {userId: {type: string}, followerCount: {type: integer}, followingCount: {type: integer}, pendingCount: {type: integer}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v4/me/global-feeds: {get: {summary: Get global feed., tags: [GlobalFeed], security: [{BearerAuth: []}], description: "Get paginable list of active posts (not deleted) from users and community.\n", parameters: [{name: limit, in: query, schema: {type: integer, minimum: 1, maximum: 100, default: 10}}, {name: token, in: query, schema: {type: string, minLength: 1, maxLength: 100}}, {name: dataTypes, in: query, collectionFormat: multi, schema: {type: array, minItems: 1, maxItems: 4, items: {type: string, enum: [video, image, file, liveStream]}, description: post data type to filter}}], consumes: [application/x-www-form-urlencoded], responses: {'200000': {description: Global Feed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v4/global-feed.query: {post: {summary: Get global feed., tags: [GlobalFeed], security: [{SocketAuth: []}], description: "Get paginable list of active posts (not deleted) from users and community.\n", requestBody: {description: "Condition of querying and pagination.\n", required: true, content: {application/json: {schema: {type: object, properties: {options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string}, dataTypes: {type: array, minItems: 1, maxItems: 4, items: {type: string, enum: [video, image, file, liveStream], description: post data type to filter}}}}}}}}}, responses: {'200000': {description: Global Feed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/network-settings: {put: {deprecated: true, summary: Update network setting configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Update network setting configuration.\n", consumes: [application/json], requestBody: {description: "information for a network setting\n", required: true, content: {application/json: {schema: {type: object, properties: {networkId: {type: string}, tierHandler: {type: string, maxLength: 200}, socialEnabled: {type: boolean}, videoStreamingEnabled: {type: boolean}, chatEnabled: {type: boolean}, isWhitelistEnabled: {type: boolean}}}}}}, responses: {'200000': {description: network setting configuration, content: {application/json: {schema: {type: object, properties: {videoStreaming: {type: object, properties: {enabled: {type: boolean}}}, chat: {type: object, properties: {enabled: {type: boolean}, mention: {type: object, properties: {isAllowMentionedChannelEnabled: {type: boolean, default: true}}}}}, social: {type: object, properties: {enabled: {type: boolean}, userPrivacySetting: {type: string, enum: [public, private]}, isFollowWithRequestEnabled: {type: boolean, default: false}, isAllowEditPostWhenReviewingEnabled: {type: boolean}, globalFeed: {type: object, properties: {showOnlyMyFeed: {type: boolean, default: false}, showMyPost: {type: boolean}, showEveryonePost: {type: boolean}, showCommunityPost: {type: boolean}, showFollowingPost: {type: boolean}}}}}, webhook: {type: object, properties: {enabled: {type: boolean}}}, moderation: {type: object, properties: {isWhitelistEnabled: {type: boolean}}}, tierHandler: {type: string}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/network-settings/social: {put: {summary: Update social configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Update social configuration.\n", consumes: [application/json], requestBody: {description: "information for a network setting\n", required: true, content: {application/json: {schema: {type: object, properties: {userPrivacySetting: {type: string, enum: [public, private]}, isFollowWithRequestEnabled: {type: boolean, default: false}, isAllowEditPostWhenReviewingEnabled: {type: boolean}, showOnlyMyFeed: {type: boolean, default: false}, showMyPost: {type: boolean}, showEveryonePost: {type: boolean}, showCommunityPost: {type: boolean}, showFollowingPost: {type: boolean}, isAllowMentionedChannelEnabled: {type: boolean}}}}}}, responses: {'200000': {description: Social configuration, content: {application/json: {schema: {type: object, properties: {enabled: {type: boolean}, userPrivacySetting: {type: string, enum: [public, private]}, isFollowWithRequestEnabled: {type: boolean, default: false}, isAllowEditPostWhenReviewingEnabled: {type: boolean}, globalFeed: {type: object, properties: {showOnlyMyFeed: {type: boolean, default: false}, showMyPost: {type: boolean}, showEveryonePost: {type: boolean}, showCommunityPost: {type: boolean}, showFollowingPost: {type: boolean}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, get: {summary: Get social configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Get social configuration.\n", consumes: [application/json], responses: {'200000': {description: Social configuration, content: {application/json: {schema: {type: object, properties: {enabled: {type: boolean}, userPrivacySetting: {type: string, enum: [public, private]}, isFollowWithRequestEnabled: {type: boolean, default: false}, isAllowEditPostWhenReviewingEnabled: {type: boolean}, globalFeed: {type: object, properties: {showOnlyMyFeed: {type: boolean, default: false}, showMyPost: {type: boolean}, showEveryonePost: {type: boolean}, showCommunityPost: {type: boolean}, showFollowingPost: {type: boolean}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/network-settings/webhook: {put: {summary: Update webhook configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Update webhook configuration.\n", consumes: [application/json], requestBody: {description: "information for a network setting\n", required: true, content: {application/json: {schema: {type: object, properties: {webhookEnabled: {type: boolean, description: "`true` - User can register webhook for network and will receive a webhook.\n`false` - User won't be able to register webhook and won't receive a webhook.\n"}}}}}}, responses: {'200000': {description: Webhook configuration, content: {application/json: {schema: {type: object, properties: {enabled: {type: boolean}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, get: {summary: Get webhook configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Get webhook configuration.\n", consumes: [application/json], responses: {'200000': {description: Webhook configuration, content: {application/json: {schema: {type: object, properties: {enabled: {type: boolean}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/network-settings/chat: {put: {summary: Update chat network setting configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Update chat network setting configuration.\n", consumes: [application/json], requestBody: {description: "information for a network setting\n", required: true, content: {application/json: {schema: {type: object, properties: {isAllowMentionedChannelEnabled: {type: boolean, default: true}}}}}}, responses: {'200000': {description: Chat configuration, content: {application/json: {schema: {type: object, properties: {enabled: {type: boolean}, mention: {type: object, properties: {isAllowMentionedChannelEnabled: {type: boolean, default: true}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, get: {summary: Get chat network setting configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Get chat network setting configuration.\n", consumes: [application/json], responses: {'200000': {description: Chat configuration, content: {application/json: {schema: {type: object, properties: {enabled: {type: boolean}, mention: {type: object, properties: {isAllowMentionedChannelEnabled: {type: boolean, default: true}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/network-settings/moderation: {get: {summary: Get moderation configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Using for get network moderation configuration.\n", consumes: [application/json], responses: {'200000': {description: Moderation configuration, content: {application/json: {schema: {type: object, properties: {isWhitelistEnabled: {type: boolean}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: Update moderation configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Update moderation configuration.\n", consumes: [application/json], requestBody: {description: "information for a network setting\n", required: true, content: {application/json: {schema: {type: object, properties: {isWhitelistEnabled: {type: boolean, description: "`true` - Enabled whitelist validation.\n`false` - Disabled whitelist validation.\n"}}}}}}, responses: {'200000': {description: Moderation configuration, content: {application/json: {schema: {type: object, properties: {isWhitelistEnabled: {type: boolean}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/network-settings/feed-setting: {get: {summary: Get feed setting check configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Using for get network feed setting check configuration.\n", consumes: [application/json], responses: {'200000': {description: Feed setting check configuration, content: {application/json: {schema: {description: The content, type: object, properties: {feedSettings: {type: array, items: {type: object, properties: {feedType: {type: string}, contentSettings: {type: array, items: {type: object, properties: {contentType: {type: string}, allowed: {type: boolean}, maxDurationSeconds: {type: number}, transcodeConfig: {type: object, properties: {maxResolution: {type: string}, minResolution: {type: string}}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}, put: {summary: Update feed setting check configuration., tags: [Network Setting], security: [{BearerAuth: []}], description: "Update feed setting check configuration.\n", consumes: [application/json], requestBody: {description: "information for a network setting\n", required: true, content: {application/json: {schema: {type: object, properties: {post: {description: Feed type post, type: object, optional: true, properties: {video: {description: Content Check video schema, type: object, properties: {allowed: {type: boolean, optional: true}, transcodeConfig: {type: object, properties: {maxResolution: {type: string, enum: [1080p, 720p, 480p, 360p], optional: true}, minResolution: {type: string, enum: [1080p, 720p, 480p, 360p], optional: true}}}, maxDurationSeconds: {type: number, format: int32, minimum: 1, maximum: 7200, optional: true}}}}}, message: {description: Feed type message, type: object, optional: true, properties: {video: {description: Content Check video schema, type: object, properties: {allowed: {type: boolean, optional: true}, transcodeConfig: {type: object, properties: {maxResolution: {type: string, enum: [1080p, 720p, 480p, 360p], optional: true}, minResolution: {type: string, enum: [1080p, 720p, 480p, 360p], optional: true}}}, maxDurationSeconds: {type: number, format: int32, minimum: 1, maximum: 7200, optional: true}}}}}}}}}}, responses: {'200000': {description: Feed setting check configuration, content: {application/json: {schema: {description: The content, type: object, properties: {feedSettings: {type: array, items: {type: object, properties: {feedType: {type: string}, contentSettings: {type: array, items: {type: object, properties: {contentType: {type: string}, allowed: {type: boolean}, maxDurationSeconds: {type: number}, transcodeConfig: {type: object, properties: {maxResolution: {type: string}, minResolution: {type: string}}}}}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/network-settings/tier: {put: {summary: Update network tier and feature, tags: [Network Setting], security: [{BearerAuth: []}], description: "Update network tier and feature\n# Authorization token is a Cognito client_credentials access token (client is amity-portal and scope is asc/network.write)\n", parameters: [{name: Content-Type, in: header, value: application/json, required: true, schema: {type: string}}], consumes: [application/json], requestBody: {description: "information for a network setting\n", required: true, content: {application/json: {schema: {type: object, properties: {networkIds: {type: array, description: Array of networkId, min: 1, max: 10, items: {type: string}}, tierHandler: {type: string, max: 200, enum: [asc-basic, asc-advance, asc-max, asc-fixed-term-basic, asc-fixed-term-advance, asc-fixed-term-max], description: Network tier}}}}}}, responses: {'200000': {description: network setting configuration, content: {application/json: {schema: {type: object, properties: {videoStreaming: {type: object, properties: {enabled: {type: boolean}}}, chat: {type: object, properties: {enabled: {type: boolean}, mention: {type: object, properties: {isAllowMentionedChannelEnabled: {type: boolean, default: true}}}}}, social: {type: object, properties: {enabled: {type: boolean}, userPrivacySetting: {type: string, enum: [public, private]}, isFollowWithRequestEnabled: {type: boolean, default: false}, isAllowEditPostWhenReviewingEnabled: {type: boolean}, globalFeed: {type: object, properties: {showOnlyMyFeed: {type: boolean, default: false}, showMyPost: {type: boolean}, showEveryonePost: {type: boolean}, showCommunityPost: {type: boolean}, showFollowingPost: {type: boolean}}}}}, webhook: {type: object, properties: {enabled: {type: boolean}}}, moderation: {type: object, properties: {isWhitelistEnabled: {type: boolean}}}, tierHandler: {type: string}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/allowlists: {get: {summary: Get list of allowed words, tags: [Moderation], security: [{BearerAuth: []}], parameters: [{name: regex, in: query, schema: {type: string}, description: search keyword from start}, {name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated]}}, {name: options, in: query, style: deepObject, explode: true, schema: {type: object, properties: {after: {type: number}, before: {type: number}, limit: {type: number, description: limit amount of result}, token: {type: string, description: pagination token}}}}], responses: {'200000': {description: Criteria info, content: {application/json: {schema: {type: object, properties: {results: {type: array, items: {type: object, properties: {ruleId: {type: string}, regex: {type: string}, isDeleted: {type: boolean}, isEnabled: {type: boolean}, createdAt: {type: string}, updatedAt: {type: string}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v3/blocklists: {get: {summary: Get list of banned words, tags: [Moderation], security: [{BearerAuth: []}], parameters: [{name: regex, in: query, schema: {type: string}, description: search keyword from start}, {name: sortBy, in: query, schema: {type: string, enum: [firstCreated, lastCreated]}}, {name: options, in: query, style: deepObject, explode: true, schema: {type: object, properties: {after: {type: number}, before: {type: number}, limit: {type: number, description: limit amount of result}, token: {type: string, description: pagination token}}}}], responses: {'200000': {description: Criteria info, content: {application/json: {schema: {type: object, properties: {results: {type: array, items: {type: object, properties: {ruleId: {type: string}, regex: {type: string}, isMatchExactWord: {type: boolean, description: word have to be equally match}, isDeleted: {type: boolean}, isEnabled: {type: boolean}, createdAt: {type: string}, updatedAt: {type: string}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/network-settings.getSocial: {post: {summary: Get social configuration., tags: [Network Setting], security: [{SocketAuth: []}], description: "Get social configuration.\n", responses: {'200000': {description: Social configuration, content: {application/json: {schema: {type: object, properties: {enabled: {type: boolean}, userPrivacySetting: {type: string, enum: [public, private]}, isFollowWithRequestEnabled: {type: boolean, default: false}, isAllowEditPostWhenReviewingEnabled: {type: boolean}, globalFeed: {type: object, properties: {showOnlyMyFeed: {type: boolean, default: false}, showMyPost: {type: boolean}, showEveryonePost: {type: boolean}, showCommunityPost: {type: boolean}, showFollowingPost: {type: boolean}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v3/network-settings.getChat: {post: {summary: Get chat network setting configuration., tags: [Network Setting], security: [{SocketAuth: []}], description: "Get chat network setting configuration.\n", responses: {'200000': {description: Chat configuration, content: {application/json: {schema: {type: object, properties: {enabled: {type: boolean}, mention: {type: object, properties: {isAllowMentionedChannelEnabled: {type: boolean, default: true}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /realtime/community.created: {get: {summary: community created, tags: [Realtime], description: "Event has occurred when community was created\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The community ID.}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/community.updated: {get: {summary: community updated, tags: [Realtime], description: "Event has occurred when community was updated\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The community ID.}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/community.deleted: {get: {summary: community deleted, tags: [Realtime], description: "Event has occurred when community was deleted\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The community ID.}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/community.joined: {get: {summary: joined community, tags: [Realtime], description: "Event has occurred when joined community\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The community ID.}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/community.left: {get: {summary: left community, tags: [Realtime], description: "Event has occurred when left community\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The community ID.}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/community.userAdded: {get: {summary: community added user, tags: [Realtime], description: "Event has occurred when user was added to community\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The community ID.}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/community.userRemoved: {get: {summary: community removed user, tags: [Realtime], description: "Event has occurred when user was removed from community\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The community ID.}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/community.userChanged: {get: {summary: community changed user, tags: [Realtime], description: "Event has occurred when the number of user was changed in community\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The community ID.}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/community.userBanned: {get: {summary: community banned user, tags: [Realtime], description: "Event has occurred when user was banned from community\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The community ID.}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/community.userUnbanned: {get: {summary: community userUnbanned, tags: [Realtime], description: "Event has occurred when user was unbanned from community\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The community ID.}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/post.created: {get: {summary: post created, tags: [Realtime], description: "Event has occurred when post was created\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The post ID.}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/post.updated: {get: {summary: post updated, tags: [Realtime], description: "Event has occurred when post was updated\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The post ID.}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/post.deleted: {get: {summary: post deleted, tags: [Realtime], description: "Event has occurred post was deleted\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The post ID.}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/post.approved: {get: {summary: post approved, tags: [Realtime], description: "Event has occurred when post was approved\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {allOf: [{allOf: [{type: object, properties: {id: {type: string, description: The post ID.}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}, {type: object, properties: {data: {type: object, properties: {flaggedUserId: {type: string, description: ID of the User has been flagged}}}}}]}}}}}}}, /realtime/post.declined: {get: {summary: post declined, tags: [Realtime], description: "Event has occurred when post was declined\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {allOf: [{allOf: [{type: object, properties: {id: {type: string, description: The post ID.}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}, {type: object, properties: {data: {type: object, properties: {flaggedUserId: {type: string, description: ID of the User has been flagged}}}}}]}}}}}}}, /realtime/post.flagged: {get: {summary: post flagged, tags: [Realtime], description: "Event has occurred when post was flagged\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {allOf: [{allOf: [{type: object, properties: {id: {type: string, description: The post ID.}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}, {type: object, properties: {data: {type: object, properties: {flaggedUserId: {type: string, description: ID of the User has been flagged}}}}}]}}}}}}}, /realtime/post.unflagged: {get: {summary: post unflagged, tags: [Realtime], description: "Event has occurred when post was unflagged\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {allOf: [{allOf: [{type: object, properties: {id: {type: string, description: The post ID.}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}, {type: object, properties: {data: {type: object, properties: {flaggedUserId: {type: string, description: ID of the User has been flagged}}}}}]}}}}}}}, /realtime/post.addReaction: {get: {summary: add reaction to post, tags: [Realtime], description: "Event has occurred when a reaction is added to post\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {allOf: [{allOf: [{type: object, properties: {id: {type: string, description: The post ID.}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}, {type: object, properties: {data: {type: object, properties: {reactor: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}}}]}}}}}}}, /realtime/post.removeReaction: {get: {summary: remove reaction from post, tags: [Realtime], description: "Event has occurred when a reaction is removed from post\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {allOf: [{allOf: [{type: object, properties: {id: {type: string, description: The post ID.}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}, {type: object, properties: {data: {type: object, properties: {reactor: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}}}]}}}}}}}, /realtime/comment.created: {get: {summary: comment created, tags: [Realtime], description: "Event has occurred when comment was created\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The comment ID.}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/comment.updated: {get: {summary: comment updated, tags: [Realtime], description: "Event has occurred when comment was updated\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The comment ID.}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/comment.deleted: {get: {summary: comment deleted, tags: [Realtime], description: "Event has occurred when comment was deleted\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The comment ID.}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/comment.flagged: {get: {summary: comment flagged, tags: [Realtime], description: "Event has occurred when comment was flagged\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {allOf: [{allOf: [{type: object, properties: {id: {type: string, description: The comment ID.}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}, {type: object, properties: {data: {type: object, properties: {flaggedUserId: {type: string, description: ID of the User has been flagged}}}}}]}}}}}}}, /realtime/comment.unflagged: {get: {summary: comment unflagged, tags: [Realtime], description: "Event has occurred when comment was unflagged\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {allOf: [{allOf: [{type: object, properties: {id: {type: string, description: The comment ID.}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}, {type: object, properties: {data: {type: object, properties: {flaggedUserId: {type: string, description: ID of the User has been flagged}}}}}]}}}}}}}, /realtime/comment.addReaction: {get: {summary: add reaction to comment, tags: [Realtime], description: "Event has occurred when a reaction is added to comment\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {allOf: [{allOf: [{type: object, properties: {id: {type: string, description: The comment ID.}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}, {type: object, properties: {data: {type: object, properties: {reactor: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}}}]}}}}}}}, /realtime/comment.removeReaction: {get: {summary: remove reaction from comment, tags: [Realtime], description: "Event has occurred when a reaction is removed from comment\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {allOf: [{allOf: [{type: object, properties: {id: {type: string, description: The comment ID.}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}, {type: object, properties: {data: {type: object, properties: {reactor: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}}}]}}}}}}}, /realtime/user.updated: {get: {summary: user updated, tags: [Realtime], description: "Event has occurred when user was updated\n", responses: {'200000': {description: User Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The user ID.}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/user.flagged: {get: {summary: user flagged, tags: [Realtime], description: "Event has occurred when user was flagged\n", responses: {'200000': {description: User Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The user ID.}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/user.unflagged: {get: {summary: user unflagged, tags: [Realtime], description: "Event has occurred when user was unflagged\n", responses: {'200000': {description: User Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The user ID.}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/user.flagCleared: {get: {summary: user flag cleared, tags: [Realtime], description: "Event has occurred when the user flag was cleared\n", responses: {'200000': {description: User Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The user ID.}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/follow.created: {get: {summary: followed created, tags: [Realtime], description: "Event has occurred when follow was created\n", responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string}, data: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/follow.requested: {get: {summary: follow is requested, tags: [Realtime], description: "Event has occurred when follow was requested\n", responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string}, data: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/follow.accepted: {get: {summary: follow is accepted, tags: [Realtime], description: "Event has occurred when follow was accepted\n", responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string}, data: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/follow.unfollowed: {get: {summary: unfollow, tags: [Realtime], description: "Event has occurred when unfollow was created\n", responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string}, data: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/follow.requestCanceled: {get: {summary: follow request is canceled, tags: [Realtime], description: "Event has occurred when follow request was canceled\n", responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string}, data: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/follow.followerDeleted: {get: {summary: follower is deleted, tags: [Realtime], description: "Event has occurred when follower was deleted\n", responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string}, data: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/follow.requestDeclined: {get: {summary: follow request is declined, tags: [Realtime], description: "Event has occurred when follow request was declined\n", responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string}, data: {type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/message.created: {get: {summary: message created, tags: [Realtime], responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, referenceId: {description: A reference ID, type: string, maxLength: 30, example: 1530b11ec8df87da22b06b27}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/message.updated: {get: {summary: message updated, tags: [Realtime], responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/message.deleted: {get: {summary: message deleted, tags: [Realtime], responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/message.flagged: {get: {summary: message flagged, tags: [Realtime], responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/message.unflagged: {get: {summary: message unflagged, tags: [Realtime], responses: {'200000': {description: Message Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/message.reactionAdded: {get: {summary: message reaction added, tags: [Realtime], responses: {'200000': {description: Message with reaction Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {allOf: [{type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}, {type: object, properties: {reactions: {description: The reaction added/removed to the message, type: array, items: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}}]}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/message.reactionRemoved: {get: {summary: message reaction removed, tags: [Realtime], responses: {'200000': {description: Message with reaction Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {allOf: [{type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}, {type: object, properties: {reactions: {description: The reaction added/removed to the message, type: array, items: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}}]}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/message-feed.created: {get: {summary: message-feed created, tags: [Realtime], responses: {'200000': {description: Message Feed Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message feed ID.}, data: {type: object, properties: {messageFeeds: {description: the list of message feed, type: array, items: {type: object, properties: {messageFeedId: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, channelId: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelPublicId: {description: ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelType: {description: Type of the channel that the message feed belongs to, type: string, enum: [broadcast, community, conversation, live], example: community}, name: {description: The name of the message feed, type: string, maxLength: 100, example: text}, lastMessageId: {description: The ID of the last message created in the message feed, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b21}, lastMessageTimestamp: {description: The created timestamp of the the last message created in the message feed, type: string, format: date-time}, creatorId: {description: Creator's ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, childCount: {description: The number of messages inside the message feed, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The edited timestamp of the message feed data, type: string, format: date-time}, createdAt: {description: The created timestamp of the message feed, type: string, format: date-time}, updatedAt: {description: The updated timestamp of the message feed, type: string, format: date-time}}, required: [messageFeedId, channelId, channelPublicId, channelType, name, creatorId, path, childCount, isDeleted, createdAt, updatedAt]}}, messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/message-feed.updated: {get: {summary: message-feed updated, tags: [Realtime], responses: {'200000': {description: Message Feed Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message feed ID.}, data: {type: object, properties: {messageFeeds: {description: the list of message feed, type: array, items: {type: object, properties: {messageFeedId: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, channelId: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelPublicId: {description: ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelType: {description: Type of the channel that the message feed belongs to, type: string, enum: [broadcast, community, conversation, live], example: community}, name: {description: The name of the message feed, type: string, maxLength: 100, example: text}, lastMessageId: {description: The ID of the last message created in the message feed, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b21}, lastMessageTimestamp: {description: The created timestamp of the the last message created in the message feed, type: string, format: date-time}, creatorId: {description: Creator's ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, childCount: {description: The number of messages inside the message feed, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The edited timestamp of the message feed data, type: string, format: date-time}, createdAt: {description: The created timestamp of the message feed, type: string, format: date-time}, updatedAt: {description: The updated timestamp of the message feed, type: string, format: date-time}}, required: [messageFeedId, channelId, channelPublicId, channelType, name, creatorId, path, childCount, isDeleted, createdAt, updatedAt]}}, messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/message-feed.deleted: {get: {summary: message-feed deleted, tags: [Realtime], responses: {'200000': {description: Message Feed Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message feed ID.}, data: {type: object, properties: {messageFeeds: {description: the list of message feed, type: array, items: {type: object, properties: {messageFeedId: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, channelId: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelPublicId: {description: ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelType: {description: Type of the channel that the message feed belongs to, type: string, enum: [broadcast, community, conversation, live], example: community}, name: {description: The name of the message feed, type: string, maxLength: 100, example: text}, lastMessageId: {description: The ID of the last message created in the message feed, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b21}, lastMessageTimestamp: {description: The created timestamp of the the last message created in the message feed, type: string, format: date-time}, creatorId: {description: Creator's ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, childCount: {description: The number of messages inside the message feed, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The edited timestamp of the message feed data, type: string, format: date-time}, createdAt: {description: The created timestamp of the message feed, type: string, format: date-time}, updatedAt: {description: The updated timestamp of the message feed, type: string, format: date-time}}, required: [messageFeedId, channelId, channelPublicId, channelType, name, creatorId, path, childCount, isDeleted, createdAt, updatedAt]}}, messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/channel.created: {get: {summary: channel created, tags: [Realtime], responses: {'200000': {description: Channel Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {channels: {description: The list of channels, type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: The list of channel users, type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {description: The list of users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, files: {description: The list of files, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/channel.updated: {get: {summary: channel updated, tags: [Realtime], responses: {'200000': {description: Channel Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {channels: {description: The list of channels, type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: The list of channel users, type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {description: The list of users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, files: {description: The list of files, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/channel.deleted: {get: {summary: channel deleted, tags: [Realtime], responses: {'200000': {description: Channel Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {channels: {description: The list of channels, type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: The list of channel users, type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {description: The list of users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, files: {description: The list of files, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/channel.joined: {get: {summary: user joined the channel, tags: [Realtime], responses: {'200000': {description: Channel Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {channels: {description: The list of channels, type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: The list of channel users, type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {description: The list of users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, files: {description: The list of files, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/channel.left: {get: {summary: user left the channel, tags: [Realtime], responses: {'200000': {description: Channel Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {channels: {description: The list of channels, type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: The list of channel users, type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {description: The list of users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, files: {description: The list of files, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/channel.membersAdded: {get: {summary: users were added to the channel, tags: [Realtime], responses: {'200000': {description: Channel Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {channels: {description: The list of channels, type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: The list of channel users, type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {description: The list of users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, files: {description: The list of files, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/channel.membersRemoved: {get: {summary: users were removed from the channel, tags: [Realtime], responses: {'200000': {description: Channel Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {channels: {description: The list of channels, type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: The list of channel users, type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {description: The list of users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, files: {description: The list of files, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/channel.banned: {get: {summary: user is banned from the channel, tags: [Realtime], responses: {'200000': {description: Channel Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {channels: {description: The list of channels, type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: The list of channel users, type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {description: The list of users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, files: {description: The list of files, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /realtime/channel.unbanned: {get: {summary: user is unbanned from the channel, tags: [Realtime], responses: {'200000': {description: Channel Information, content: {application/json: {schema: {allOf: [{type: object, properties: {id: {type: string, description: The message ID.}, data: {type: object, properties: {channels: {description: The list of channels, type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, channelUsers: {description: The list of channel users, type: array, items: {type: object, properties: {userId: {type: string}, channelId: {type: string}, membership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean}, lastActivity: {type: string, format: date-time}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, readToSegment: {type: integer}, lastMentionedSegment: {type: integer}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, createdAt: {type: string, description: The date/time when a channel user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel user is updated., format: date-time}}}}, users: {description: The list of users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, files: {description: The list of files, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, {type: object, properties: {networkId: {type: string, description: ID of the network.}, path: {type: string, description: A topic path for subscription.}, eventType: {type: string, description: Name of the event.}, senderId: {type: string, description: ID of sender node.}, sendTime: {type: string, description: The date/time when event was sent., format: date-time}, version: {type: string, description: Version of API}}}]}}}}}}}, /api/v5/me/global-feeds: {get: {summary: Get global feed., tags: [GlobalFeed], security: [{BearerAuth: []}], description: "Get posts from your wall, people you follow and communities you join sorted by custom rannking algorithm\n", parameters: [{name: limit, in: query, schema: {type: integer, minimum: 1, maximum: 100, default: 10}}, {name: token, in: query, schema: {type: string, minLength: 1, maxLength: 1000}}], consumes: [application/json], responses: {'200000': {description: Global Feed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /sockets/v5/global-feed.query: {post: {summary: Get global feed., tags: [GlobalFeed], security: [{SocketAuth: []}], description: "Get posts from your wall, people you follow and communities you join sorted by custom rannking algorithm\n", requestBody: {description: "Condition of querying and pagination.\n", required: true, content: {application/json: {schema: {type: object, properties: {options: {type: object, properties: {limit: {type: integer, minimum: 1, maximum: 100, default: 10}, token: {type: string, minimum: 1, maximum: 1000}}}}}}}}, responses: {'200000': {description: Global Feed Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, paging: {type: object, properties: {next: {type: string}, previous: {type: string}}}}}}}}}}, '400000': {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, '500000': {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}}}}, /api/v5/message-feeds: {post: {tags: [Message Feed], summary: Add a new message feed, security: [{BearerAuth: []}], description: Add a new message feed, requestBody: {description: Payload for creating a new message feed, content: {application/json: {schema: {type: object, required: [channelId, name], properties: {name: {description: The name of the message feed, type: string, maxLength: 100, example: text}, channelId: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, createdAt: {description: The created timestamp of the message feed, type: string, format: date-time}}}}}}, responses: {'200': {description: Successful operation, content: {application/json: {schema: {description: The returned payload of message feed(s), type: object, properties: {messageFeeds: {description: List of message feeds, type: array, items: {type: object, properties: {messageFeedId: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, channelId: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelPublicId: {description: ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelType: {description: Type of the channel that the message feed belongs to, type: string, enum: [broadcast, community, conversation, live], example: community}, name: {description: The name of the message feed, type: string, maxLength: 100, example: text}, lastMessageId: {description: The ID of the last message created in the message feed, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b21}, lastMessageTimestamp: {description: The created timestamp of the the last message created in the message feed, type: string, format: date-time}, creatorId: {description: Creator's ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, childCount: {description: The number of messages inside the message feed, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The edited timestamp of the message feed data, type: string, format: date-time}, createdAt: {description: The created timestamp of the message feed, type: string, format: date-time}, updatedAt: {description: The updated timestamp of the message feed, type: string, format: date-time}}, required: [messageFeedId, channelId, channelPublicId, channelType, name, creatorId, path, childCount, isDeleted, createdAt, updatedAt]}}, messages: {description: List of last messages in each message feed, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, users: {description: List of related users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}}}, '/api/v5/message-feeds/{messageFeedId}': {delete: {tags: [Message Feed], summary: Delete a message feed, security: [{BearerAuth: []}], description: Delete an existing message feed except the default message feed, parameters: [{name: messageFeedId, in: path, required: true, description: Message feed ID, schema: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}, {name: permanent, in: query, description: A flag to confirm permanent deletion, default: false}], responses: {'200': {description: Successful operation}, '403': {description: Fobidden error}, '404': {description: Not found error}, '422': {description: Parameters validation error}}}, put: {tags: [Message Feed], summary: Update a message feed, description: Update an existing message feed except the default message feed, security: [{BearerAuth: []}], parameters: [{name: messageFeedId, in: path, required: true, description: Message feed ID, schema: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}], requestBody: {description: Payload for updating an existing message feed Message feed object that needs to be added, content: {application/json: {schema: {type: object, required: [name], properties: {name: {description: The name of the message feed, type: string, maxLength: 100, example: text}}}}}}, responses: {'200': {description: Successful operation, content: {application/json: {schema: {description: The returned payload of message feed(s), type: object, properties: {messageFeeds: {description: List of message feeds, type: array, items: {type: object, properties: {messageFeedId: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, channelId: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelPublicId: {description: ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelType: {description: Type of the channel that the message feed belongs to, type: string, enum: [broadcast, community, conversation, live], example: community}, name: {description: The name of the message feed, type: string, maxLength: 100, example: text}, lastMessageId: {description: The ID of the last message created in the message feed, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b21}, lastMessageTimestamp: {description: The created timestamp of the the last message created in the message feed, type: string, format: date-time}, creatorId: {description: Creator's ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, childCount: {description: The number of messages inside the message feed, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The edited timestamp of the message feed data, type: string, format: date-time}, createdAt: {description: The created timestamp of the message feed, type: string, format: date-time}, updatedAt: {description: The updated timestamp of the message feed, type: string, format: date-time}}, required: [messageFeedId, channelId, channelPublicId, channelType, name, creatorId, path, childCount, isDeleted, createdAt, updatedAt]}}, messages: {description: List of last messages in each message feed, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, users: {description: List of related users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}, '403': {description: Forbidden error}, '404': {description: Not found error}, '422': {description: Parameters validation error}}}, get: {tags: [Message Feed], summary: Find a message feed by ID, security: [{BearerAuth: []}], description: Return a single message feed, parameters: [{name: messageFeedId, in: path, required: true, description: Message feed ID, schema: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}], responses: {'200': {description: Successful operation, content: {application/json: {schema: {description: The returned payload of message feed(s), type: object, properties: {messageFeeds: {description: List of message feeds, type: array, items: {type: object, properties: {messageFeedId: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, channelId: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelPublicId: {description: ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelType: {description: Type of the channel that the message feed belongs to, type: string, enum: [broadcast, community, conversation, live], example: community}, name: {description: The name of the message feed, type: string, maxLength: 100, example: text}, lastMessageId: {description: The ID of the last message created in the message feed, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b21}, lastMessageTimestamp: {description: The created timestamp of the the last message created in the message feed, type: string, format: date-time}, creatorId: {description: Creator's ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, childCount: {description: The number of messages inside the message feed, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The edited timestamp of the message feed data, type: string, format: date-time}, createdAt: {description: The created timestamp of the message feed, type: string, format: date-time}, updatedAt: {description: The updated timestamp of the message feed, type: string, format: date-time}}, required: [messageFeedId, channelId, channelPublicId, channelType, name, creatorId, path, childCount, isDeleted, createdAt, updatedAt]}}, messages: {description: List of last messages in each message feed, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, users: {description: List of related users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}}}, '/api/v5/message-feeds/channel/{channelId}': {get: {tags: [Message Feed], summary: Finds message feeds by channelId and multiple conditions, description: Multiple conditions can be provided by query string, security: [{BearerAuth: []}], operationId: findMessageFeedsByConditions, parameters: [{name: channelId, in: path, required: true, description: channel ID of message feed that needs to be find, schema: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}}, {name: isDeleted, in: query, description: deleted flag of message feed, schema: {type: boolean, default: false}}, {name: options, in: query, description: "Pagination options\n\n**after**: string(30) : return documents after this message feed id\n\n**before**: string(30) : return documents before this message feed id\n\n**limit**: number(0, 100) default=10\n\n**sortBy**: lastContentTimestampDesc\n\n**token**: string(100) : This token will be generated by server using encryption of after, before, limit, sortBy. It would be returned in response payload (paging.next, paging.previous). The caller can send only token for getting data from previous or next page easily.\n", schema: {description: Page options by using cursor, type: object, properties: {after: {type: string, maxLength: 30}, before: {type: string, maxLength: 30}, limit: {type: number, format: int32}, sortBy: {type: string, default: lastMessageTimestampDesc, enum: [lastMessageTimestampAsc, lastMessageTimestampDesc]}, token: {type: string, maxLength: 100}}}}], responses: {'200': {description: successful operation, content: {application/json: {schema: {description: The returned payload of message feed(s), type: object, properties: {messageFeeds: {description: List of message feeds, type: array, items: {type: object, properties: {messageFeedId: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, channelId: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelPublicId: {description: ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelType: {description: Type of the channel that the message feed belongs to, type: string, enum: [broadcast, community, conversation, live], example: community}, name: {description: The name of the message feed, type: string, maxLength: 100, example: text}, lastMessageId: {description: The ID of the last message created in the message feed, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b21}, lastMessageTimestamp: {description: The created timestamp of the the last message created in the message feed, type: string, format: date-time}, creatorId: {description: Creator's ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, childCount: {description: The number of messages inside the message feed, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The edited timestamp of the message feed data, type: string, format: date-time}, createdAt: {description: The created timestamp of the message feed, type: string, format: date-time}, updatedAt: {description: The updated timestamp of the message feed, type: string, format: date-time}}, required: [messageFeedId, channelId, channelPublicId, channelType, name, creatorId, path, childCount, isDeleted, createdAt, updatedAt]}}, messages: {description: List of last messages in each message feed, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, users: {description: List of related users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, paging: {description: Paging response, type: object, properties: {next: {type: string, description: token for getting the next page of data, maxLength: 100}, previous: {type: string, description: token for getting the previous page of data, maxLength: 100}, total: {type: number, format: int32}}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}}}, /api/v5/message-feeds/list: {get: {tags: [Message Feed], summary: Find message feeds by list of ID's, description: Multiple message feed id values can be provided with array format, parameters: [{name: messageFeedIds, in: query, required: true, description: 'List of message feed ID that needs to find (max=10) [messageFeedIds[]=messageFeedId1&messageFeedIds[]=messageFeedId2]', schema: {description: List of message feed IDs, type: array, items: {type: string, maxLength: 30}, maxItems: 10, example: [a85dca058f5b585f86a29f14]}}], responses: {'200': {description: Successful operation, content: {application/json: {schema: {description: The returned payload of message feed(s), type: object, properties: {messageFeeds: {description: List of message feeds, type: array, items: {type: object, properties: {messageFeedId: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, channelId: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelPublicId: {description: ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelType: {description: Type of the channel that the message feed belongs to, type: string, enum: [broadcast, community, conversation, live], example: community}, name: {description: The name of the message feed, type: string, maxLength: 100, example: text}, lastMessageId: {description: The ID of the last message created in the message feed, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b21}, lastMessageTimestamp: {description: The created timestamp of the the last message created in the message feed, type: string, format: date-time}, creatorId: {description: Creator's ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, childCount: {description: The number of messages inside the message feed, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The edited timestamp of the message feed data, type: string, format: date-time}, createdAt: {description: The created timestamp of the message feed, type: string, format: date-time}, updatedAt: {description: The updated timestamp of the message feed, type: string, format: date-time}}, required: [messageFeedId, channelId, channelPublicId, channelType, name, creatorId, path, childCount, isDeleted, createdAt, updatedAt]}}, messages: {description: List of last messages in each message feed, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, users: {description: List of related users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}}}, '/api/v5/message-feeds/user/{creatorId}': {get: {tags: [Message Feed], summary: Finds message feeds by creatorId and multiple conditions, description: Conditions can be provided in query string, operationId: findMessageFeedsByCreatorId, parameters: [{name: creatorId, in: path, required: true, description: ID of message feed creator, schema: {$ref: ../../schema/message-feed.yaml#/MessageFeed_creatorId'}}, {name: isDeleted, in: query, description: deleted flag of message feed, schema: {type: boolean, default: false}}, {name: options, in: query, description: "Pagination options\n\n**after**: string(30) : return documents after this message feed id\n\n**before**: string(30) : return documents before this message feed id\n\n**limit**: number(0, 100) default=10\n\n**sortBy**: lastContentTimestampDesc\n\n**token**: string(100) : This token will be generated by server using encryption of after, before, limit, sortBy. It would be returned in response payload (paging.next, paging.previous). The caller can send only token for getting data from previous or next page easily.\n", schema: {description: Page options by using cursor, type: object, properties: {after: {type: string, maxLength: 30}, before: {type: string, maxLength: 30}, limit: {type: number, format: int32}, sortBy: {type: string, default: lastMessageTimestampDesc, enum: [lastMessageTimestampAsc, lastMessageTimestampDesc]}, token: {type: string, maxLength: 100}}}}], responses: {'200': {description: Successful operation, content: {application/json: {schema: {description: The returned payload of message feed(s), type: object, properties: {messageFeeds: {description: List of message feeds, type: array, items: {type: object, properties: {messageFeedId: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, channelId: {description: Internal ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelPublicId: {description: ID of the channel that the message feed belongs to, type: string, maxLength: 30, example: abc665aed9dbb8d036037eeb}, channelType: {description: Type of the channel that the message feed belongs to, type: string, enum: [broadcast, community, conversation, live], example: community}, name: {description: The name of the message feed, type: string, maxLength: 100, example: text}, lastMessageId: {description: The ID of the last message created in the message feed, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b21}, lastMessageTimestamp: {description: The created timestamp of the the last message created in the message feed, type: string, format: date-time}, creatorId: {description: Creator's ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, childCount: {description: The number of messages inside the message feed, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The edited timestamp of the message feed data, type: string, format: date-time}, createdAt: {description: The created timestamp of the message feed, type: string, format: date-time}, updatedAt: {description: The updated timestamp of the message feed, type: string, format: date-time}}, required: [messageFeedId, channelId, channelPublicId, channelType, name, creatorId, path, childCount, isDeleted, createdAt, updatedAt]}}, messages: {description: List of last messages in each message feed, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, users: {description: List of related users, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}}}, /api/v5/messages: {post: {tags: [Message V5], summary: Create a new message in message feed, description: Create a new message, requestBody: {description: Message object that needs to be added, content: {application/json: {schema: {type: object, required: [referenceId, dataType, messageFeedId], properties: {messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, referenceId: {description: A reference ID, type: string, maxLength: 30, example: 1530b11ec8df87da22b06b27}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, createdAt: {description: A created date/time of message, type: string, format: date-time}}}}}}, responses: {'200': {description: Successful operation, content: {application/json: {schema: {description: The returned payload of created message(s), type: object, properties: {messages: {description: The list of created message, type: array, items: {allOf: [{type: object, properties: {referenceId: {description: A reference ID, type: string, maxLength: 30, example: 1530b11ec8df87da22b06b27}}}, {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}]}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}, get: {tags: [Message V5], summary: Find messages by message feed id and multiple conditions, description: Multiple conditions can be provided in query string, parameters: [{name: messageFeedId, in: path, required: true, description: Message feed ID, schema: {description: The ID of the message feed, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}, {name: parentId, in: query, description: parent ID of a message (max length=50), schema: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}}, {name: isDeleted, in: query, description: deleted flag of message that needs to be find, schema: {description: Soft delete flag, default: false, type: boolean}}, {name: includeTags, in: query, description: tags for filtering (max=10), schema: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}}, {name: excludeTags, in: query, description: tags for filtering out (max=10), schema: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}}, {name: hasFlags, in: query, description: flag to filter only flagged message, schema: {description: A flag to filter only flagged message, type: object, properties: {result: {type: boolean}}}}, {name: dataType, in: query, description: data type of message (max length=20), schema: {description: Type of data, type: string, maxLength: 20, example: text}}, {name: options, in: query, description: "Pagination options\n\n**after**: string(30) : return documents after this message id\n\n**before**: string(30) : return documents before this message id\n\n**limit**: number(0, 100) default=10\n\n**sortBy**: segmentAsc | segmentDesc\n\n**token**: string(100) : This token will be generated by server using encryption of after, before, limit, sortBy. It would be returned in response payload (paging.next, paging.previous). The caller can send only token for getting data from previous or next page easily.\n", schema: {description: Page options by using cursor, type: object, properties: {after: {type: string, maxLength: 30}, before: {type: string, maxLength: 30}, limit: {type: number, format: int32, default: 10, minimum: 1, maximum: 100}, sortBy: {type: string, default: segmentDesc, enum: [segmentAsc, segmentDesc]}, token: {type: string, maxLength: 100}}}}], responses: {'200': {description: successful operation, content: {application/json: {schema: {description: The returned payload of message(s), type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, paging: {description: Paging response, type: object, properties: {next: {type: string, description: token for getting the next page of data, maxLength: 100}, previous: {type: string, description: token for getting the previous page of data, maxLength: 100}, total: {type: number, format: int32}}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}}, '/api/v5/messages/{messageId}': {delete: {tags: [Message V5], summary: Delete a message, description: Delete a message, parameters: [{name: messageId, in: path, required: true, description: ID of a message, schema: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}, {name: permanent, in: query, description: flag to confirm permanent deletion, schema: {description: A flag to confirm permanent deletion, default: false}}], responses: {'200': {description: Successful operation}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}, get: {tags: [Message V5], summary: Find message by ID, description: Returns a single message, parameters: [{name: messageId, in: path, required: true, description: ID of a message, schema: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}], responses: {'200': {description: successful operation, content: {application/json: {schema: {description: The returned payload of message(s), type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}, put: {tags: [Message V5], summary: Update a message, description: Update a message, parameters: [{name: messageId, in: path, required: true, description: ID of a message, schema: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}], requestBody: {description: Message object that needs to be updated, content: {application/json: {schema: {type: object, properties: {data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}}}}}}, responses: {'200': {description: Successful operation, content: {application/json: {schema: {description: The returned payload of message(s), type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}}, '/api/v5/messages/{messageId}/flags/all': {delete: {tags: [Message V5], summary: Delete all flags in message, description: Delete all flags in message, parameters: [{name: messageId, in: path, required: true, description: ID of a message, schema: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}], responses: {'200': {description: Successful operation, content: {application/json: {schema: {description: The returned payload of message(s), type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}}, '/api/v5/messages/{messageId}/flags': {delete: {tags: [Message V5], summary: Delete my flag in a message, description: Delete my flag in a message, parameters: [{name: messageId, in: path, required: true, description: ID of a message, schema: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}], responses: {'200': {description: Successful operation, content: {application/json: {schema: {description: The returned payload of message(s), type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}, get: {tags: [Message V5], summary: Find my flag in message by ID, description: Return my flag in message, parameters: [{name: messageId, in: path, required: true, description: ID of a message, schema: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}], responses: {'200': {description: successful operation, content: {application/json: {schema: {type: object, properties: {result: {description: A flag to filter only flagged message, type: object, properties: {result: {type: boolean}}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}, post: {tags: [Message V5], summary: Flag a message, description: Flag a message, parameters: [{name: messageId, in: path, required: true, description: ID of a message, schema: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}}], responses: {'200': {description: Successful operation, content: {application/json: {schema: {description: The returned payload of message(s), type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}}, /api/v5/messages/list: {get: {tags: [Message V5], summary: Find messages by message id (max=10), description: Multiple message id values can be provided with array format, parameters: [{name: messageIds, in: query, required: true, description: 'List of message ID that needs to find (max=10) [messageIds[]=message1&messageIds[]=message2]', schema: {description: A list of message ID, type: array, items: {type: string, maxLength: 30}, maxItems: 10, example: [a85dca058f5b585f86a29f14]}}], responses: {'200': {description: successful operation, content: {application/json: {schema: {description: The returned payload of message(s), type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}}, '/api/v5/messages/user/{creatorId}': {get: {tags: [Message V5], summary: Find messages by creatorId and multiple conditions, description: Multiple conditions can be provided by query string, parameters: [{name: creatorId, in: path, required: true, description: creator ID of message that needs to be find, schema: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}}, {name: isDeleted, in: query, description: deleted flag of message that needs to be find, schema: {description: Soft delete flag, default: false, type: boolean}}, {name: hasFlags, in: query, description: flag to filter only flagged message, schema: {description: A flag to filter only flagged message, type: object, properties: {result: {type: boolean}}}}, {name: options, in: query, description: "Pagination options\n\n**after**: string(30) : return documents after this message id\n\n**before**: string(30) : return documents before this message id\n\n**limit**: number(0, 100) default=10\n\n**sortBy**: segmentAsc | segmentDesc\n\n**token**: string(100) : This token will be generated by server using encryption of after, before, limit, sortBy. It would be returned in response payload (paging.next, paging.previous). The caller can send only token for getting data from previous or next page easily.\n", schema: {description: Page options by using cursor, type: object, properties: {after: {type: string, maxLength: 30}, before: {type: string, maxLength: 30}, limit: {type: number, format: int32, default: 10, minimum: 1, maximum: 100}, sortBy: {type: string, default: segmentDesc, enum: [segmentAsc, segmentDesc]}, token: {type: string, maxLength: 100}}}}], responses: {'200': {description: successful operation, content: {application/json: {schema: {description: The returned payload of message(s), type: object, properties: {messages: {description: The list of message, type: array, items: {type: object, properties: {messageId: {description: A message ID, type: string, maxLength: 30, example: a85dca058f5b585f86a29f14}, networkId: {description: A network ID, type: string, maxLength: 30, example: 9530b11ec8de87db22b06b27}, channelId: {description: Channel id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eed}, channelType: {description: Channel type of message, type: string, enum: [broadcast, community, conversation, live], example: community}, messageFeedId: {description: Message feed id of message, type: string, maxLength: 30, example: abc665aed9dbb8d036037eec}, segment: {description: Segment of message in sub feed, type: number, format: int32}, dataType: {description: Type of data, type: string, maxLength: 20, example: text}, data: {description: A custom object for storing message. The size of this object must be less than 10 kb., type: object, example: {text: test}}, fileId: {description: File id, type: string, maxLength: 30, example: 76bfe68974157a114053364d}, thumbnailFileId: {description: Thumbnail file id, type: string, maxLength: 30, example: 76bfe68974157a114053364e}, metadata: {description: A custom object for storing the other data. The size of this object must be less than 20 kb., type: object, example: {refId: d601c27c0675baa2103ec573}}, tags: {description: List of tags for searching, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [tag1, tag2]}, creatorId: {description: A creator ID, type: string, maxLength: 30, example: 8aa313c8dbb00af911b07672}, mentionedUsers: {description: List of mentioned users, type: array, items: {type: object, properties: {type: {type: string, maxLength: 20, default: user, enum: [channel, user]}, userIds: {type: array, maxItems: 50, items: {type: string, maxLength: 24}, example: [3cac302ab992aa17b215ba21, adb34ec2aeedca03a38e1d54]}, userPublicIds: {type: array, maxItems: 50, items: {type: string, maxLength: 30}, example: [99ac302abaa2aa17b215kalr, 69b34ec2abb39a03a38eppek]}}}}, reactions: {description: List of reactions, type: object, items: {type: object, additionalProperties: {type: number}}, example: {like: 1, love: 2}}, reactionCount: {description: Total number of reactions, type: number, format: int32}, parentId: {description: Parent id of message, type: string, maxLength: 30, example: abc665afd7dbb8d036037eea}, path: {description: Object path, type: string, maxLength: 200, example: 12cba9779cc479e1fcefd1de/chat/f00ab16cbd27d4a9525aea6d/32b468ae0b1bd0cc7976719d/0a003482f0ac53a71e7c9239}, flagCount: {description: The number of flags, type: number, format: int32}, childCount: {description: The number of children message, type: number, format: int32}, isDeleted: {description: Soft delete flag, default: false, type: boolean}, editedAt: {description: The latest date/time of changes in message data, type: string, format: date-time}, createdAt: {description: A created date/time of message, type: string, format: date-time}, updatedAt: {description: A updated date/time of message, type: string, format: date-time}, myReactions: {description: List of reactions of the actor, type: array, maxItems: 10, default: [], items: {type: string, maxLength: 30}, example: [like, love]}}}}, files: {description: The list of file, type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {description: The list of user, type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, paging: {description: Paging response, type: object, properties: {next: {type: string, description: token for getting the next page of data, maxLength: 100}, previous: {type: string, description: token for getting the previous page of data, maxLength: 100}, total: {type: number, format: int32}}}}}}}}, '404': {description: Not found error}, '422': {description: Parameters validation error}}, security: [{BearerAuth: []}]}}, /webhook/message.didCreate: {get: {tags: [WebhookEvent], description: Send new created message whenever a message got created in a channel, responses: {'200': {description: messages is messages information. users is list of all user information relate to this messages, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [message.didCreate]}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}}}, /webhook/message.didDelete: {get: {tags: [WebhookEvent], description: Send deleted message whenever a message got deleted in a channel, responses: {'200': {description: messages is messages information. users is list of all user information relate to this messages, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [message.didDelete]}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}}}, /webhook/message.didUpdate: {get: {tags: [WebhookEvent], description: Send updated message whenever a message got updated in a channel, responses: {'200': {description: messages is messages information. users is list of all user information relate to this messages, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [message.didUpdate]}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}}}, /webhook/message.didFlag: {get: {tags: [WebhookEvent], description: Send updated message whenever a message got flag, responses: {'200': {description: messages is messages information. users is list of all user information relate to this messages, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [message.didFlag]}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}}}, /webhook/message.didUnflag: {get: {tags: [WebhookEvent], description: Send updated message whenever a message flag is removed., responses: {'200': {description: messages is messages information. users is list of all user information relate to this messages, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [message.didUnflag]}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}}}, /webhook/message.didClearflag: {get: {tags: [WebhookEvent], description: Send updated message whenever all message flags are cleared., responses: {'200': {description: messages is messages information. users is list of all user information relate to this messages, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [message.didClearflag]}, data: {type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}}}, /webhook/channel.didCreate: {get: {tags: [WebhookEvent], description: Send new created channel whenever a channel got create, responses: {'200': {description: channel is channel information. userIds is a list of userId who is added to channel. users is a list of user information., content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [channel.didCreate]}, data: {type: object, properties: {channel: {type: array, items: {$ref: '#/components/schemas/Channel'}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, userIds: {type: array, items: {type: string}}}}}}}}}}}}, /webhook/channel.didJoin: {get: {tags: [WebhookEvent], description: Send join event information whenever a channel got joined, responses: {'200': {description: channel is channel information. userIds is a list of joined userId. users is a list of user information., content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [channel.didJoin]}, data: {type: object, properties: {channel: {type: array, items: {$ref: '#/components/schemas/Channel'}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, userIds: {type: array, items: {type: string}}}}}}}}}}}}, /webhook/channel.didAddUsers: {get: {tags: [WebhookEvent], description: Send user added event information whenever new member got added to a channel., responses: {'200': {description: channel is channel information. userIds is a list of added userId. adderId is user who add other user to channel users is a list of user information., content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [channel.didAddUsers]}, data: {type: object, properties: {channel: {type: array, items: {$ref: '#/components/schemas/Channel'}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, userIds: {type: array, items: {type: string}}, adderId: {type: string}}}}}}}}}}}, /webhook/channel.didClose: {get: {tags: [WebhookEvent], description: Send channel close event information whenever a channel close., responses: {'200': {description: channel is channel information., content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [channel.didClose]}, data: {type: object, properties: {channel: {type: array, items: {$ref: '#/components/schemas/Channel'}}}}}}}}}}}}, /webhook/channel.didLeave: {get: {tags: [WebhookEvent], description: Send channel leave event information whenever someone leave a channel., responses: {'200': {description: channel is channel information. userIds is a list of userId who leave channel. users is a list of userInfo, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [channel.didLeave]}, data: {type: object, properties: {channel: {type: array, items: {$ref: '#/components/schemas/Channel'}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, userIds: {type: array, items: {type: string}}}}}}}}}}}}, /webhook/channel.didUpdate: {get: {tags: [WebhookEvent], description: Send channel updated event information whenever a channel got updated., responses: {'200': {description: channel is channel information. userId is a userId who update channel. users is a list of userInfo, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [channel.didUpdate]}, data: {type: object, properties: {channel: {type: array, items: {$ref: '#/components/schemas/Channel'}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, userId: {type: string}}}}}}}}}}}, /webhook/channel.didRemoveUsers: {get: {tags: [WebhookEvent], description: Send user removed event information whenever member got remove from channel., responses: {'200': {description: channel is channel information. userIds is a list of removed userId. removerId is userId who remove other users from channel. users is a list of user information., content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [channel.didRemoveUsers]}, data: {type: object, properties: {channel: {type: array, items: {$ref: '#/components/schemas/Channel'}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, userIds: {type: array, items: {type: string}}, removerId: {type: string}}}}}}}}}}}, /webhook/channel.didUpdateMeta: {get: {tags: [WebhookEvent], description: Send channel's meta data updated event information whenever a channel's meta data got updated., responses: {'200': {description: channel is channel information. userId is a userId who update channel's meta data. users is a list of userInfo, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [channel.didUpdateMeta]}, data: {type: object, properties: {channel: {type: array, items: {$ref: '#/components/schemas/Channel'}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}, userId: {type: string}}}}}}}}}}}, /webhook/channel.didBan: {get: {tags: [WebhookEvent], description: Send channel banned event whenever a channel got banned., responses: {'200': {description: channel is channel information. userIds is a list of userIds who being banned. actorId is userId who ban other user. users is a list of userInfo, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [channel.didBan]}, data: {type: object, properties: {channel: {type: array, items: {$ref: '#/components/schemas/Channel'}}, users: {type: array, items: {$ref: '#/components/schemas/User'}}, actorId: {type: string}, userIds: {type: array, items: {type: string}}}}}}}}}}}}, /webhook/moderation.didBan: {get: {tags: [WebhookEvent], description: Send banned event whenever a system detect message that contain in the blacklist, responses: {'200': {description: channel is channel information. userId is a userId who send the message. users is a list of userInfo, content: {application/json: {schema: {type: object, properties: {event: {type: string, enum: [moderation.didBan]}, data: {type: object, properties: {channel: {type: array, items: {$ref: '#/components/schemas/Channel'}}, users: {type: array, items: {$ref: '#/components/schemas/User'}}, userId: {type: string}}}}}}}}}}}, /webhook/user.didClearFlag: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when the user flags are cleared\n", responses: {'200000': {description: Users Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /webhook/user.didFlag: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when a user is flagged\n", responses: {'200000': {description: Users Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /webhook/user.didUnflag: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when a user is unflagged\n", responses: {'200000': {description: Users Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /webhook/user.didUpdate: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when a user information is updated\n", responses: {'200000': {description: Users Information, content: {application/json: {schema: {properties: {status: {type: string}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /webhook/v3.community.didCreate: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when community is created\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}}}}, /webhook/v3.community.didUpdate: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when community is updated\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}}}}, /webhook/v3.community.didDelete: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when community is deleted\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}}}}, /webhook/v3.community.didJoin: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when user joined a community.\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}}}}, /webhook/v3.community.didLeave: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when user left a community\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}}}}, /webhook/v3.community.didAddUsers: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when add users into community\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}}}}, /webhook/v3.community.didRemoveUsers: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when remove users from community\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}}}}, /webhook/v3.community.didBan: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when community user is banned\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}}}}, /webhook/v3.community.didUnban: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when community user is unbanned\n", responses: {'200000': {description: Community Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}}}}}}}}}}}, /webhook/v3.post.didCreate: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is created\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}}}}}}}}}}}, /webhook/v3.post.didUpdate: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is updated\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}}}}}}}}}}}, /webhook/v3.post.didDelete: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is deleted\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}}}}}}}}}}}, /webhook/v3.post.didApprove: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is approved\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}}}}}}}}}}}, /webhook/v3.post.didDecline: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is declined\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}}}}}}}}}}}, /webhook/v3.post.didFlag: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is flagged.\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, flaggedUserId: {type: string}}}}}}}}}}}, /webhook/v3.post.didUnflag: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is unflagged.\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, flaggedUserId: {type: string}}}}}}}}}}}, /webhook/v3.post.didAddReaction: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when reaction of post is added.\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, reactor: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}}}}}}}}}}}, /webhook/v3.post.didRemoveReaction: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when reaction of post is removed.\n", responses: {'200000': {description: Post Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, postChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}, communityUsers: {type: array, items: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}}, categories: {type: array, items: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}}, feeds: {type: array, items: {type: object, properties: {targetId: {type: string, description: Target public id (community id or user id)}, targetType: {type: enum, description: Target that feed belong to, enum: [community, user]}, postCount: {type: number, description: Post count in feed}, feedType: {type: enum, description: "Feed type\n- published: main feed \n- reviewing: feed for things that have to be reviewed\n- declined: feed for things that is rejected from reviewing\n", enum: [published, reviewing, declined]}, feedId: {type: string, description: Feed public id}, createdAt: {type: string, description: The date/time when a feed is created., format: date-time}, updatedAt: {type: string, description: The date/time when a feed is updated., format: date-time}}}}, reactor: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}, videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}}}}}}}}}}}, /webhook/v3.comment.didCreate: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is created\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /webhook/v3.comment.didUpdate: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is updated\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /webhook/v3.comment.didDelete: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is deleted\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /webhook/v3.comment.didFlag: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is flagged.\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, flaggedUserId: {type: string}}}}}}}}}}}, /webhook/v3.comment.didUnflag: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is unflagged.\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, flaggedUserId: {type: string}}}}}}}}}}}, /webhook/v3.comment.didAddReaction: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when reaction of comment is added.\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, reactor: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}}}}}}}}}, /webhook/v3.comment.didRemoveReaction: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when reaction of comment is removed.\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, reactor: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}}}}}}}}}, /webhook/v3.comment.didReply: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is replied.\n", responses: {'200000': {description: Comment Information, content: {application/json: {schema: {type: object, properties: {event: {type: string}, data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, commentChildren: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}}}, /webhook/poll.didCreate: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when poll is created\n", responses: {'200000': {description: Poll Information, content: {application/json: {schema: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}, /webhook/poll.didUpdate: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when poll is updated\n", responses: {'200000': {description: Poll Information, content: {application/json: {schema: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}, /webhook/poll.didVote: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when vote is created in poll\n", responses: {'200000': {description: Poll Information, content: {application/json: {schema: {type: object, properties: {polls: {type: array, items: {type: object, properties: {pollId: {type: string}, userId: {type: string}, question: {type: string, description: question.}, answers: {type: array, maxItems: 10, items: {type: object, properties: {dataType: {type: string, enum: [text]}, data: {type: string}, voteCount: {type: number, default: 0}, isVotedByUser: {type: boolean, default: false}, id: {type: string, description: Option id}}}}, answerType: {type: string}, closedAt: {type: string}, createdAt: {type: string}, isVoted: {type: boolean, default: false}, status: {type: string, default: open}, closedIn: {type: number}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}}}}}}}}}, /webhook/v3.video-streaming.didRecord: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when video streaming recordings is ready.\n", responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}, /webhook/v3.video-streaming.didStart: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when video streaming start.\n", responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}, /webhook/v3.video-streaming.didStop: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when video streaming stop.\n", responses: {'200000': {description: video streaming information, content: {application/json: {schema: {properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, recordings: {type: array, items: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, mp4: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}, m3u8: {type: object, properties: {url: {type: string}, duration: {type: number}, startTime: {type: number}, stopTime: {type: number}}}}}}, watcherUrl: {type: object, properties: {flv: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, hls: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}, rtmp: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}}}}}, /webhook/follow.didCreate: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when a user follows another user.\n", responses: {'200000': {description: Follow Object, content: {application/json: {schema: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [accepted]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, /webhook/follow.didRequest: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when a user sends a request to follow another user.\n", responses: {'200000': {description: Follow Object, content: {application/json: {schema: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, /webhook/follow.didAcceptRequest: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when a user accepts a follow request from another user.\n", responses: {'200000': {description: Follow Object, content: {application/json: {schema: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [accepted]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, /webhook/follow.didUnfollow: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when a user unfollows another user.\n", responses: {'200000': {description: Follow Object, content: {application/json: {schema: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, /webhook/follow.didCancelRequest: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when a user cancels a request to follow another user.\n", responses: {'200000': {description: Follow Object, content: {application/json: {schema: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, /webhook/follow.didDecineRequest: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when a user declines a follow request from another user.\n", responses: {'200000': {description: Follow Object, content: {application/json: {schema: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, /webhook/follow.didDeleteFollower: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when a user deletes a user from their follower's list.\n", responses: {'200000': {description: Follow Object, content: {application/json: {schema: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}}}}}, /webhook/push-notification/post.created: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is created\n", responses: {'200000': {description: post created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Post Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/post.need-reviewing: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is created\n", responses: {'200000': {description: post created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Post Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/post.approved: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is created\n", responses: {'200000': {description: post created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Post Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/comment.created: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is created\n", responses: {'200000': {description: comment created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Comment Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/comment.replied: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is created\n", responses: {'200000': {description: comment created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Comment Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/post.reacted: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is created\n", responses: {'200000': {description: post created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Post Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/comment.reacted: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is created\n", responses: {'200000': {description: comment created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Comment Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/message.created: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when message is created\n", responses: {'200000': {description: message created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Messages Information, type: object, properties: {messages: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, enum: [text, image, file, custom, video, audio, imagemap]}, data: {type: object, description: Body of a message.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, parentId: {type: string, description: ID of a parent message.}, fileId: {type: string, description: file key on cloud storage.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, childrenNumber: {type: integer, description: A number of comments in this message.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}]}}}}}}}}}, /webhook/push-notification/channel.created: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when channel is created/joined\n", responses: {'200000': {description: channel created/joined, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Channels Information, type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}]}}}}}}}}}, /webhook/push-notification/channel.joined: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when channel is created/joined\n", responses: {'200000': {description: channel created/joined, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Channels Information, type: object, properties: {channels: {type: array, items: {type: object, properties: {_id: {type: string}, path: {type: string}, channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatarFileId: {type: string}, isDeleted: {type: boolean, default: false, description: A flag to deleted a channel.}}, required: [channelId, createdAt, updatedAt]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}]}}}}}}}}}, /webhook/push-notification/follow.created: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when follow is created/requested/accepted\n", responses: {'200000': {description: follow created/requested/accepted, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Follow Response Object, type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}]}}}}}}}}}, /webhook/push-notification/follow.requested: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when follow is created/requested/accepted\n", responses: {'200000': {description: follow created/requested/accepted, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Follow Response Object, type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}]}}}}}}}}}, /webhook/push-notification/follow.accepted: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when follow is created/requested/accepted\n", responses: {'200000': {description: follow created/requested/accepted, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Follow Response Object, type: object, properties: {follows: {type: array, items: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}]}}}}}}}}}, /webhook/push-notification/mention-post.created: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is created\n", responses: {'200000': {description: post created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Post Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/mention-user-feed-post.created: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when post is created\n", responses: {'200000': {description: post created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Post Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/mention-comment.created: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is created\n", responses: {'200000': {description: comment created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Comment Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/mention-comment.replied: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is created\n", responses: {'200000': {description: comment created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Comment Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/mention-user-feed-comment.created: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is created\n", responses: {'200000': {description: comment created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Comment Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/mention-user-feed-comment.replied: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when comment is created\n", responses: {'200000': {description: comment created, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: false}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: Comment Information, type: object, properties: {posts: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a post. (for real-time event)}, path: {type: string, description: Path of a post. (for real-time event)}, postId: {type: string, description: ID of a post.}, parentPostId: {type: string, description: ID of a parent post.}, postedUserId: {type: string, description: ID of a creator.}, sharedUserId: {type: string, description: ID of a shared owner.}, sharedCount: {type: integer, description: number of shared post.}, targetId: {type: string, description: ID of a target.}, targetType: {type: string, enum: [user, community, content], description: 'Type of a target (user, community, content).'}, dataType: {type: string, enum: [text, image, file, video, liveStream], description: 'Type of a post (ex. text, image, file, video or anything in namespace like format (a.b.c.d)).', default: text}, data: {type: object, description: 'Body of a post. (It can be anything when dataType is not text, image, file)', properties: {text: {type: string, description: post text.}, fileId: {type: string, description: 'file key on cloud storage (for image, file post).'}, thumbnailFileId: {type: string, description: video thumbnail file id (for video post).}, videoFileId: {type: object, description: video file id for each quality (for video post)., properties: {original: {type: string, description: original file id}, low: {type: string, description: low video quality file id}, medium: {type: string, description: medium video quality file id}, high: {type: string, description: high video quality file id}}}, streamId: {type: string, description: video streaming id (for video streaming post)}}}, metadata: {type: object, description: Additional properties to support custom fields.}, flagCount: {type: integer, description: The number of users that has read this post.}, hashFlag: {type: object, description: The flag for checking internally that this post is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, editedAt: {type: string, description: The date/time when text or metadata of post is updated., format: date-time}, createdAt: {type: string, description: The date/time when a post is created., format: date-time}, updatedAt: {type: string, description: The date/time when a post is updated or deleted., format: date-time}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this post., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this post.}, commentsCount: {type: integer, description: The number of all comments for this post., example: 1}, comments: {type: array, items: {type: string, description: ID of a comment.}}, children: {type: array, items: {type: string, description: ID of a children post.}}, isDeleted: {type: boolean, default: false, description: A flag to deleted a post.}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedChildren: {type: boolean, default: false, description: The flag for checking internally that children post is reported or not.}, feedId: {type: string, description: Feed public id}, tags: {type: array, minItems: 0, maxItems: 5, items: {type: string, max: 24}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}}, required: [postId, data]}}, comments: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, communities: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}}}}]}}}}}}}}}, /webhook/push-notification/video-streaming.started: {get: {tags: [WebhookEvent], security: [{SocketAuth: []}], description: "This is called when video-streaming is started\n", responses: {'200000': {description: video-streaming is started, content: {application/json: {schema: {type: object, properties: {eventType: {type: string, enum: [push-notification.created]}, id: {type: string}, networkId: {type: string}, path: {type: string}, senderId: {type: string}, sentTime: {type: string, format: date-time}, version: {type: string}, data: {type: object, properties: {eventName: {type: string}, isBroadcast: {type: boolean, default: true}, targetIds: {type: array, items: {type: string}}, notify: {type: boolean, description: should notify to user targetIds}, title: {type: string}, body: {type: string}}, allOf: [{description: video streaming information, type: object, properties: {videoStreamings: {type: array, items: {type: object, properties: {streamId: {type: string}, userId: {type: string, description: Streaming creator user id}, thumbnailFileId: {type: string, description: Thumbnaiil file id}, title: {type: string}, status: {type: string, enum: [idle, live, ended, recorded], description: "Status of livestreaming   * idle - streaming is just created   * live - streamer is streaming now or streamer is reconnecting   * ended - streamer stop streaming or streamer disconnect and not connect back in time period   * recorded - live stream recordings available \n"}, isLive: {type: boolean, description: Deprecated (was used before for checking live status)}, isDeleted: {type: boolean, description: Is streaming deleted?}, description: {type: string}, platform: {type: object, properties: {name: {type: string}, version: {type: string}}}, startedAt: {type: string, format: date-time}, endedAt: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, metadata: {type: object}, resolution: {type: string, enum: [SD, HD, FHD], default: SD}, streamerUrl: {type: object, properties: {url: {type: string}, components: {type: object, properties: {origin: {type: string}, appName: {type: string}, streamName: {type: string}, query: {type: string}}}}}}}}, users: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, displayName: {type: string}, description: {type: string}, avatarFileId: {type: string}, avatarCustomUrl: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, isGlobalBan: {type: boolean, description: Global ban status. Every user can see this flag.}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, createdAt, updatedAt]}}, files: {type: array, items: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}]}}}}}}}}}}, components: {schemas: {User: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}, ChannelType: {type: string, enum: [standard, private, conversation, broadcast, community, live], description: "Channel Type:\n  * `standard` - Standard channel (deprecated) is public everyone can search and join this channel.\n  * `private` - Private channel (deprecated) is private only member can search and found this channel.\n  * `conversation` - Conversation channel is direct chat created by both users.\n  * `broadcast` - Broadcast channel is send message by admin only\n  * `community` - rename from Standard channel\n  * `live` - rename from Private channel\n"}, ChannelMembership: {type: string, enum: [none, member, banned]}, Channel: {type: object, properties: {channelId: {type: string, description: ID of a channel.}, isDistinct: {type: boolean}, metadata: {type: object, description: Additional properties to support custom fields.}, type: {$ref: '#/components/schemas/ChannelType', description: 'Type of a channel (standard, conversation, broadcast). This property is not be used for now.'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, avatar: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}, required: [channelId, createdAt, updatedAt]}, ChannelUser: {type: object, properties: {channelId: {type: string}, userId: {type: string}, roles: {type: array, items: {type: string}}, readToSegment: {type: integer}, membership: {$ref: '#/components/schemas/ChannelMembership'}, isBanned: {type: boolean}, isMuted: {type: boolean}, muteTimeout: {type: string, format: date-time}, lastActivity: {type: string, format: date-time}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}, required: [userId, channelId, createdAt, updatedAt]}, Comment: {type: object, properties: {_id: {type: string, description: Private ID of a comment. (for real-time event)}, path: {type: string, description: Path of a comment. (for real-time event)}, commentId: {type: string, description: ID of a comment.}, userId: {type: string, description: ID of a creator.}, parentId: {type: string, description: ID of a parent comment.}, rootId: {type: string, description: ID of a root comment.}, referenceId: {type: string, description: ID of a reference.}, referenceType: {type: string, enum: [post, content], description: Type of a reference (post/content).}, dataType: {type: string, description: 'Type of a comment (deprecated in new SDK version, will be fixed as "text").'}, dataTypes: {type: array, description: Types of a comment (a comment can contain multiple types), items: {type: string, enum: [text, image]}}, data: {type: object, description: Body of a comment.}, metadata: {type: object, description: Additional properties to support custom fields.}, childrenNumber: {type: number}, flagCount: {type: integer, description: The number of users that has read this comment.}, hashFlag: {type: object, description: The flag for checking internally that this comment is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter., example: {like: 1}}, reactionsCount: {type: integer, description: The number of all reactions for this comment., example: 1}, myReactions: {type: array, items: {type: string, example: like}, description: The list of my reactions to this comment.}, isDeleted: {type: boolean, default: false, description: A flag to deleted a comment.}, editedAt: {type: string, description: The date/time when comment is updated., format: date-time}, createdAt: {type: string, description: The date/time when a comment is created., format: date-time}, updatedAt: {type: string, description: The date/time when a comment is updated or deleted., format: date-time}, children: {type: array, items: {type: string, description: ID of a children comment.}}, segmentNumber: {type: integer, example: 1}, mentionees: {type: array, description: The object of the mentions type and user who get a notification from the post., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user\n", enum: [user]}, userIds: {type: array, description: Array of UserId., items: {type: string}}}}}, attachments: {type: array, description: The attachments/medias to be included in the comment, items: {type: object, properties: {type: {type: string, enum: [image]}, fileId: {type: string}}, required: [type, fileId]}}}, required: [commentId]}, Community: {type: object, properties: {_id: {type: string, description: Private ID of a community. (for real-time event)}, path: {type: string, description: Path of a community. (for real-time event)}, communityId: {type: string, description: ID of a community.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a creator.}, displayName: {type: string, description: Community name for displaying.}, avatarFileId: {type: string, description: ID of a avatar file.}, description: {type: string, description: Description of a community.}, isOfficial: {type: boolean, description: Is this community official?}, isPublic: {type: boolean, description: Is this community public?}, onlyAdminCanPost: {type: boolean, description: Can post by admin only?}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, metadata: {type: object, description: Additional properties to support custom fields.}, postsCount: {type: integer, description: Number of posts in community.}, membersCount: {type: integer, description: Number of members in community.}, isJoined: {type: boolean, description: Is this community joined?}, categoryIds: {type: array, items: {type: string, description: ID of a category.}}, isDeleted: {type: boolean, default: false, description: Is this community deleted?}, createdAt: {type: string, description: The date/time when a community is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community is updated or deleted., format: date-time}, hasFlaggedComment: {type: boolean, default: false, description: The flag for checking internally that comments inside post is reported or not.}, hasFlaggedPost: {type: boolean, default: false, description: The flag for checking internally that post inside community is reported or not.}, needApprovalOnPostCreation: {type: boolean, default: false, description: Determines that this community require an authorize user to review post before post is published}, moderatorMemberCount: {type: integer}}, required: [communityId, channelId, displayName]}, CommunityUser: {type: object, properties: {userId: {type: string, description: ID of a user.}, channelId: {type: string, description: ID of a channel.}, communityId: {type: string, description: ID of a community.}, communityMembership: {type: string, enum: [none, member, banned]}, isBanned: {type: boolean, default: false}, lastActivity: {type: string, format: date-time, description: The date/time when a user last did something related to the community such as add/remove members .}, roles: {type: array, items: {type: string}}, permissions: {type: array, items: {type: string, enum: [MUTE_CHANNEL, CLOSE_CHANNEL, EDIT_CHANNEL, EDIT_CHANNEL_RATELIMIT, EDIT_MESSAGE, DELETE_MESSAGE, BAN_USER_FROM_CHANNEL, MUTE_USER_INSIDE_CHANNEL, ADD_CHANNEL_USER, REMOVE_CHANNEL_USER, EDIT_CHANNEL_USER, ASSIGN_CHANNEL_USER_ROLE, BAN_USER, EDIT_USER, ASSIGN_USER_ROLE, EDIT_USER_FEED_POST, DELETE_USER_FEED_POST, EDIT_USER_FEED_COMMENT, DELETE_USER_FEED_COMMENT, ADD_COMMUNITY_USER, REMOVE_COMMUNITY_USER, EDIT_COMMUNITY_USER, BAN_COMMUNITY_USER, MUTE_COMMUNITY_USER, EDIT_COMMUNITY, DELETE_COMMUNITY, EDIT_COMMUNITY_POST, DELETE_COMMUNITY_POST, PIN_COMMUNITY_POST, EDIT_COMMUNITY_COMMENT, DELETE_COMMUNITY_COMMENT, ASSIGN_COMMUNITY_USER_ROLE, CREATE_COMMUNITY_CATEGORY, EDIT_COMMUNITY_CATEGORY, DELETE_COMMUNITY_CATEGORY, CREATE_ROLE, EDIT_ROLE, DELETE_ROLE]}}, createdAt: {type: string, description: The date/time when a community user is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community user is updated or deleted., format: date-time}}}, CommunityCategory: {type: object, properties: {categoryId: {type: string, description: ID of a community category.}, name: {type: string, description: Community category name for displaying.}, metadata: {type: object, description: Additional properties to support custom fields.}, avatarFileId: {type: string, description: ID of a avatar file.}, isDeleted: {type: boolean, default: false, description: Is this community category deleted?}, createdAt: {type: string, description: The date/time when a community category is created., format: date-time}, updatedAt: {type: string, description: The date/time when a community category is updated or deleted., format: date-time}}}, Message: {type: object, properties: {_id: {type: string}, path: {type: string}, messageId: {type: string, description: ID of a message.}, parentId: {type: string, description: ID of a parent message.}, childrenNumber: {type: integer, description: A number of comments in this message.}, channelId: {type: string, description: ID of a channel.}, userId: {type: string, description: ID of a user.}, type: {type: string, description: 'Type of a message (text, image, video, json).'}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, data: {type: object, description: Body of a message.}, isDeleted: {type: boolean, description: A flag to hide a message. Unable to show after hiding. It will be set to true when user deletes a message or a channel of this message is banned.}, channelSegment: {type: integer, description: A sequence number of a message in channel.}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel of this message is banned or this message is deleted., format: date-time}, editedAt: {type: string, description: The date/time when a message is deleted or updated., format: date-time}, flagCount: {type: integer, description: The number of users that has read this message.}, hashFlag: {type: object, description: The flag for checking internally that this message is reported or not., properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, reactions: {type: object, description: The mapping of reaction with reactionCounter.}, reactionsCount: {type: integer, description: The number of all reactions for this messages.}, myReactions: {type: array, description: The list of my reactions to this message. This property will not exist when it is triggered from an event 'message.didUpdate'., items: {type: string}}, latestReaction: {type: object, description: The latest reaction. This property will exist when it is triggered from an event 'message.didUpdate'., properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactionName: {type: string}, userId: {type: string}, userDisplayName: {type: string}, reactionId: {type: string}, eventName: {type: string}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}}}, mentionees: {type: array, description: The object of the mentions type and user who get a notification for the message., items: {type: object, properties: {type: {type: string, description: "type: * `user` - need to specific userIds and notification mentions individual user * `channel` - notification mentions all user in channel\n", enum: [user, channel]}, userIds: {type: array, description: 'Array of UserId. if the mention type is a channel, doesn''t send userIds', items: {type: string}}}}}}, required: [messageId, channelId, userId, channelSegment, createdAt, updatedAt]}, Reaction: {type: object, properties: {referenceId: {type: string, description: ID of a document.}, referenceType: {type: string, description: Type of document.}, reactors: {type: array, description: List of mapping between reaction and reactor ID., items: {type: object, properties: {reactionName: {type: string, description: 'Name of reaction such as ''like'', ''love'' and ''wow''.'}, userId: {type: string, description: ID of a creator.}, reactionId: {type: string, description: ID of a reaction.}, createdAt: {type: string, description: The date/time when a reaction is created., format: date-time}, updatedAt: {type: string, description: The date/time when a reaction is updated., format: date-time}}}}}, required: [referenceId, referenceType]}, ShortUser: {type: object, properties: {userId: {type: string}, displayName: {type: string}, metadata: {type: object}}}, Network: {type: object, properties: {_id: {type: string, description: ID of a network.}, name: {type: string, description: network name}, defaultMessageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, defaultAutoDeleteMessageByFlagLimit: {type: number, min: 1, example: 1, description: Number of flags that will force a message to be deleted automatically.}, createdAt: {type: string, description: The date/time when a network is created., format: date-time}, updatedAt: {type: string, description: The date/time when a network is created., format: date-time}}, required: [referenceId, referenceType]}, BlacklistRule: {type: object, properties: {ruleId: {type: string}, regex: {type: string, description: Rule of blacklist.}, isMatchExactWord: {type: boolean}, isEnabled: {type: boolean, description: A flag to enabled a rule.}, isDeleted: {type: boolean, description: A flag to deleted a rule.}, createdAt: {type: string, description: The date/time when a rule is created., format: date-time}, updatedAt: {type: string, description: The date/time when a rule is updated or deleted., format: date-time}}, required: [regex]}, WhitelistRule: {type: object, properties: {ruleId: {type: string}, regex: {type: string, description: Rule of whitelist.}, isEnabled: {type: boolean, description: A flag to enabled a rule.}, isDeleted: {type: boolean, description: A flag to deleted a rule.}, createdAt: {type: string, description: The date/time when a rule is created., format: date-time}, updatedAt: {type: string, description: The date/time when a rule is updated or deleted., format: date-time}}, required: [regex]}, Role: {type: object, properties: {permissions: {type: array, items: {type: string}}, publicId: {type: string}}, required: [publicId]}, ModerationSetting: {type: object, properties: {maxRepetition: {type: integer}, maxRepetitionTimeout: {type: integer}, blacklistMuteTimeout: {type: integer}, whitelistMuteTimeout: {type: integer}, maxRepetitionMuteTimeout: {type: integer}, enableImageModeration: {type: boolean}, imageModeration: {type: object, properties: {nudity: {type: number}, suggestive: {type: number}, violence: {type: number}, disturbing: {type: number}}}, createdAt: {type: string, description: The date/time when a rule is created., format: date-time}, updatedAt: {type: string, description: The date/time when a rule is updated or deleted., format: date-time}}}, Error: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}}}, File: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}, Follow: {type: object, properties: {from: {type: string}, to: {type: string}, status: {type: string, enum: [pending, accepted, none]}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}, FollowCount: {type: object, properties: {userId: {type: string}, followerCount: {type: integer}, followingCount: {type: integer}, pendingCount: {type: integer}}}}, securitySchemes: {ApiKeyAuth: {type: apiKey, in: header, name: X-API-Key}, SocketAuth: {type: apiKey, in: query, name: token}, BearerAuth: {type: http, scheme: bearer}}, responses: {SuccessResponse: {description: Success response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object}}}}}}, IsFlagByMeResponse: {description: Is flag by me response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {isFlagByMe: {type: boolean}}}}}}}}, IsPushNotifiableResponse: {description: Is push notifiable response., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {isPushNotifiable: {type: boolean}}}}}}}}, ChannelResultsResponse: {description: Channels Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {results: {type: array, items: {type: object, properties: {channel: {$ref: '#/components/schemas/Channel'}, channelUser: {$ref: '#/components/schemas/ChannelUser'}}}}}}}}}}}, ChannelResultResponse: {description: Channel Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {results: {type: object, properties: {channel: {$ref: '#/components/schemas/Channel'}, channelUser: {$ref: '#/components/schemas/ChannelUser'}}}}}}}}}}, ChannelResponse: {description: Channel response., content: {application/json: {schema: {type: object, properties: {isDistinct: {type: boolean}, type: {$ref: '#/components/schemas/ChannelType', description: 'Type of a channel (standard, conversation, broadcast). This property is not be used for now.'}, metadata: {type: object, description: Additional properties to support custom fields.}, tags: {type: array, description: List of tags. They will be used for searching., items: {type: string}}, isMuted: {type: boolean, description: Is this channel muted? (Computed by using muteTimeout).}, lastActivity: {type: string, description: The date/time when a user last did something related to the channel such as add/remove members ., format: date-time}, createdAt: {type: string, description: The date/time when a channel is created., format: date-time}, updatedAt: {type: string, description: The date/time when a channel is updated., format: date-time}, isRateLimited: {type: boolean, description: Is this channel limited sending rate? (Computed by using muteTimeout).}, rateLimitWindow: {type: integer, description: Waiting time interval before reset rateLimit to 0.}, channelId: {type: string, description: ID of a channel.}, muteTimeout: {type: string, description: The date/time to suppress muteness., format: date-time}, rateLimit: {type: integer, description: Number of messages within rate limit.}, rateLimitTimeout: {type: string, description: The date/time to suppress limitation of sending rate., format: date-time}, displayName: {type: string, description: Channel name for displaying.}, messageAutoDeleteEnabled: {type: boolean, description: Is message in this channel will be deleted when the user flagged until flag limit?}, autoDeleteMessageByFlagLimit: {type: number, description: Number of flags that will force a message to be deleted automatically.}, memberCount: {type: integer, description: Number of members in channel.}, messageCount: {type: integer, description: Number of messages in channel.}, avatar: {type: object, properties: {fileId: {type: string, description: Root file key on cloud storage.}, fileUrl: {type: string, description: Http link for download file}, type: {type: enum, description: File type., enum: [image, file, video]}, createdAt: {type: string, description: The date/time when a file is uploaded., format: date-time}, updatedAt: {type: string, description: The date/time when a file is updated., format: date-time}, attributes: {type: object, properties: {name: {type: string, description: File name.}, extension: {type: string, description: File format.}, size: {type: string, description: File size.}, mimeType: {type: string, description: File mime-type.}, metadata: {type: object, description: 'File image metadata (width, height etc.).', properties: {exif: {type: object}, gps: {type: object}, height: {type: number}, width: {type: number}, isFull: {type: boolean}}}}}}}}}}}}, ChannelUserResponse: {description: Channel User response., content: {application/json: {schema: {type: object, properties: {results: {type: array, items: {$ref: '#/components/schemas/ChannelUser'}}}}}}}, UsersResponse: {description: Users Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {results: {type: array, items: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}}}}, UserResponse: {description: User Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {_id: {type: string, description: Private ID of a user. (for real-time event)}, path: {type: string, description: Path of a user. (for real-time event)}, userId: {type: string}, roles: {type: array, items: {type: string}}, displayName: {type: string}, flagCount: {type: integer}, hashFlag: {type: object, properties: {bits: {type: integer}, hashes: {type: integer}, hash: {type: array, items: {type: integer}}}}, metadata: {type: object}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}, isDeleted: {type: boolean}}, required: [userId, createdAt, updatedAt]}}}}}}, NetworkResponse: {description: Network information., content: {application/json: {schema: {$ref: '#/components/schemas/Network'}}}}, BlacklistRulesResponse: {description: rules of blacklist Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {results: {type: array, items: {$ref: '#/components/schemas/BlacklistRule'}}}}}}}}}, BlacklistRuleResponse: {description: rule of blacklist Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {$ref: '#/components/schemas/BlacklistRule'}}}}}}, WhitelistRulesResponse: {description: rules of whitelist Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {results: {type: array, items: {$ref: '#/components/schemas/BlacklistRule'}}}}}}}}}, WhitelistRuleResponse: {description: rule of whitelist Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {$ref: '#/components/schemas/BlacklistRule'}}}}}}, RolesResponse: {description: Roles information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {moderatonSettings: {type: array, items: {$ref: '#/components/schemas/ModerationSetting'}}, roles: {type: array, items: {$ref: '#/components/schemas/Role'}}}}}}}}}, UserByAdminsResponse: {description: Users information., content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {type: object, properties: {users: {type: array, items: {type: object, properties: {info: {type: object, properties: {publicId: {type: string}, roleIds: {type: array, items: {type: string}}, roles: {type: array, items: {type: string}}, displayName: {type: string}, isGlobalBan: {type: boolean}, metadata: {type: object}, flagCount: {type: integer}}}}}}, roles: {type: array, items: {$ref: '#/components/schemas/Role'}}}}}}}}}, ModerationSettingResponse: {description: Moderation Setting Information, content: {application/json: {schema: {type: object, properties: {status: {type: string}, data: {$ref: '#/components/schemas/ModerationSetting'}}}}}}, UnexpectedError: {description: Unexpected error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 500000, message: Unexpected error}}}}, NotFoundError: {description: Resource Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Resource Not Found.}}}}, BadRequestError: {description: Bad Request error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400000, message: Bad Request.}}}}, ChannelNotFoundError: {description: Channel Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: Channel Not Found.}}}}, PermissionDenidedError: {description: Permission denied., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400301, message: User is not a member of a channel}}}}, UserIsBannedError: {description: User is banned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400304, message: User is banned from a channel / community.}}}}, RateLimitError: {description: Error due to a client create the same request with the same parameters exceed the number of time that server limit to., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400311, message: RateLimit Exceed.}}}}, UserNotFoundError: {description: User Not Found error., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400400, message: User Not Found.}}}}, NumberOfFlagExceedError: {description: Error when too many user is already flagged message., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Number of flag already exceed.}}}}, ForbiddenAvatarError: {description: Put file type not image into avatar, content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400300, message: Avatar must be an image.}}}}, UserNotJoinError: {description: User is not join community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400100, message: 'User ${userId} is not join this community ${communityId}'}}}}, UserIsUnbannedError: {description: User is unbanned from a channel / community., content: {application/json: {schema: {type: object, properties: {status: {type: string}, code: {type: string}, message: {type: string}, data: {type: object, properties: {detail: {type: array, items: {type: string}}}}}}, example: {status: error, code: 400316, message: User is unbanned from a channel / community.}}}}}}}
